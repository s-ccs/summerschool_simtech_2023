[
  {
    "objectID": "installation/vscode.html",
    "href": "installation/vscode.html",
    "title": "Julia VSCode Extension",
    "section": "",
    "text": "Documentation on the Julia VSCode extension can be found here\n\n\nFile-&gt;Preferences-&gt;Settings\nPut into the search bar Julia Exection\nJulia › Execution: Code In REPL\n\nPrint executed code in REPL and append it to the REPL history.\n\nMake sure that x is there!\n\n\n\nthis = 1\nis = 2\n# a code block\n\n#---\nand = 1\nthis =2\n# is another \none = 3\nCtrl+Enter executes the currently marked line/segment\nAlt+Enter If you are within one code-block, executes it\n+Shift Adding a shift to the previous commands executes them, and then moves to next line/block\nfind more keybindings here\n\n\n\nCtrl+Shift+I to automatically format your code"
  },
  {
    "objectID": "installation/vscode.html#recommended-settings",
    "href": "installation/vscode.html#recommended-settings",
    "title": "Julia VSCode Extension",
    "section": "",
    "text": "File-&gt;Preferences-&gt;Settings\nPut into the search bar Julia Exection\nJulia › Execution: Code In REPL\n\nPrint executed code in REPL and append it to the REPL history.\n\nMake sure that x is there!"
  },
  {
    "objectID": "installation/vscode.html#vscode-blocks",
    "href": "installation/vscode.html#vscode-blocks",
    "title": "Julia VSCode Extension",
    "section": "",
    "text": "this = 1\nis = 2\n# a code block\n\n#---\nand = 1\nthis =2\n# is another \none = 3\nCtrl+Enter executes the currently marked line/segment\nAlt+Enter If you are within one code-block, executes it\n+Shift Adding a shift to the previous commands executes them, and then moves to next line/block\nfind more keybindings here"
  },
  {
    "objectID": "installation/vscode.html#vscode-autoformat",
    "href": "installation/vscode.html#vscode-autoformat",
    "title": "Julia VSCode Extension",
    "section": "",
    "text": "Ctrl+Shift+I to automatically format your code"
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teachers",
    "section": "",
    "text": "Prof. Lisa DeBruine - Statistics, Simulation\nProf. Przemysław Szufel - Julia, Optimization\nProf. Hendrik Ranocha - Julia, RSE, Optimization"
  },
  {
    "objectID": "teaching.html#invited-speakers",
    "href": "teaching.html#invited-speakers",
    "title": "Teachers",
    "section": "",
    "text": "Prof. Lisa DeBruine - Statistics, Simulation\nProf. Przemysław Szufel - Julia, Optimization\nProf. Hendrik Ranocha - Julia, RSE, Optimization"
  },
  {
    "objectID": "teaching.html#organizers-and-teachers",
    "href": "teaching.html#organizers-and-teachers",
    "title": "Teachers",
    "section": "Organizers and Teachers",
    "text": "Organizers and Teachers\nAssistant Prof. Marco Oesting - Statistics\nAssistant Prof. Benjamin Uekermann - RSE\nAssistant Prof. Benedikt Ehinger - Julia, Visualization, RSE"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Tentative Program (as of 31 July 2023)"
  },
  {
    "objectID": "schedule.html#monday-9-october",
    "href": "schedule.html#monday-9-october",
    "title": "Schedule",
    "section": "Monday, 9 October",
    "text": "Monday, 9 October\n\n\n\n\nTime\nProgram\nWho\n\n\n\n\n10:00–10:30\nRegistration\n\n\n\n10:30–11:30\nWelcome/Introduction to RSE\nBenedikt Ehinger\n\n\n11:30–13:00\nWhy Julia?\nHendrik Ranocha\n\n\n13:00–14:00\nLunch\n\n\n\n14:00–16:00\nFirst Steps\nBenedikt Ehinger\n\n\n16:00–18:00\nReproducible Environments\nBenedikt Ehinger\n\n\n18:00–open end\nSocial Program"
  },
  {
    "objectID": "schedule.html#tuesday-10-october",
    "href": "schedule.html#tuesday-10-october",
    "title": "Schedule",
    "section": "Tuesday, 10 October",
    "text": "Tuesday, 10 October\n\n\n\n\n\n\n\n\n\nTime\nProgram\nWho\n\n\n\n\n9:00–11:00\nAdvanced Git & Contributing\nBenjamin Uekermann\n\n\n11:00–13:00\nUnit Testing\nBenedikt Ehinger & Benjamin Uekermann\n\n\n13:00–14:00\nLunch\n\n\n\n14:00–16:00\nContinuous Integration\nBenjamin Uekermann\n\n\n16:00–18:00\nCode Review\nLisa DeBruine\n\n\n18:00–open end\nSocial Program"
  },
  {
    "objectID": "schedule.html#wednesday-11-october",
    "href": "schedule.html#wednesday-11-october",
    "title": "Schedule",
    "section": "Wednesday, 11 October",
    "text": "Wednesday, 11 October\n\n\n\n\nTime\nProgram\nWho\n\n\n\n\n9:00–11:00\nDocumentation & PkgTemplates.jl\nBenedikt Ehinger\n\n\n11:00–13:00\nVisualization\nBenedikt Ehinger\n\n\n13:00–14:00\nLunch\n\n\n\n14:00–16:00\nLinear Algebra\nPrzemyslaw Szufel\n\n\n16:00–18:00\nMultiple Regression Basics\nMarco Oesting\n\n\n18:00–open end\nSocial Program"
  },
  {
    "objectID": "schedule.html#thursday-12-october",
    "href": "schedule.html#thursday-12-october",
    "title": "Schedule",
    "section": "Thursday, 12 October",
    "text": "Thursday, 12 October\n\n\n\n\nTime\nProgram\nWho\n\n\n\n\n9:00–11:00\nSimulating Data\nLisa DeBruine\n\n\n11:00–13:00\nResampling-based Statistics\nMarco Oesting\n\n\n13:00–14:00\nLunch\n\n\n\n14:00–16:00\nParallelization\nPrzemyslaw Szufel\n\n\n16:00–18:00\nProject Work\n\n\n\n18:00–open end\nSocial Program"
  },
  {
    "objectID": "schedule.html#friday-13-october",
    "href": "schedule.html#friday-13-october",
    "title": "Schedule",
    "section": "Friday, 13 October",
    "text": "Friday, 13 October\n\n\n\n\nTime\nProgram\nWho\n\n\n\n\n9:00–11:00\nJulia Highlights & Optimization\nHendrik Ranocha\n\n\n11:00–13:00\nProject Work\n\n\n\n13:00–14:00\nLunch\n\n\n\n14:00–16:00\nProject Work"
  },
  {
    "objectID": "projectwork.html",
    "href": "projectwork.html",
    "title": "Project Work",
    "section": "",
    "text": "A considerable of time will be dedicated to project work allowing you to apply the skills you have learnt during the summer school.\nWe encourage you to bring your own problem (e.g. something related to your own research) and try to build a small software package for that problem.\nMoreover, we will provide alternative problems to be solved:"
  },
  {
    "objectID": "projectwork.html#project-analyzing-spatial-data",
    "href": "projectwork.html#project-analyzing-spatial-data",
    "title": "Project Work",
    "section": "Project: Analyzing Spatial Data",
    "text": "Project: Analyzing Spatial Data\nIn this project, we propose to write a package that allows for the statistical analysis of spatially indexed data.\nBefore starting, you might look at an data example. To this end, download TemperatureData.jld2 and read this data via\n\nusing JLD2 \n@load \"TemperatureData.jld2\" ## potentially correct your path\nThis will give you data frames with information on weather stations in the Netherlands, summer temperature means (in \\(0.1^\\circ\\mathrm{C}\\)) and summer temperature maxima (in \\(0.1^\\circ\\mathrm{C}\\)). It is reasonable to assume that the temperature data are temporally independent. Furthermore, assuming a normal distribution at each station is quite common for this type of data.\nA reasonable package could for instance contain functions to estimate means and standard deviations station-by-station, fit linear models for \\(\\mu\\) or \\(\\log(\\sigma)\\) (with, e.g., geographic coordinates as covariates), or, provided that \\(\\sigma\\) is constant over space, a linear model for the data themselves (with repetitions.) $"
  },
  {
    "objectID": "cheatsheets/githubactions.html",
    "href": "cheatsheets/githubactions.html",
    "title": "Research Software Engineering Summer School",
    "section": "",
    "text": "Also one from GitHub"
  },
  {
    "objectID": "cheatsheets/julia.html",
    "href": "cheatsheets/julia.html",
    "title": "Research Software Engineering Summer School",
    "section": "",
    "text": "Matlab-Julia-Python Julia Basic Commands (pdf)"
  },
  {
    "objectID": "cheatsheets/julia.html#list-of-julia-cheetsheets",
    "href": "cheatsheets/julia.html#list-of-julia-cheetsheets",
    "title": "Research Software Engineering Summer School",
    "section": "",
    "text": "Matlab-Julia-Python Julia Basic Commands (pdf)"
  },
  {
    "objectID": "cheatsheets/julia.html#meta-tools",
    "href": "cheatsheets/julia.html#meta-tools",
    "title": "Research Software Engineering Summer School",
    "section": "“meta”-tools",
    "text": "“meta”-tools\n\n\n\n\n\n\n\n\n\n\nJulia\nPython\nR\n\n\n\n\nDocumentation\n?obj\nhelp(obj)\n?obj , help(obj)\n\n\nObject content\ndump(obj)\nprint(repr(obj))\nstr(obj)\n\n\nExported functions\nnames(FooModule)\ndir(foo_module)\nls(\"package:foo_module\")\n\n\nList function signatures with that name\nmethods(myFun)\n\nmethods(myFun)\n\n\nList functions for specific type\nmethodswith(SomeType)\ndir(SomeType)\nmethods(SomeType)\n\n\nWhere is …?\n@which func\nfunc.__module__\n\n\n\nWhat is …?\ntypeof(obj)\ntype(obj)\nclass(obj)\n\n\nIs it really a …?\nisa(obj, SomeType)\nisinstance(obj, SomeType)\nis(obj, SomeType)"
  },
  {
    "objectID": "cheatsheets/julia.html#debugging",
    "href": "cheatsheets/julia.html#debugging",
    "title": "Research Software Engineering Summer School",
    "section": "debugging",
    "text": "debugging\n\n\n\n\n\n\n\n@run sum(5+1)\nrun debugger, stop at error/breakpoints\n\n\n@enter sum(5+1)\nenter debugger, dont start code yet\n\n\n@show variable\nprints: variable = variablecontent\n\n\n@debug variable\nprints only to debugger, very convient in combination with &gt;ENV[\"JULIA_DEBUG\"] = ToBeDebuggedModule (could be Main as well)"
  },
  {
    "objectID": "material/3_wed/docs/slides.html#what-should-documentation-be-like",
    "href": "material/3_wed/docs/slides.html#what-should-documentation-be-like",
    "title": "Research Software Engineering Summer School",
    "section": "What should documentation be like?",
    "text": "What should documentation be like?\n\nARID (“Accept (some) Repetition in Documentation”)\n\nNot like code (for code: DRY - “don’t repeat yourself”)\nRepetition from code to docs is OK\n\nSkimmable\n\nHeadings: descriptive, concise\nRather use listings / “wall of text”\nAdd examples\n\nBest: Link to other functions (discoverability)"
  },
  {
    "objectID": "material/3_wed/docs/slides.html#readme.md",
    "href": "material/3_wed/docs/slides.html#readme.md",
    "title": "Research Software Engineering Summer School",
    "section": "README.md",
    "text": "README.md\n\nalways have a README file\nWhat problem the project solves\nCode example (best with screenshot)\nSupport / Issue-tracker\nContribution Guide\nInstallation instruction\nLicense\n(Roadmap)\n(Acknowledgement)\n\nA template Readme"
  },
  {
    "objectID": "material/3_wed/docs/slides.html#changelog.md",
    "href": "material/3_wed/docs/slides.html#changelog.md",
    "title": "Research Software Engineering Summer School",
    "section": "Changelog.md",
    "text": "Changelog.md\n# Changelog\n\n## v1.0.0\n### Breaking \n- *Removed* function X (@behinger)\n- *Deprecated* Y (@contributor)\n- *Changed* input to Z (#143)\n\n### Minor\n- *Fixed* typos in docs\n- *Added* new feature :tada:\n- *Security* issue found. No fix yet"
  },
  {
    "objectID": "material/3_wed/docs/slides.html#errormessages",
    "href": "material/3_wed/docs/slides.html#errormessages",
    "title": "Research Software Engineering Summer School",
    "section": "Errormessages",
    "text": "Errormessages\n\n\n\n\n\n\n\ndont\nrather\n\n\n\n\nInput Error\nInput Error: x was not a Float64, please check you didn’t provide an integer\n\n\nThis should never have happened\nXYZ was not fullfilled, please reach out as this should not have happened\n\n\n\n\nProvide context\nProvide advice\nCheck your tone\n\nmore advise on writethedocs.org"
  },
  {
    "objectID": "material/3_wed/docs/slides.html#docstrings",
    "href": "material/3_wed/docs/slides.html#docstrings",
    "title": "Research Software Engineering Summer School",
    "section": "Docstrings",
    "text": "Docstrings\n\"\"\"\n    radius(H::Hyperrectangle, [p]::Real=Inf)::Real\n\nReturn the radius of a hyperrectangle.\n\n# Arguments\n\n- `H` -- hyperrectangle\n- `p` -- (optional, default: `Inf`) norm\n\n# Output\n\nA real number representing the radius.\n\n# Notes\n\nThe radius is defined as the radius of the enclosing ball of the given\n`p`-norm of minimal volume with the same center.\n\n# Examples\n\n```julia-repl\njulia&gt; bar([1, 2], [1, 2])\n1\n\\```\n\nSee also [`bar!`](@ref), [`baz`](@ref), [`baaz`](@ref).\n\"\"\"\nfunction radius(H::Hyperrectangle, p::Real=Inf)::Real\n    ...\nend\nUse a template and add it to all your functions\nJulia Documentation Guide"
  },
  {
    "objectID": "material/3_wed/docs/slides.html#the-manual",
    "href": "material/3_wed/docs/slides.html#the-manual",
    "title": "Research Software Engineering Summer School",
    "section": "The Manual",
    "text": "The Manual\nA recommended system for documentation"
  },
  {
    "objectID": "material/3_wed/docs/slides.html#example-a-cookbook-toolbox",
    "href": "material/3_wed/docs/slides.html#example-a-cookbook-toolbox",
    "title": "Research Software Engineering Summer School",
    "section": "Example: A cookbook-toolbox",
    "text": "Example: A cookbook-toolbox\n\n\n\n\n\n\n\n\n\nTutorials\nHow-To\nReference\nExplanation\n\n\n\n\nteaching a child to cook\nseveral recipes\nhow ginger is added to the pot\nwhy garlic is needed in all cookingh\n\n\na lesson\na series of steps\ndry description\ndiscursive explanation\n\n\nbeginners/users\nusers\ndevelopers\nusers/developers\n\n\n\nCheck out the extended guide on divio.com"
  },
  {
    "objectID": "material/3_wed/docs/handout.html#task-1",
    "href": "material/3_wed/docs/handout.html#task-1",
    "title": "Documenter.jl",
    "section": "Task 1",
    "text": "Task 1\nSolve task 1"
  },
  {
    "objectID": "material/3_wed/docs/handout.html#task-2",
    "href": "material/3_wed/docs/handout.html#task-2",
    "title": "Documenter.jl",
    "section": "Task 2",
    "text": "Task 2\nSolve task 2"
  },
  {
    "objectID": "material/3_wed/docs/handout.html#task-3",
    "href": "material/3_wed/docs/handout.html#task-3",
    "title": "Documenter.jl",
    "section": "Task 3",
    "text": "Task 3\nSolve task 3"
  },
  {
    "objectID": "material/3_wed/linalg/Julia_Matrices_Optimization_JuMP_Stuttgart2023.html",
    "href": "material/3_wed/linalg/Julia_Matrices_Optimization_JuMP_Stuttgart2023.html",
    "title": "Matrix manipulation and optimization",
    "section": "",
    "text": "Przemysław Szufel\npwd() # Ctrl + ENTER\n\n\"C:\\\\AAABIBLIOTEKA\\\\MIT_Boston\\\\Stuttgart\"\nversioninfo()\n\nJulia Version 1.9.3\nCommit bed2cd540a (2023-08-24 14:43 UTC)\nBuild Info:\n  Official https://julialang.org/ release\nPlatform Info:\n  OS: Windows (x86_64-w64-mingw32)\n  CPU: 12 × 13th Gen Intel(R) Core(TM) i7-1355U\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-14.0.6 (ORCJIT, goldmont)\n  Threads: 2 on 12 virtual cores\nEnvironment:\n  JULIA_DEPOT_PATH = c:\\JuliaPkg\\Julia-1.9.3\n  JULIA_HOME = c:\\Julia-1.9.3\n  JULIA_VERSION = Julia-1.9.3"
  },
  {
    "objectID": "material/3_wed/linalg/Julia_Matrices_Optimization_JuMP_Stuttgart2023.html#working-with-matrices",
    "href": "material/3_wed/linalg/Julia_Matrices_Optimization_JuMP_Stuttgart2023.html#working-with-matrices",
    "title": "Matrix manipulation and optimization",
    "section": "Working with matrices",
    "text": "Working with matrices\n\nParametric data types in vectors and matrices\n\nv1 = [1,4,5]\n\n3-element Vector{Int64}:\n 1\n 4\n 5\n\n\n\ntypeof(v1)\n\n\nVector{Int64} (alias for Array{Int64, 1})\n\n\n\n\nv2 = [1.1, 2.2]\n\n2-element Vector{Float64}:\n 1.1\n 2.2\n\n\n\ntypeof(v2)\n\n\nVector{Float64} (alias for Array{Float64, 1})\n\n\n\n\neltype(v1),  eltype(v2)\n\n(Int64, Float64)\n\n\n\nb = Int[]\nappend!(b, 5)\n\n1-element Vector{Int64}:\n 5\n\n\n\nc = []\nappend!(c, 5)\n\n1-element Vector{Any}:\n 5\n\n\n\nc = Complex(1,4)\n\n1 + 4im\n\n\n\ntypeof(c)\n\nComplex{Int64}\n\n\n\ndump(c)\n\nComplex{Int64}\n  re: Int64 1\n  im: Int64 4\n\n\n\nc2=Complex{Float64}(1,4)\n\n1.0 + 4.0im\n\n\n\ntypeof(c2)\n\n\nComplexF64 (alias for Complex{Float64})\n\n\n\n\nc2=Complex{Float32}(1,4)\ntypeof(c2)\n\n\nComplexF32 (alias for Complex{Float32})\n\n\n\n\nx = 1//2 + 1//4\n\n3//4\n\n\n\ntypeof(x)\n\nRational{Int64}\n\n\n\nc3=Complex{Rational{Int128}}(1//4,4)\n@show c3\n\nc3 = 1//4 + 4//1*im\n\n\n1//4 + 4//1*im\n\n\n\nComplex{Float64}(c3)\n\n0.25 + 4.0im\n\n\n\nzeros(Int, 2,3)\n\n2×3 Matrix{Int64}:\n 0  0  0\n 0  0  0\n\n\n\nMatrix{Float64}(undef,40, 30 )\n\n40×30 Matrix{Float64}:\n 1.18028e288   3.97085e246     1.12252e-311  …  1.24186e-308  1.11097e-308\n 8.37171e-144  8.88243e247     8.48798e-314     1.16228e-308  2.80426e-309\n 7.7282e-91    2.15799e243     1.12252e-311     1.11368e-308  2.81495e-309\n 1.11032e-47   1.14428e243     0.0              1.39053e-308  2.79554e-309\n 3.42242e126   1.35617e248   NaN                1.21694e-308  2.77375e-309\n 3.75598e199   0.0             1.12252e-311  …  1.21446e-308  2.80379e-309\n 1.12247e-311  0.0             1.12252e-311     1.23045e-308  0.0\n 1.12252e-311  1.12041e-311    2.122e-314       1.2191e-308   1.4307e-308\n 1.12252e-311  1.12252e-311    1.12041e-311     1.22031e-308  1.40223e-308\n 4.0e-323      1.35808e-312    1.12252e-311     3.95351e-309  1.431e-308\n 6.49269e169   1.12149e-311    1.12252e-311  …  4.09709e-309  1.40176e-308\n 1.12247e-311  1.16095e-28     1.12252e-311     1.41472e-308  1.43129e-308\n 0.0           5.80815e286   NaN                4.53233e-309  1.25379e-308\n ⋮                                           ⋱                \n 1.12252e-311  0.0             0.0              1.25441e-308  0.0\n 1.12252e-311  0.0             0.0              1.71226e-309  0.0\n 1.12252e-311  1.12252e-311  NaN             …  2.73984e-309  0.0\n 1.56246e161   1.12252e-311    1.12252e-311     1.07513e-308  0.0\n 1.12041e-311  1.12252e-311    1.12252e-311     1.26064e-308  0.0\n 1.12252e-311  1.12252e-311    2.122e-314       1.73581e-309  0.0\n 4.24399e-314  4.0e-323        1.12041e-311     2.79838e-309  0.0\n 4.0e-323      0.0             1.12247e-311  …  1.37498e-308  0.0\n 1.86078e160   1.12252e-311    0.0              1.10946e-308  0.0\n 1.12213e-311  1.12252e-311    0.0              1.10984e-308  0.0\n 1.12149e-311  1.12252e-311    1.12252e-311     1.38799e-308  0.0\n 1.16466e-28   0.0             0.0              1.23517e-308  0.0\n\n\n\n@show Array{Any}(undef, 2, 3)   # 2x3 Matrix of Any\n@show zeros(5)              # vector of Float64 zeros\n@show ones(Int64, 2, 1)     # 2x1 array of Int64 ones\n@show trues(3), falses(3)   # tuple of vector of trues and of falses\n\n@show x = range(1, stop=2, length=5)  # iterator having 5 equally spaced elements\n@show collect(x)    # converts iterator to vector\n@show 1:10          # iterable from 1 to 10\n@show 1:2:10        # iterable from 1 to 9 with 2 skip\n@show reshape(1:12, 3, 4)   # 3x4 array filled with 1:12 values\n\nArray{Any}(undef, 2, 3) = Any[#undef #undef #undef; #undef #undef #undef]\nzeros(5) = [0.0, 0.0, 0.0, 0.0, 0.0]\nones(Int64, 2, 1) = [1; 1;;]\n(trues(3), falses(3)) = (Bool[1, 1, 1], Bool[0, 0, 0])\nx = range(1, stop = 2, length = 5) = 1.0:0.25:2.0\ncollect(x) = [1.0, 1.25, 1.5, 1.75, 2.0]\n1:10 = 1:10\n1:2:10 = 1:2:9\nreshape(1:12, 3, 4) = [1 4 7 10; 2 5 8 11; 3 6 9 12]\n\n\n3×4 reshape(::UnitRange{Int64}, 3, 4) with eltype Int64:\n 1  4  7  10\n 2  5  8  11\n 3  6  9  12\n\n\n\nMatrix\n\n\nMatrix (alias for Array{T, 2} where T)\n\n\n\n\ny = Matrix{Int64}(undef, 2, 3)\n\n2×3 Matrix{Int64}:\n 51539607568  51539607564  30064771079\n 81604378641  30064771084  30064771079\n\n\n\nm = zeros( 4, 5)\nm[1,3] = 66\nm\n# 1-based numbering \n\n4×5 Matrix{Float64}:\n 0.0  0.0  66.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0\n 0.0  0.0   0.0  0.0  0.0\n\n\n\nm[1:end-1,3] #array slicing\n\n3-element Vector{Float64}:\n 66.0\n  0.0\n  0.0\n\n\n\na = [1,2,3,4]\nb = a'\nb[1,1] = 99\na\n\n4-element Vector{Int64}:\n 99\n  2\n  3\n  4\n\n\n\na = reshape(1:12, 3, 4)\ndisplay(a[:, 3:end]) # 3x2 matrix\ndisplay(a[:, 1]) # 3 element vector\ndisplay(a[1, :]) # 4 element vector\n\n3×2 Matrix{Int64}:\n 7  10\n 8  11\n 9  12\n\n\n3-element Vector{Int64}:\n 1\n 2\n 3\n\n\n4-element Vector{Int64}:\n  1\n  4\n  7\n 10\n\n\n\n\nVectorization of operators\n\nBool.( [1 2] .&lt; [2 1])\n\n1×2 BitMatrix:\n 1  0\n\n\n\n[1 2 3] .&lt; [4 2 2]\n\n1×3 BitMatrix:\n 1  0  0\n\n\n\n2 .+ [1 2 3; 4 5 6] \n\n2×3 Matrix{Int64}:\n 3  4  5\n 6  7  8\n\n\n\n2 .+ [1 2 3; 4 5 6] \n\n2×3 Matrix{Int64}:\n 3  4  5\n 6  7  8\n\n\n\nf(a,b) = a &lt; b + 1 ? a : b\n\nf (generic function with 1 method)\n\n\n\nf.([1 2 3], [4 2 2])\n\n1×3 Matrix{Int64}:\n 1  2  2\n\n\n\n# dot operator :  . \n\n\n[1,2,3] .&lt; [4,2,1]\n\n3-element BitVector:\n 1\n 0\n 0\n\n\n\n\"\"\"\ndef f(x,y):\n   return 2*x if x &lt; y else -1\n\"\"\"\n\n\"def f(x,y):\\n   return 2*x if x &lt; y else -1\\n\"\n\n\n\nf(x,y) =  x&lt;y ? 2x : -1\n\nf (generic function with 1 method)\n\n\n\nf(10,30)\n\n20\n\n\n\na=  [1,2,3]\nb=  [0,5,6]\n\n3-element Vector{Int64}:\n 0\n 5\n 6\n\n\n\nf.(a,b)\n\n3-element Vector{Int64}:\n -1\n  4\n  6\n\n\n\na .* b\n\n3-element Vector{Int64}:\n  0\n 10\n 18\n\n\n\n\nWorking with sparse matrices and unmaterialized data\n\nusing SparseArrays\nusing LinearAlgebra\n\n\na = sparse(I, 10, 10)\n\n10×10 SparseMatrixCSC{Bool, Int64} with 10 stored entries:\n 1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1\n\n\n\nb = Array(a)\n\n10×10 Matrix{Bool}:\n 1  0  0  0  0  0  0  0  0  0\n 0  1  0  0  0  0  0  0  0  0\n 0  0  1  0  0  0  0  0  0  0\n 0  0  0  1  0  0  0  0  0  0\n 0  0  0  0  1  0  0  0  0  0\n 0  0  0  0  0  1  0  0  0  0\n 0  0  0  0  0  0  1  0  0  0\n 0  0  0  0  0  0  0  1  0  0\n 0  0  0  0  0  0  0  0  1  0\n 0  0  0  0  0  0  0  0  0  1\n\n\n\nc = sparse(b)\n\n10×10 SparseMatrixCSC{Bool, Int64} with 10 stored entries:\n 1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1\n\n\n\nrr = sprand(1000_000,1000_000,0.000_000_1)\n\n1000000×1000000 SparseMatrixCSC{Float64, Int64} with 99870 stored entries:\n⎡⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎤\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎣⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎦\n\n\n\nusing Statistics\nStatistics.mean(rr)\n\n4.992023180743609e-8\n\n\n\nrr2 = sprand(1000_000,1000_000,0.000_000_01)\n\n1000000×1000000 SparseMatrixCSC{Float64, Int64} with 10050 stored entries:\n⎡⣒⣺⡴⠳⣸⠲⢿⢼⡾⢙⣫⣒⣶⠷⣻⣶⣼⢿⡵⢟⣽⡮⣳⡾⣾⣿⡷⢫⣷⣥⣿⣳⢾⡖⣿⣎⣷⡿⡷⡦⎤\n⎢⡼⣿⡿⢫⢶⡽⢊⢿⣬⣛⢷⢿⣾⣟⡫⣾⣟⢯⢞⣿⣿⠷⣿⣻⣾⠯⣾⣯⡵⣦⣿⠿⠗⣶⡺⣾⣿⣟⣷⡟⎥\n⎢⠛⣯⢺⡦⡾⣷⣿⣵⣖⣝⣜⣿⣿⣾⣿⡯⣏⣿⡋⣾⡿⢳⣵⣿⠽⣽⣿⣭⡿⡏⣗⣽⣬⣿⣍⣿⣧⡩⣧⣞⎥\n⎢⣾⣹⣿⡡⣽⠿⣾⣧⣼⠻⣻⢷⣞⡏⣿⡿⣿⢮⢿⢺⡷⡯⡿⣿⢻⢻⣟⣿⣻⣹⡛⣴⣿⡞⣿⣽⣩⣮⣏⣇⎥\n⎢⠋⢿⢳⡱⣩⣿⣷⢷⢿⢄⣩⣽⡻⣿⡿⡫⡿⡟⣯⡷⣿⠷⡿⡿⣯⣳⠼⣯⣫⢿⡟⣿⣯⣟⢻⢿⣯⢛⣷⢨⎥\n⎢⢺⣫⣽⣹⣾⣽⣿⣿⢯⣻⢻⢟⣻⣝⣗⢟⠻⣻⣯⣫⡶⣵⣝⠶⣿⡿⣟⣧⣗⣦⢵⢾⣾⣻⣗⣿⡻⡿⣿⡯⎥\n⎢⣼⣧⣽⡏⣷⣿⢏⣿⣿⣿⢾⣗⣍⣏⣷⣚⡖⣿⡶⣿⣕⠝⣿⣾⣷⣽⣩⣞⢿⣿⢽⣿⣿⢿⣽⡇⣭⣿⣿⣿⎥\n⎢⡹⣏⡊⣾⡻⢤⣛⢿⣇⣿⣽⡎⢾⣯⠶⣿⢿⣾⣿⣿⡺⣿⣻⣓⡟⣞⣟⣯⣿⣽⢵⣱⡿⢻⣓⣼⣣⣯⡾⠏⎥\n⎢⠼⣝⡽⡧⢳⣿⣯⣹⣗⣬⣣⣾⣟⣜⣫⣿⣡⣿⣝⢪⢟⣾⣾⣶⣗⣿⣿⣯⡿⣲⢭⢜⣓⣿⣿⡿⣾⣽⢿⡧⎥\n⎢⡒⡽⣿⣝⡙⣵⠗⣷⣿⣿⣻⢞⢛⡷⠇⣷⢷⢱⣯⣿⢽⣯⡝⣺⣻⣚⣚⢧⡿⡽⣮⡿⣷⡿⣷⣯⣹⣿⡦⡝⎥\n⎢⣿⣗⡛⡾⢽⢮⣿⣿⣲⣿⡻⣮⣿⢾⣶⣿⠺⣸⣷⣻⣿⣷⡿⣻⣻⣿⣮⡥⡾⣿⣿⣼⣾⣶⡿⡿⡿⣾⣷⣷⎥\n⎢⡵⣛⣿⣽⣾⣿⣻⣦⣿⡾⣯⣾⣖⡻⡼⣷⡾⣺⣛⢽⡿⣻⣜⠿⢗⣽⣛⢿⣸⣿⣽⣮⣿⣿⡹⣽⣮⡿⣻⡔⎥\n⎢⠿⢿⡿⣟⠾⣻⣽⢯⣿⣿⢟⠿⣿⣻⣿⣷⣪⣝⡟⣿⢽⣮⢃⠮⣿⣌⣿⢏⣻⣾⣾⢾⢟⣿⡿⣻⣽⡟⣿⢟⎥\n⎢⣻⣿⢟⣿⣺⡦⢽⢷⣯⢹⣽⣽⣿⡾⡿⣿⠻⣿⢷⣽⢿⣿⣷⢛⡳⢿⢿⣷⣟⢻⢾⣑⣛⣵⢽⡿⣳⡃⢻⣟⎥\n⎢⣳⡻⢧⡟⣿⡾⡺⠿⣟⣿⠾⣲⣷⢽⣯⡿⣿⣭⡿⣿⡿⢲⣻⣿⣯⢺⡷⣧⣹⣿⣟⣿⠿⠿⢿⣹⣦⣹⣗⣾⎥\n⎢⡹⣙⡿⠿⢩⡷⣍⣪⣯⡻⣿⣽⣿⣿⣷⢷⢹⣟⣙⣽⣟⡝⣿⡳⣯⢹⣸⢿⠭⣟⡅⣟⣿⣈⣿⣟⢫⡽⣍⣯⎥\n⎢⢯⣿⣍⣻⡻⣶⣷⡯⣛⣞⣞⣿⡯⣷⡽⣯⢿⣭⡹⣿⣝⡦⣿⣿⣿⡬⣽⣿⣟⣭⣝⣾⡿⣿⣿⡿⠬⣭⢢⠯⎥\n⎢⣺⣪⣺⣾⣮⡷⡮⡏⣿⣿⣻⣿⣷⠧⡵⣷⣹⡮⣷⣝⣾⢿⢷⢟⠏⣷⣭⣿⡞⣾⣛⣝⣩⣾⢦⣽⣿⠿⣼⡯⎥\n⎢⣋⣟⣚⣾⣛⣿⣿⣯⣿⣺⣯⢿⣿⢿⣽⠽⣿⣟⣿⣺⣿⡽⢷⢿⣿⣽⣿⢟⣿⣽⠿⠛⣸⢿⡯⢽⣟⢛⣿⡻⎥\n⎣⠸⠯⡿⠽⡖⠏⠿⢿⢗⣿⣗⡳⡷⠷⡿⡿⠯⡟⢯⡾⢯⢫⡵⢟⣞⠷⡯⡿⣛⠿⠼⠿⢽⡿⡣⠾⠯⡾⣽⣍⎦\n\n\n\nrr_sum = rr .+ rr2\n\n1000000×1000000 SparseMatrixCSC{Float64, Int64} with 109920 stored entries:\n⎡⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎤\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎥\n⎣⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⎦\n\n\n\nusing BandedMatrices\n\n\nBandedMatrix(Ones(7,7), (0,0))\n\n7×7 BandedMatrix{Float64} with bandwidths (0, 0):\n 1.0   ⋅    ⋅    ⋅    ⋅    ⋅    ⋅ \n  ⋅   1.0   ⋅    ⋅    ⋅    ⋅    ⋅ \n  ⋅    ⋅   1.0   ⋅    ⋅    ⋅    ⋅ \n  ⋅    ⋅    ⋅   1.0   ⋅    ⋅    ⋅ \n  ⋅    ⋅    ⋅    ⋅   1.0   ⋅    ⋅ \n  ⋅    ⋅    ⋅    ⋅    ⋅   1.0   ⋅ \n  ⋅    ⋅    ⋅    ⋅    ⋅    ⋅   1.0\n\n\n\na = BandedMatrix(Eye(7), (1,1))\n\n7×7 BandedMatrix{Float64} with bandwidths (1, 1):\n 1.0  0.0   ⋅    ⋅    ⋅    ⋅    ⋅ \n 0.0  1.0  0.0   ⋅    ⋅    ⋅    ⋅ \n  ⋅   0.0  1.0  0.0   ⋅    ⋅    ⋅ \n  ⋅    ⋅   0.0  1.0  0.0   ⋅    ⋅ \n  ⋅    ⋅    ⋅   0.0  1.0  0.0   ⋅ \n  ⋅    ⋅    ⋅    ⋅   0.0  1.0  0.0\n  ⋅    ⋅    ⋅    ⋅    ⋅   0.0  1.0\n\n\n\nBandedMatrix(Zeros(7,7), (1,2))  #BandedMatrix(Zeros(m,n), (l,u))    \n\n7×7 BandedMatrix{Float64} with bandwidths (1, 2):\n 0.0  0.0  0.0   ⋅    ⋅    ⋅    ⋅ \n 0.0  0.0  0.0  0.0   ⋅    ⋅    ⋅ \n  ⋅   0.0  0.0  0.0  0.0   ⋅    ⋅ \n  ⋅    ⋅   0.0  0.0  0.0  0.0   ⋅ \n  ⋅    ⋅    ⋅   0.0  0.0  0.0  0.0\n  ⋅    ⋅    ⋅    ⋅   0.0  0.0  0.0\n  ⋅    ⋅    ⋅    ⋅    ⋅   0.0  0.0\n\n\n\nb = BandedMatrix((0=&gt;1:7,-1=&gt;8:14), (7,7), (1,0))  \n#BandedMatrix(bands_dict, (n,m), (l,u))   \n\n7×7 BandedMatrix{Int64} with bandwidths (1, 0):\n 1  ⋅   ⋅   ⋅   ⋅   ⋅  ⋅\n 8  2   ⋅   ⋅   ⋅   ⋅  ⋅\n ⋅  9   3   ⋅   ⋅   ⋅  ⋅\n ⋅  ⋅  10   4   ⋅   ⋅  ⋅\n ⋅  ⋅   ⋅  11   5   ⋅  ⋅\n ⋅  ⋅   ⋅   ⋅  12   6  ⋅\n ⋅  ⋅   ⋅   ⋅   ⋅  13  7\n\n\n\nc = a+b\n\n7×7 BandedMatrix{Float64} with bandwidths (1, 1):\n 2.0  0.0    ⋅     ⋅     ⋅     ⋅    ⋅ \n 8.0  3.0   0.0    ⋅     ⋅     ⋅    ⋅ \n  ⋅   9.0   4.0   0.0    ⋅     ⋅    ⋅ \n  ⋅    ⋅   10.0   5.0   0.0    ⋅    ⋅ \n  ⋅    ⋅     ⋅   11.0   6.0   0.0   ⋅ \n  ⋅    ⋅     ⋅     ⋅   12.0   7.0  0.0\n  ⋅    ⋅     ⋅     ⋅     ⋅   13.0  8.0\n\n\n\nc[5,5] = 99\nc[6,5] = 999\nc\n\n7×7 BandedMatrix{Float64} with bandwidths (1, 1):\n 2.0  0.0    ⋅     ⋅      ⋅     ⋅    ⋅ \n 8.0  3.0   0.0    ⋅      ⋅     ⋅    ⋅ \n  ⋅   9.0   4.0   0.0     ⋅     ⋅    ⋅ \n  ⋅    ⋅   10.0   5.0    0.0    ⋅    ⋅ \n  ⋅    ⋅     ⋅   11.0   99.0   0.0   ⋅ \n  ⋅    ⋅     ⋅     ⋅   999.0   7.0  0.0\n  ⋅    ⋅     ⋅     ⋅      ⋅   13.0  8.0\n\n\n\nA = brand(10000,10000,4,3)\n\n10000×10000 BandedMatrix{Float64} with bandwidths (4, 3):\n 0.717031  0.00970876  0.36922   0.676207   …   ⋅         ⋅         ⋅ \n 0.524178  0.458799    0.769404  0.0453147      ⋅         ⋅         ⋅ \n 0.64484   0.24969     0.876344  0.0749038      ⋅         ⋅         ⋅ \n 0.898134  0.544399    0.505147  0.468312       ⋅         ⋅         ⋅ \n 0.447232  0.937858    0.918129  0.584957       ⋅         ⋅         ⋅ \n  ⋅        0.472211    0.725038  0.169458   …   ⋅         ⋅         ⋅ \n  ⋅         ⋅          0.875969  0.86004        ⋅         ⋅         ⋅ \n  ⋅         ⋅           ⋅        0.413408       ⋅         ⋅         ⋅ \n  ⋅         ⋅           ⋅         ⋅             ⋅         ⋅         ⋅ \n  ⋅         ⋅           ⋅         ⋅             ⋅         ⋅         ⋅ \n  ⋅         ⋅           ⋅         ⋅         …   ⋅         ⋅         ⋅ \n  ⋅         ⋅           ⋅         ⋅             ⋅         ⋅         ⋅ \n  ⋅         ⋅           ⋅         ⋅             ⋅         ⋅         ⋅ \n ⋮                                          ⋱                      \n  ⋅         ⋅           ⋅         ⋅             ⋅         ⋅         ⋅ \n  ⋅         ⋅           ⋅         ⋅             ⋅         ⋅         ⋅ \n  ⋅         ⋅           ⋅         ⋅         …   ⋅         ⋅         ⋅ \n  ⋅         ⋅           ⋅         ⋅             ⋅         ⋅         ⋅ \n  ⋅         ⋅           ⋅         ⋅             ⋅         ⋅         ⋅ \n  ⋅         ⋅           ⋅         ⋅             ⋅         ⋅         ⋅ \n  ⋅         ⋅           ⋅         ⋅            0.601123   ⋅         ⋅ \n  ⋅         ⋅           ⋅         ⋅         …  0.845169  0.991419   ⋅ \n  ⋅         ⋅           ⋅         ⋅            0.811976  0.670674  0.474065\n  ⋅         ⋅           ⋅         ⋅            0.318209  0.641995  0.94989\n  ⋅         ⋅           ⋅         ⋅            0.22135   0.198353  0.664046\n  ⋅         ⋅           ⋅         ⋅            0.544739  0.733808  0.51824\n\n\n\nb = randn(10000)\n\n10000-element Vector{Float64}:\n -0.8946805178374083\n  1.791456844344719\n -1.006332232770576\n  0.791271927711156\n -0.94388977856925\n -0.5040404487535977\n  1.1438942503322178\n  0.9156317592307124\n -0.35552174058202674\n -0.6318695191330024\n  1.5025208196461846\n -1.4482466971059618\n  0.17640586952859919\n  ⋮\n -0.3754881597565462\n -0.51204988872086\n -0.23009357169989553\n  0.9263014134731414\n  1.1145981384963324\n -0.18044177324813834\n  0.5248468744312341\n  0.17633316812053937\n  1.8671731928639776\n -0.9640139843966083\n -0.9608403570552534\n -2.0782487798309455\n\n\n\nA*b  #   Calls optimized matrix*vector routine\n\n10000-element Vector{Float64}:\n -0.46061597769868723\n -0.9265070327469163\n -2.013311452629498\n -0.7506352359068451\n -0.06983968834709088\n  1.018277053750206\n -0.8251580030395005\n  1.8107551270275635\n -1.5123515240377137\n -0.5287396651053948\n -0.8581073378399161\n -0.7516150550394638\n -1.2631999408486454\n  ⋮\n  0.1842696379906157\n  1.5976905287134318\n  1.0873361557626304\n  1.33002721957883\n  1.9513355177555978\n  2.3502263751233157\n  0.7054007981349245\n -0.1342826431395634\n -1.290661336050847\n -1.3111973496087521\n  0.06480040232269113\n -1.388614621665221\n\n\n\nA*A  #   Calls optimized matrix*matrix routine\n\n10000×10000 BandedMatrix{Float64} with bandwidths (8, 6):\n 1.36464  0.471733  0.937361  0.829633  …   ⋅         ⋅         ⋅ \n 1.40954  0.969943  1.76996   0.789391      ⋅         ⋅         ⋅ \n 1.58287  1.41727   2.41116   1.11858       ⋅         ⋅         ⋅ \n 1.98477  1.56936   2.6256    1.52106       ⋅         ⋅         ⋅ \n 2.24524  1.907     3.07939   1.23695       ⋅         ⋅         ⋅ \n 1.00182  1.04811   2.15919   1.19748   …   ⋅         ⋅         ⋅ \n 1.52705  1.3049    2.08748   1.12917       ⋅         ⋅         ⋅ \n 0.69866  1.18208   1.87358   1.61458       ⋅         ⋅         ⋅ \n 0.44223  1.29412   2.13079   1.59959       ⋅         ⋅         ⋅ \n  ⋅       0.175528  0.401125  0.228377      ⋅         ⋅         ⋅ \n  ⋅        ⋅        0.312613  0.478744  …   ⋅         ⋅         ⋅ \n  ⋅        ⋅         ⋅        0.267922      ⋅         ⋅         ⋅ \n  ⋅        ⋅         ⋅         ⋅            ⋅         ⋅         ⋅ \n ⋮                                      ⋱                      \n  ⋅        ⋅         ⋅         ⋅            ⋅         ⋅         ⋅ \n  ⋅        ⋅         ⋅         ⋅            ⋅         ⋅         ⋅ \n  ⋅        ⋅         ⋅         ⋅        …   ⋅         ⋅         ⋅ \n  ⋅        ⋅         ⋅         ⋅           0.579612   ⋅         ⋅ \n  ⋅        ⋅         ⋅         ⋅           1.24427   0.775432   ⋅ \n  ⋅        ⋅         ⋅         ⋅           1.09257   0.557801  0.27567\n  ⋅        ⋅         ⋅         ⋅           1.26119   1.1039    0.679625\n  ⋅        ⋅         ⋅         ⋅        …  1.78903   1.65778   1.57376\n  ⋅        ⋅         ⋅         ⋅           1.56548   1.86529   1.48994\n  ⋅        ⋅         ⋅         ⋅           1.88381   1.90089   1.6069\n  ⋅        ⋅         ⋅         ⋅           1.78658   1.89717   1.11774\n  ⋅        ⋅         ⋅         ⋅           1.55716   1.85718   1.47509\n\n\n\n@time A\\b  #   Calls optimized matrix\\vector routine\n\n  2.290472 seconds (2.51 M allocations: 170.883 MiB, 6.95% gc time, 99.57% compilation time)\n\n\n10000-element Vector{Float64}:\n  -9.91674386347239\n -10.444435524208323\n -41.59197593049818\n  32.05223575044192\n  73.84927967273306\n -27.812181705093835\n -88.75981265563105\n  56.52742402129784\n  85.06971609320844\n -79.71545999885285\n -77.01728811351599\n   9.002008266490867\n  59.49522736987263\n   ⋮\n   4.779827015270882e10\n   6.540332502802427e10\n  -3.116607411863486e10\n   3.1950751793228928e10\n  -1.7542419719066235e10\n   2.534581982521389e10\n  -5.195472316257162e10\n  -1.2631042018255177e10\n   1.4642478006565704e10\n   5.8643172114918945e10\n  -3.0952824972707294e10\n  -1.2727204977828215e10"
  },
  {
    "objectID": "material/3_wed/linalg/Julia_Matrices_Optimization_JuMP_Stuttgart2023.html#optimization-models",
    "href": "material/3_wed/linalg/Julia_Matrices_Optimization_JuMP_Stuttgart2023.html#optimization-models",
    "title": "Matrix manipulation and optimization",
    "section": "Optimization models",
    "text": "Optimization models\n\nusing JuMP, HiGHS\nm = Model(HiGHS.Optimizer)\n@variable(m,  x₁ &gt;= 0)\n@variable(m,  x₂ &gt;= 0)\n@objective(m, Min, 50x₁ + 70x₂)\n@constraint(m, 200x₁ + 2000*x₂ &gt;= 9000)\n@constraint(m, 100x₁ +   30x₂ &gt;=  300)\n@constraint(m, 9x₁   +   11x₂ &gt;=   60)\nprintln(m)\n\nMin 50 x₁ + 70 x₂\nSubject to\n 200 x₁ + 2000 x₂ &gt;= 9000\n 100 x₁ + 30 x₂ &gt;= 300\n 9 x₁ + 11 x₂ &gt;= 60\n x₁ &gt;= 0\n x₂ &gt;= 0\n\n\n\n\nm\n\nA JuMP Model\nMinimization problem with:\nVariables: 2\nObjective function type: AffExpr\n`AffExpr`-in-`MathOptInterface.GreaterThan{Float64}`: 3 constraints\n`VariableRef`-in-`MathOptInterface.GreaterThan{Float64}`: 2 constraints\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: HiGHS\nNames registered in the model: x₁, x₂\n\n\n\noptimize!(m)\n\nRunning HiGHS 1.5.3 [date: 1970-01-01, git hash: 45a127b78]\nCopyright (c) 2023 HiGHS under MIT licence terms\nPresolving model\n3 rows, 2 cols, 6 nonzeros\n3 rows, 2 cols, 6 nonzeros\nPresolve : Reductions: rows 3(-0); columns 2(-0); elements 6(-0) - Not reduced\nProblem not reduced by presolve: solving the LP\nUsing EKK dual simplex solver - serial\n  Iteration        Objective     Infeasibilities num(sum)\n          0     0.0000000000e+00 Pr: 3(2205) 0s\n          2     3.8814432990e+02 Pr: 0(0) 0s\nModel   status      : Optimal\nSimplex   iterations: 2\nObjective value     :  3.8814432990e+02\nHiGHS run time      :          0.02\n\n\n\nvalue(x₁)\n\n1.7010309278350515\n\n\n\ntypeof(x₁ + 4x₂)\n\n\nAffExpr (alias for GenericAffExpr{Float64, GenericVariableRef{Float64}})\n\n\n\n\n4x₁ + 4x₁ + x₂\n\n$ 8 x₁ + x₂ $\n\n\n\nvalue.([x₁,x₂])\n\n2-element Vector{Float64}:\n 1.7010309278350515\n 4.329896907216495\n\n\n\n# Others solvers can be used such as the comercial Gurobi\n# using Gurobi\n# m = Model(Gurobi.Optimizer)\n\nThe same model as above but now the decision variables are expected to be integers\n\nm = Model(HiGHS.Optimizer)\n@variable(m, 100 &gt;= x₁ &gt;= 0, Int)\n@variable(m, 110 &gt;= x₂ &gt;= 0, Int)\n@objective(m, Min, 50x₁ + 70x₂)\n@constraint(m, 200x₁ + 2000x₂ &gt;= 9000)\n@constraint(m, 100x₁ +   30x₂ &gt;=  300)\n@constraint(m, 9x₁   +   11x₂ &gt;=   60)\nprintln(m)\n\nMin 50 x₁ + 70 x₂\nSubject to\n 200 x₁ + 2000 x₂ &gt;= 9000\n 100 x₁ + 30 x₂ &gt;= 300\n 9 x₁ + 11 x₂ &gt;= 60\n x₁ &gt;= 0\n x₂ &gt;= 0\n x₁ &lt;= 100\n x₂ &lt;= 110\n x₁ integer\n x₂ integer\n\n\n\n\noptimize!(m)\n\nRunning HiGHS 1.5.3 [date: 1970-01-01, git hash: 45a127b78]\nCopyright (c) 2023 HiGHS under MIT licence terms\nPresolving model\n3 rows, 2 cols, 6 nonzeros\n3 rows, 2 cols, 6 nonzeros\nObjective function is integral with scale 0.1\n\nSolving MIP model with:\n   3 rows\n   2 cols (0 binary, 2 integer, 0 implied int., 0 continuous)\n   6 nonzeros\n\n        Nodes      |    B&B Tree     |            Objective Bounds              |  Dynamic Constraints |       Work      \n     Proc. InQueue |  Leaves   Expl. | BestBound       BestSol              Gap |   Cuts   InLp Confl. | LpIters     Time\n\n         0       0         0   0.00%   0               inf                  inf        0      0      0         0     0.0s\n\nSolving report\n  Status            Optimal\n  Primal bound      450\n  Dual bound        450\n  Gap               0% (tolerance: 0.01%)\n  Solution status   feasible\n                    450 (objective)\n                    0 (bound viol.)\n                    0 (int. viol.)\n                    0 (row viol.)\n  Timing            0.00 (total)\n                    0.00 (presolve)\n                    0.00 (postsolve)\n  Nodes             1\n  LP iterations     2 (total)\n                    0 (strong br.)\n                    0 (separation)\n                    0 (heuristics)\n\n\n\nvalue.([x₁,x₂])\n\n2-element Vector{Float64}:\n 2.0\n 5.0\n\n\n\n#1.9999999999999\nround.(Int, value.([x₁,x₂]))\n\n2-element Vector{Int64}:\n 2\n 5\n\n\nWhat are those @ macros we are seeing around?\n\ncode = Meta.parse(\"x=5\")\n\n:(x = 5)\n\n\n\ndump(code)\n\nExpr\n  head: Symbol =\n  args: Array{Any}((2,))\n    1: Symbol x\n    2: Int64 5\n\n\n\n:somysymbolname\n\n:somysymbolname\n\n\n\ndump(code)\n\nExpr\n  head: Symbol =\n  args: Array{Any}((2,))\n    1: Symbol x\n    2: Int64 5\n\n\n\neval(code)\n\n5\n\n\n\nx\n\n5\n\n\n\nmacro sayhello(name)\n    println(\"Code is being generated\")\n    return :( println(\"Hello, \", $name) )\nend\n\n@sayhello (macro with 1 method)\n\n\n\n@sayhello(\"John\")\n\nCode is being generated\nHello, John\n\n\n\n@time @sayhello(\"John\")\n\nCode is being generated\nHello, John\n  0.000393 seconds (26 allocations: 1024 bytes)\n\n\n\n@macroexpand @sayhello(\"John\")\n\nCode is being generated\n\n\n:(Main.println(\"Hello, \", \"John\"))\n\n\n\nprintln(@macroexpand @sayhello(\"John\"))\n\nCode is being generated\nMain.println(\"Hello, \", \"John\")\n\n\n\n@sayhello(\"John\")\n\nCode is being generated\nHello, John\n\n\n\nprintln(@macroexpand @variable(m, x₁ &gt;= 0));\n\nbegin\n    #= In[89]:1 =#\n    JuMP._valid_model(m, :m)\n    begin\n        #= c:\\JuliaPkg\\Julia-1.9.3\\packages\\JuMP\\OUdu2\\src\\macros.jl:128 =#\n        JuMP._error_if_cannot_register(m, :x₁)\n        #= c:\\JuliaPkg\\Julia-1.9.3\\packages\\JuMP\\OUdu2\\src\\macros.jl:136 =#\n        var\"#117###340\" = begin\n                #= c:\\JuliaPkg\\Julia-1.9.3\\packages\\JuMP\\OUdu2\\src\\macros.jl:1210 =#\n                let m = m\n                    #= c:\\JuliaPkg\\Julia-1.9.3\\packages\\JuMP\\OUdu2\\src\\macros.jl:1211 =#\n                    JuMP.add_variable(m, JuMP.model_convert(m, JuMP.build_variable(JuMP.var\"#_error#115\"{LineNumberNode}(:(#= In[89]:1 =#), Core.Box((:m, :(x₁ &gt;= 0)))), JuMP.VariableInfo(true, 0, false, NaN, false, NaN, false, NaN, false, false))), if JuMP.set_string_names_on_creation(m)\n                            \"x₁\"\n                        else\n                            \"\"\n                        end)\n                end\n            end\n        #= c:\\JuliaPkg\\Julia-1.9.3\\packages\\JuMP\\OUdu2\\src\\macros.jl:137 =#\n        m[:x₁] = var\"#117###340\"\n        #= c:\\JuliaPkg\\Julia-1.9.3\\packages\\JuMP\\OUdu2\\src\\macros.jl:143 =#\n        x₁ = var\"#117###340\"\n    end\nend\n\n\n\nusing Calculus\n\n\nMeta.parse(\"(sin(x) + x*x+5x)\")\n\n:(sin(x) + x * x + 5x)\n\n\n\nusing AbstractTrees\nAbstractTrees.print_tree(:(sin(x) + x*x+5x))\n\n:(sin(x) + x * x + 5x)\n├─ :+\n├─ :(sin(x))\n│  ├─ :sin\n│  └─ :x\n├─ :(x * x)\n│  ├─ :*\n│  ├─ :x\n│  └─ :x\n└─ :(5x)\n   ├─ :*\n   ├─ 5\n   └─ :x\n\n\n\ndifferentiate(:(sin(x) + x*x+5x))\n\n:(1 * cos(x) + (1x + x * 1) + (0 * x + 5 * 1))\n\n\n\nSubway optimization\n\nusing JuMP, HiGHS\nusing DelimitedFiles\n\n\nS = 18   # number of warehouses\nD = 100  # number of restaurants\nsupply = fill(100,S)\ndemand = fill(15,D);\n\n\ndat=\"\"\"21328    7901    16774   24413   14131   21551   15742   21091   25167   3266    19312   14878   22914   18392   14514   21072   11535   12965   12952   12952   15839   27836   16816   13527   13769   4924    23891   26532   10245   15446   16834   11421   27231   20285   25810   12477   16499   26958   23770   32327   23572   26475   23894   2054    22156   28491   2392    21051   18793   14598   9413    8004    14286   8717    24919   27581   21829   26135   33450   4905    18558   23046   9212    20923   6426    20020   24644   10862   12351   16446   7751    19819   17406   16768   9319    17584   8191    18776   22432   20389   25377   3129    22425   6899    16830   12305   3393    24579   16727   21086   30660   26999   29664   26436   26138   28183   20874   30143   30419   29718\n5195    15055   4216    9295    6050    4779    3641    15102   8395    16829   5224    3595    14177   1684    2753    4300    5469    4233    3962    3962    3039    13176   12595   4764    5428    12767   7119    11115   6960    1597    1173    5848    26351   10941   19927   7174    13542   11015   6998    18198   18270   9703    7376    15867   21981   12387   19029   6936    9170    15206   7748    8933    11906   12823   24031   21698   8083    11432   18205   18548   17558   25919   10027   7178    10521   19897   29294   15136   13659   10764   18656   7135    9574    19550   13973   11620   17524   10944   9910    9940    26373   13762   11058   16154   22702   19728   14022   13212   4280    7563    22298   13152   15728   12308   17068   19554   12880   16313   18674   20915\n24025   13295   22003   22254   20379   26418   22859   10495   28761   12735   29656   23437   36220   24616   24042   28477   24395   24758   25121   25121   26548   22646   30633   22842   26491   16326   27452   24373   23067   25325   26551   21542   15677   33471   14651   19634   30316   26735   29375   24969   12413   28023   29753   17066   10602   28267   17790   19925   31979   11657   20017   21593   15001   22657   12101   16422   32830   33810   28260   19918   7961    10227   17414   32204   20070   8789    9898    25254   26654   15742   22269   18946   30636   6105    14423   31182   22709   32007   34792   15723   12559   17643   34786   12754   2900    26823   15171   36939   28008   19237   19501   18955   20687   20740   15099   17024   13131   22051   19380   18559\n22508   22014   17954   25593   16490   22230   16922   24989   25524   22994   19299   15807   6155    19098   15443   21468   12730   13765   13698   13698   16518   29016   5152    14712   12407   19272   24570   27712   12077   16125   17442   13516   36239   9317    29815   14836   4483    28138   23911   33506   28157   27086   24005   18712   31869   29670   18413   22231   11140   22962   14736   13031   19351   12074   33919   31585   16632   23191   34630   15865   26772   35807   17273   14708   14646   29784   39182   9608    8373    18948   12547   20876   8411    28622   21042   6315    12007   7728    12270   22466   36261   17719   9635    23113   31385   8204    20527   7661    15899   22181   34494   28057   30721   27616   29264   31749   23716   31201   32314   33111\n12913   5006    10217   14089   7574    15206   10375   9595    18453   9762    18403   10736   23395   12829   11221   17256   11328   11937   12300   12300   13779   17052   17405   10020   13666   7932    17144   16209   9839    13158   14563   8314    17138   20646   14521   6406    17088   16684   19067   21542   12283   17714   19445   11789   12768   18217   15071   10777   19154   2717    6596    8172    2025    9318    14805   16292   20943   23502   22666   14640   7256    16706   3917    20037   6821    10026   20081   11915   13233   4235    14855   9053    17812   8378    3697    18089   14029   19182   22625   8169    17147   9683    22619   6321    11174   17884   9520    24772   15841   10116   19371   16003   18668   15652   14502   16894   8883    19148   18556   18349\n6281    16514   5753    10410   7509    5795    5099    16782   9308    18288   3312    4999    12625   2798    4158    5230    4648    3949    3341    3341    2010    14262   11741   5686    4491    14172   8135    12202   6139    1903    833 7252    28032   9390    21608   8633    12688   12061   7800    19313   19950   10719   7894    15046   23662   13403   18173   8050    7618    16665   9152    8112    13364   11967   25712   23378   6171    10135   19220   17692   19239   27600   11486   5266    9700    21577   30975   14265   12788   12222   17785   8823    8548    21230   15432   10622   16653   9685    7998    11620   28054   12940   9507    17612   24382   18873   15427   11660   3003    8736    23737   14267   16842   13422   18513   21173   14561   17427   19876   22534\n4656    19128   9008    4124    11894   5115    10216   15084   4473    23560   7924    11296   21642   8036    12133   5794    14532   13370   13273   13273   12492   5169    21810   12436   14643   21431   3145    2102    16062   11050   9979    14704   26333   18420   19909   13545   22757   1361    5712    10225   18252   3044    6090    24906   21963   2893    28161   5968    16648   16074   16577   18035   13324   21984   24014   21680   11094   10146   8657    27685   17540   25902   17061   12978   19586   19879   29276   24306   22830   12163   27827   7636    18788   19532   17819   20835   26694   20159   15710   9922    26355   22801   18447   20443   22684   28942   22852   20547   13660   6657    21239   9808    12248   7988    16401   19061   12862   10557   16997   20422\n16446   6905    14412   14675   11772   18839   14588   7393    21182   11243   22077   14949   27612   17024   15434   20898   15787   16151   16513   16513   17993   16064   22025   14234   17883   9936    19873   16795   14459   17371   18776   12934   14600   24863   12201   11026   21708   19156   21796   20555   9963    20444   22174   13463   10230   20688   16645   12347   23371   2861    11340   12916   6325    14030   12267   13972   25156   26231   21678   16314   4936    12206   8733    24250   11443   6518    15339   16627   17978   7135    16968   11368   22029   3256    5796    22574   17408   23399   26839   8145    14538   11797   26832   8220    6019    21522   11470   28986   20054   11658   17050   15108   17399   14664   12468   14574   6924    18252   16749   16109\n12070   11940   10048   10299   8061    14463   10878   2839    16806   16286   17701   11239   23901   12661   11724   16522   12122   12440   12803   12803   14282   11080   18749   10523   14172   14959   15497   12419   11183   13370   14597   9658    14089   21152   7665    7700    18432   14780   17420   15539   6007    16068   17798   18505   9719    16312   21688   7971    19661   5094    10528   12139   5548    16015   11769   9435    20875   21855   16694   21357   5295    13657   10644   20249   13538   7634    17032   18604   17127   3353    21847   6992    18318   7287    10724   18909   20725   19688   22837   3769    14111   16676   22831   13254   10342   24395   16513   24984   16053   7282    12491   9848    12040   9648    7426    9830    1565    12993   11480   11273\n10329   23462   13628   6311    16247   10788   14836   14910   7331    27913   13481   15916   27214   13710   16784   11351   19112   17990   17893   17893   18028   2647    26430   16997   19262   25789   8815    4323    20625   16722   15636   19217   26160   23992   19703   17898   27377   4669    9312    5419    18078   5880    9548    29264   21790   5165    32546   9541    22221   17837   20935   22545   17686   26421   23840   21156   16651   13619   3334    32102   17366   25728   21419   18550   23944   19705   29103   28886   27409   15635   32264   11041   23408   19358   22153   25455   31131   24779   21282   11857   26182   27159   24019   24777   22510   33562   27210   26120   19317   9710    19225   7343    9606    5523    14848   17430   12203   7915    14982   18439\n9046    7229    6350    10918   3587    11339   6397    7802    14626   11985   14424   6758    19420   8962    7243    13389   7493    7959    8322    8322    9801    14306   13857   6042    9691    10151   13317   13037   6291    9180    10585   4767    19051   16671   12628   2808    13541   13463   15240   18797   10970   13888   15618   13923   14681   14996   17205   7556    15180   6200    5636    7247    2636    11123   16732   14398   16964   19675   19921   16774   9996    18620   5807    16059   8646    12597   21994   13712   12236   1761    16966   5969    13837   11847   5920    14279   15834   15208   18647   5814    19073   11817   18641   8544    14609   19504   11740   20794   11863   7254    17377   13258   15923   12907   12147   14632   6528    16403   16201   15994\n4657    14007   4438    3771    6792    7050    5646    9018    9393    18458   10288   6726    19802   5879    7594    9109    9647    8800    8703    8703    8838    7010    17078   7532    10073   16334   8084    5890    11170   7533    8037    9762    20267   16877   13843   8443    18024   7499    10007   11501   12186   8655    10385   19810   15897   9032    23092   475 15105   10063   11480   13090   8130    16966   17948   15614   13462   14442   12625   22647   11474   19836   11964   13509   14489   13813   23210   19421   17945   6236    22809   1641    14219   13466   12699   15994   21677   15589   16241   3856    20289   17704   16993   15322   16618   24210   17755   19147   10215   239 15528   6455    8962    5611    10304   12964   6796    9616    11742   14325\n16168   26420   17376   13468   19205   18438   18584   14330   20479   30871   21676   19664   32739   18651   20532   20497   22329   21738   21641   21641   21776   11708   29491   20520   23011   28747   19444   14693   23583   20470   20809   22175   13538   29815   9415    20856   30437   17221   21396   8872    12092   19047   21773   32223   13988   18752   35504   13302   28043   20840   23893   25503   20740   29379   14349   9468    24851   25830   16745   35060   16582   17173   24377   25029   26902   15501   19174   31968   30491   18559   35222   13999   27156   18554   25111   28487   34089   28527   27761   14815   16400   30117   29931   27735   21545   36623   30168   32085   23153   13264   6197    7925    4260    9841    9124    7119    14589   5954    5049    5752\n3485    11419   1299    6632    4185    5779    2507    10988   9414    15851   9008    3586    16662   3402    4455    7829    6823    5661    5564    5564    5416    10055   14101   4742    6933    13733   8106    8751    8353    4111    5337    6995    22238   13455   15814   5836    15048   8923    10029   14546   14156   8763    10407   17212   17868   10455   20452   3270    11683   11254   8883    10326   7960    14275   19918   17585   11895   14463   15669   19976   13445   21806   9362    10990   11892   15784   25181   16597   15121   6811    20117   2917    11079   15437   10110   13126   18985   12450   13578   5827    22260   15107   13572   12733   18588   21233   15158   15725   6794    3345    18185   9500    12007   8655    12955   15440   8767    12661   14455   16802\n20790   9466    18768   19019   16388   23183   19204   8048    25526   11781   26421   19566   32228   21381   20050   25242   20403   20767   21130   21130   22609   19411   26641   18850   22499   12497   24217   21138   19075   21988   23316   17550   14121   29479   12701   15643   26324   23500   26140   22523   10462   24788   26518   14435   9046    25032   17184   16690   27988   7647    16008   17583   10992   18647   11810   14471   29595   30575   25025   17287   5515    9936    13405   28867   16060   6910    13069   21244   22645   11751   19529   15711   26645   3659    10414   27190   19969   28015   31455   12488   12268   14358   31448   9386    3721    24083   12443   33602   24671   16002   17550   16509   18607   17505   13028   15073   9896    19605   17309   16608\n5209    18274   7514    9447    9270    4512    6860    18543   7991    20049   1770    6760    12619   4480    5919    3913    6409    5710    5102    5102    3771    13094   13449   7447    6252    15933   6849    11034   7900    3664    2533    9013    29793   9396    23369   10394   14396   10775   6403    19042   21711   9433    6497    16807   25423   12117   19933   9297    7625    18426   10913   9872    15125   13727   27473   25139   4829    8593    17935   19453   20999   29361   13247   3955    11460   23338   32736   15967   14491   13983   19488   10504   10133   22991   17193   12207   18355   11270   6687    13381   29815   14701   9423    19373   26143   20582   17188   11524   4764    9986    25177   14146   17374   13177   20016   22675   16322   17157   20935   24036\n11294   12965   9272    9523    8056    13686   10128   2354    16029   17305   16925   10705   23655   11884   11574   15745   12558   12435   12683   12683   13816   9914    19729   10518   13926   15996   14721   11642   12295   12593   13820   10771   13604   20906   7180    8812    19545   14003   16644   14373   5522    15291   17022   19525   9234    15536   22708   7194    19415   6113    11640   13251   6661    17127   11284   8951    20099   21078   15528   22377   4811    13172   11756   19472   14650   7150    16547   19716   18239   4465    22960   6215    18072   6803    11837   18726   21838   19442   22060   2992    13626   17788   22054   14280   9954    25508   17533   24208   15276   6505    11490   8682    10874   8483    6260    8746    400 11827   10314   10107\n5303    9560    2607    8328    2468    7596    3463    9535    11232   14134   10826   4040    16990   5219    4909    9646    5902    6115    6018    6018    7151    11553   13064   4295    7261    12016   9923    10447   6988    5928    7155    5580    20785   14241   14361   4119    14011   10873   11846   16044   12703   10580   12224   15533   16415   12406   18815   4966    12750   9395    7204    8813    6101    12689   18465   16131   13713   16281   17167   18371   11992   20353   7646    12807   10213   14330   23728   15278   13802   4953    18532   3288    11407   13983   8252    12061   17400   12778   15396   4373    20807   13428   15389   10875   17135   20196   13479   17543   8611    4601    16731   10469   13133   10153   11502   13987   7314    13613   14444   15348\n\"\"\";\n\n\nc = readdlm(IOBuffer(dat), Int)\n\n18×100 Matrix{Int64}:\n 21328   7901  16774  24413  14131  …  28183  20874  30143  30419  29718\n  5195  15055   4216   9295   6050     19554  12880  16313  18674  20915\n 24025  13295  22003  22254  20379     17024  13131  22051  19380  18559\n 22508  22014  17954  25593  16490     31749  23716  31201  32314  33111\n 12913   5006  10217  14089   7574     16894   8883  19148  18556  18349\n  6281  16514   5753  10410   7509  …  21173  14561  17427  19876  22534\n  4656  19128   9008   4124  11894     19061  12862  10557  16997  20422\n 16446   6905  14412  14675  11772     14574   6924  18252  16749  16109\n 12070  11940  10048  10299   8061      9830   1565  12993  11480  11273\n 10329  23462  13628   6311  16247     17430  12203   7915  14982  18439\n  9046   7229   6350  10918   3587  …  14632   6528  16403  16201  15994\n  4657  14007   4438   3771   6792     12964   6796   9616  11742  14325\n 16168  26420  17376  13468  19205      7119  14589   5954   5049   5752\n  3485  11419   1299   6632   4185     15440   8767  12661  14455  16802\n 20790   9466  18768  19019  16388     15073   9896  19605  17309  16608\n  5209  18274   7514   9447   9270  …  22675  16322  17157  20935  24036\n 11294  12965   9272   9523   8056      8746    400  11827  10314  10107\n  5303   9560   2607   8328   2468     13987   7314  13613  14444  15348\n\n\n\nm = Model(HiGHS.Optimizer);\n@variable(m, 400 &gt;= x[i=1:S, j=1:D] &gt;= 0, Int)\n\n18×100 Matrix{VariableRef}:\n x[1,1]   x[1,2]   x[1,3]   x[1,4]   …  x[1,98]   x[1,99]   x[1,100]\n x[2,1]   x[2,2]   x[2,3]   x[2,4]      x[2,98]   x[2,99]   x[2,100]\n x[3,1]   x[3,2]   x[3,3]   x[3,4]      x[3,98]   x[3,99]   x[3,100]\n x[4,1]   x[4,2]   x[4,3]   x[4,4]      x[4,98]   x[4,99]   x[4,100]\n x[5,1]   x[5,2]   x[5,3]   x[5,4]      x[5,98]   x[5,99]   x[5,100]\n x[6,1]   x[6,2]   x[6,3]   x[6,4]   …  x[6,98]   x[6,99]   x[6,100]\n x[7,1]   x[7,2]   x[7,3]   x[7,4]      x[7,98]   x[7,99]   x[7,100]\n x[8,1]   x[8,2]   x[8,3]   x[8,4]      x[8,98]   x[8,99]   x[8,100]\n x[9,1]   x[9,2]   x[9,3]   x[9,4]      x[9,98]   x[9,99]   x[9,100]\n x[10,1]  x[10,2]  x[10,3]  x[10,4]     x[10,98]  x[10,99]  x[10,100]\n x[11,1]  x[11,2]  x[11,3]  x[11,4]  …  x[11,98]  x[11,99]  x[11,100]\n x[12,1]  x[12,2]  x[12,3]  x[12,4]     x[12,98]  x[12,99]  x[12,100]\n x[13,1]  x[13,2]  x[13,3]  x[13,4]     x[13,98]  x[13,99]  x[13,100]\n x[14,1]  x[14,2]  x[14,3]  x[14,4]     x[14,98]  x[14,99]  x[14,100]\n x[15,1]  x[15,2]  x[15,3]  x[15,4]     x[15,98]  x[15,99]  x[15,100]\n x[16,1]  x[16,2]  x[16,3]  x[16,4]  …  x[16,98]  x[16,99]  x[16,100]\n x[17,1]  x[17,2]  x[17,3]  x[17,4]     x[17,98]  x[17,99]  x[17,100]\n x[18,1]  x[18,2]  x[18,3]  x[18,4]     x[18,98]  x[18,99]  x[18,100]\n\n\n\n∑ = sum\n\nsum (generic function with 17 methods)\n\n\n\nfor j=1:D\n   @constraint(m, ∑(x[:, j]) &gt;= demand[j]   )\nend\nfor i=1:S\n   @constraint(m, ∑(x[i, :]) &lt;= supply[i]   )\nend\n#@objective(m, Min, ∑( x[i, j]*c[i, j] for i=1:S, j=1:D))\n@objective(m, Min, ∑( x .* c ));\n\n\noptimize!(m)\n\nRunning HiGHS 1.5.3 [date: 1970-01-01, git hash: 45a127b78]\nCopyright (c) 2023 HiGHS under MIT licence terms\nPresolving model\n118 rows, 1800 cols, 3600 nonzeros\n118 rows, 1800 cols, 3600 nonzeros\nObjective function is integral with scale 1\n\nSolving MIP model with:\n   118 rows\n   1800 cols (0 binary, 1800 integer, 0 implied int., 0 continuous)\n   3600 nonzeros\n\n        Nodes      |    B&B Tree     |            Objective Bounds              |  Dynamic Constraints |       Work      \n     Proc. InQueue |  Leaves   Expl. | BestBound       BestSol              Gap |   Cuts   InLp Confl. | LpIters     Time\n\n         0       0         0   0.00%   0               inf                  inf        0      0      0         0     0.0s\n T       0       0         0   0.00%   0               7994805          100.00%        0      0      0       144     0.0s\n\nSolving report\n  Status            Optimal\n  Primal bound      7994805\n  Dual bound        7994805\n  Gap               0% (tolerance: 0.01%)\n  Solution status   feasible\n                    7994805 (objective)\n                    0 (bound viol.)\n                    0 (int. viol.)\n                    0 (row viol.)\n  Timing            0.03 (total)\n                    0.02 (presolve)\n                    0.00 (postsolve)\n  Nodes             1\n  LP iterations     144 (total)\n                    0 (strong br.)\n                    0 (separation)\n                    0 (heuristics)\n\n\n\n@show termination_status(m)\n\ntermination_status(m) = MathOptInterface.OPTIMAL\n\n\nOPTIMAL::TerminationStatusCode = 1\n\n\n\ntypeof(termination_status(m))\n\nEnum MathOptInterface.TerminationStatusCode:\nOPTIMIZE_NOT_CALLED = 0\nOPTIMAL = 1\nINFEASIBLE = 2\nDUAL_INFEASIBLE = 3\nLOCALLY_SOLVED = 4\nLOCALLY_INFEASIBLE = 5\nINFEASIBLE_OR_UNBOUNDED = 6\nALMOST_OPTIMAL = 7\nALMOST_INFEASIBLE = 8\nALMOST_DUAL_INFEASIBLE = 9\nALMOST_LOCALLY_SOLVED = 10\nITERATION_LIMIT = 11\nTIME_LIMIT = 12\nNODE_LIMIT = 13\nSOLUTION_LIMIT = 14\nMEMORY_LIMIT = 15\nOBJECTIVE_LIMIT = 16\nNORM_LIMIT = 17\nOTHER_LIMIT = 18\nSLOW_PROGRESS = 19\nNUMERICAL_ERROR = 20\nINVALID_MODEL = 21\nINVALID_OPTION = 22\nINTERRUPTED = 23\nOTHER_ERROR = 24\n\n\n\n\nvalue.(x)\n\n18×100 Matrix{Float64}:\n  0.0   0.0   0.0   0.0   0.0   0.0  …   0.0   0.0   0.0   0.0   0.0   0.0\n  0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0\n  0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0\n  0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0\n  0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0\n  0.0   0.0   0.0   0.0   0.0   0.0  …   0.0   0.0   0.0   0.0   0.0   0.0\n  0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0\n  0.0  15.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0\n  0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0\n  0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0\n  0.0   0.0   0.0   0.0   0.0   0.0  …   0.0   0.0   0.0   0.0   0.0   0.0\n  0.0   0.0   0.0  15.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0\n  0.0   0.0   0.0   0.0   0.0   0.0      0.0  15.0   0.0  15.0  15.0  15.0\n 15.0   0.0  15.0   0.0   0.0  15.0      0.0   0.0   0.0   0.0   0.0   0.0\n  0.0   0.0   0.0   0.0   0.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0\n  0.0   0.0   0.0   0.0   0.0   0.0  …   0.0   0.0   0.0   0.0   0.0   0.0\n  0.0   0.0   0.0   0.0   0.0   0.0     15.0   0.0  15.0   0.0   0.0   0.0\n  0.0   0.0   0.0   0.0  15.0   0.0      0.0   0.0   0.0   0.0   0.0   0.0\n\n\n\nusing SparseArrays\nsparse(value.(x))\n\n18×100 SparseMatrixCSC{Float64, Int64} with 109 stored entries:\n⎡⠀⠀⠀⠈⠀⠖⠂⠒⠀⠄⡀⠐⠂⠀⠠⠀⠀⠁⠈⠀⠀⡀⠀⠈⢀⢀⢠⠄⠁⢀⢄⠀⠈⠠⠬⠀⠀⠀⠀⠀⎤\n⎢⠐⠀⠀⠒⠀⠀⠀⠈⢁⠈⠒⡀⠀⠡⠀⢂⠐⠂⡂⠑⠀⠀⠄⡀⠂⠀⠂⠀⠈⠂⠈⠀⠀⠂⠀⠁⠀⡀⠀⠀⎥\n⎢⠄⠅⠤⠀⡠⠀⠀⠄⠀⠀⠀⠁⠈⡂⠁⠀⠀⢀⠀⠁⠉⠀⢀⠀⢀⡀⠀⠉⠈⠀⠀⡀⣀⠀⠀⠈⠚⠀⠒⠒⎥\n⎣⠀⠐⠀⠁⠀⠀⠐⠀⠀⠂⠀⠂⠀⠉⠀⠀⠁⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠈⠈⠀⎦\n\n\n\nround.(Int, value.(x)) ≈ value.(x)\n\ntrue\n\n\n\nobjective_value(m)\n\n7.994805e6\n\n\n\n\nTravelling salesman problem (TSP)\n\ndist_mx = [0    17015   15303   20376   12648   16060   25600   14217   19545   30228   14726   21078   33787   18041   14937   17542   20542   16535   21328   7901    16774   24413   14131   21551   15742   21091   25167   3266    19312   14878   22914   18392   14514   21072   11535   12965   12952   12952   15839   27836;\n16837   0   25356   17812   13534   1912    9654    17639   13597   15441   9377    7410    19851   4218    22311   3454    12747   6168    5195    15055   4216    9295    6050    4779    3641    15102   8395    16829   5224    3595    14177   1684    2753    4300    5469    4233    3962    3962    3039    13176;\n15660   25640   0   34363   13497   27290   25638   8902    13080   25038   17262   19451   23966   21412   6475    28799   12799   19902   24025   13295   22003   22254   20379   26418   22859   10495   28761   12735   29656   23437   36220   24616   24042   28477   24395   24758   25121   25121   26548   22646;\n20378   17694   34039   0   20952   16668   26779   25408   22341   31408   17228   22258   34845   19221   30215   17941   23384   18694   22508   22014   17954   25593   16490   22230   16922   24989   25524   22994   19299   15807   6155    19098   15443   21468   12730   13765   13698   13698   16518   29016;\n12758   13651   13828   21135   0   15151   15588   5176    7509    19444   4278    10350   22791   9625    10004   16632   8551    7771    12913   5006    10217   14089   7574    15206   10375   9595    18453   9762    18403   10736   23395   12829   11221   17256   11328   11937   12300   12300   13779   17052;\n16015   1958    27036   16957   14992   0   10700   19097   15278   16499   10835   8524    20966   5921    23905   1542    14428   7849    6281    16514   5753    10410   7509    5795    5099    16782   9308    18288   3312    4999    12625   2798    4158    5230    4648    3949    3341    3341    2010    14262;\n25876   9612    25338   27027   15004   10657   0   17917   13580   5809    12445   6443    16347   7810    22293   9558    12729   9769    4656    19128   9008    4124    11894   5115    10216   15084   4473    23560   7924    11296   21642   8036    12133   5794    14532   13370   13273   13273   12492   5169;\n14417   17865   8673    25755   4815    19364   18059   0   5596    18456   8654    11873   21416   13820   4849    20846   6592    11966   16446   6905    14412   14675   11772   18839   14588   7393    21182   11243   22077   14949   27612   17024   15434   20898   15787   16151   16513   16513   17993   16064;\n19460   13685   12996   22480   7089    15336   13683   5712    0   13472   5106    7497    16147   9457    9192    16844   1234    7947    12070   11940   10048   10299   8061    14463   10878   2839    16806   16286   17701   11239   23901   12661   11724   16522   12122   12440   12803   12803   14282   11080;\n30234   15269   25164   31647   19366   16315   5673    18651   13668   0   16883   9759    13705   12809   22119   15216   12556   14103   10329   23462   13628   6311    16247   10788   14836   14910   7331    27913   13481   15916   27214   13710   16784   11351   19112   17990   17893   17893   18028   2647;\n14892   9673    17263   17588   4258    11172   12366   8632    5154    16699   0   7384    20046   5758    13440   12654   6196    3904    9046    7229    6350    10918   3587    11339   6397    7802    14626   11985   14424   6758    19420   8962    7243    13389   7493    7959    8322    8322    9801    14306;\n20779   7534    19272   22294   9811    8776    6402    11851   7513    9403    7336    0   13086   3620    16227   9926    6663    4648    4657    14007   4438    3771    6792    7050    5646    9018    9393    18458   10288   6726    19802   5879    7594    9109    9647    8800    8703    8703    8838    7010;\n33192   20306   24017   34707   22295   21548   16347   21600   16054   13630   19961   13477   0   16558   22049   21445   14942   17061   16168   26420   17376   13468   19205   18438   18584   14330   20479   30871   21676   19664   32739   18651   20532   20497   22329   21738   21641   21641   21776   11708;\n18182   4426    21242   19317   9588    6076    7562    13686   9484    12447   5453    3297    16130   0   18198   7585    8634    2059    3485    11419   1299    6632    4185    5779    2507    10988   9414    15851   9008    3586    16662   3402    4455    7829    6823    5661    5564    5564    5416    10055;\n14987   22405   6375    30372   9487    23980   22403   4893    9113    21803   13270   16216   21976   18177   0   25462   9564    16582   20790   9466    18768   19019   16388   23183   19204   8048    25526   11781   26421   19566   32228   21381   20050   25242   20403   20767   21130   21130   22609   19411;\n17776   3658    28797   18666   16753   1761    9415    20858   17039   15214   12596   9773    21497   7682    25666   0   16189   9610    5209    18274   7514    9447    9270    4512    6860    18543   7991    20049   1770    6760    12619   4480    5919    3913    6409    5710    5102    5102    3771    13094;\n20480   12908   12608   23592   8201    14559   12906   6659    1112    12306   6218    6720    14981   8680    9564    16068   0   7171    11294   12965   9272    9523    8056    13686   10128   2354    16029   17305   16925   10705   23655   11884   11574   15745   12558   12435   12683   12683   13816   9914;\n16503   6243    19789   18281   7729    7894    9574    11828   8031    13945   3594    4731    17257   2015    16635   9403    7181    0   5303    9560    2607    8328    2468    7596    3463    9535    11232   14134   10826   4040    16990   5219    4909    9646    5902    6115    6018    6018    7151    11553;\n21599   5356    23780   22734   12944   6512    4559    16359   12022   10347   8870    4592    16288   3518    20735   5531    11172   5476    0   14836   4716    4238    7602    2790    5924    13526   6105    19268   6020    7003    17779   3751    7819    4840    10240   9078    8981    8981    8209    8081;\n7857    15112   13704   22169   5184    16611   19177   6973    12160   23548   7225    14334   26860   11619   9791    18093   13156   9764    14906   0   12210   17931   9181    17075   11836   14080   20835   4820    19863   12197   24516   14669   12682   19125   12572   13398   13761   13761   15240   21156;\n16895   4392    21878   18019   10219   5892    8860    14318   10120   13488   6084    4338    17171   1301    18833   7374    9270    2691    4588    12050   0   7673    4076    5894    1208    11624   9813    14906   9124    2288    15363   3488    3156    7944    5524    4362    4265    4265    5193    11096;\n24348   9392    22086   25619   13415   10603   4086    14665   10327   6404    10856   3801    13508   6782    19041   9622    9477    8252    4345    17612   7601    0   10396   5506    8809    11832   7814    22062   8930    9888    21869   7737    10757   7533    13085   11963   11866   11866   12000   4056;\n14132   6093    20346   16695   7583    7592    12111   11714   8191    16482   3384    7267    19793   4552    16522   9074    8119    2537    7839    9201    3822    10865   0   8055    2817    10474   11975   11763   10844   3178    15840   5650    3662    10106   4502    4379    4742    4742    6221    14090;\n21436   4723    26289   22411   15307   5769    5072    18868   14531   10881   11172   7101    18750   5829    23244   4673    13681   7779    2740    17138   5827    5517    8192    0   6327    16035   3919    19343   3552    7406    16757   3376    7353    2373    10069   8833    8561    8561    7639    8817;\n15687   3789    22924   16811   10402   5288    9892    14507   10983   14520   6245    5370    18203   2333    19315   6770    10316   3737    5620    11923   1066    8705    2918    6156    0   12670   10075   13698   8540    1080    14155   3750    1948    7846    4316    3154    3057    3057    3985    12128;\n21045   15226   10254   25146   9186    16877   15224   7459    2666    14624   7772    9038    14277   10998   7984    18386   2386    9488    13611   13852   11589   11840   10374   16004   12446   0   18347   17870   19242   13023   25973   14202   13891   18063   14789   14753   15000   15000   16134   12232;\n25093   8380    28419   25988   17792   9365    4449    20998   16661   7422    14499   9231    20447   9297    25375   8231    15811   11255   6033    20614   9633    7647    11998   3972    10133   18165   0   23149   6373    11212   20107   7182    11009   4244    13725   12489   12218   12218   11295   9268;\n3269    17087   12447   23091   9425    18535   23676   10994   16323   28047   11778   18833   31359   16118   11733   20016   17319   14102   19392   4764    14895   22430   11699   19128   13889   17868   23048   0   21787   14225   25619   16722   14491   21144   14247   15207   15570   15570   17049   25655;\n19370   5218    29555   19904   18347   3354    7939    22134   17796   13628   14190   10366   22016   8979    26510   2032    16946   10929   5890    19868   8977    8967    10863   3548    8454    19301   6286    21642   0   8354    13849   6031    7512    2230    8002    7303    6695    6695    5364    12267;\n15123   3742    23129   16247   10398   5189    10973   14503   10979   15601   6241    6451    19284   3414    19310   6671    10520   3928    6701    11919   2147    9786    2914    7237    1115    12875   11156   13694   8441    0   13591   4046    1289    7798    3752    2590    2493    2493    3730    13209;\n23066   12913   36235   6148    23328   11248   21677   27604   24080   27384   19342   18864   31697   15567   32411   12509   23813   17221   17470   24390   15398   21598   16015   16775   14408   26168   20042   25682   13816   13293   0   13987   12929   15985   12394   11789   11185   11185   11655   25357;\n18306   1655    24425   19281   12816   2898    8020    16914   12666   13807   8681    5726    18168   3338    21380   4425    11816   5288    3560    14647   3336    7611    5684    3220    3721    14171   7140    16834   6173    4291    15523   0   4102    5029    6939    5703    5431    5431    4509    11541;\n14792   2858    23883   15916   11147   4305    11899   15252   11728   16527   6990    7377    20210   4340    20060   5787    11446   4854    7592    12668   3073    10712   3664    7283    2041    13801   11010   14409   7557    926 13261   4086    0   6915    3422    2259    2162    2162    2847    14135;\n20940   4227    28327   21915   17230   5179    5981    20906   16569   11732   13095   9139    20788   7752    25283   4045    15719   9701    4662    19061   7750    7739    10115   2321    7744    18073   4390    20933   2200    7698    15933   4990    6857    0   9572    8336    8065    8065    7142    11040;\n11410   5695    24148   12807   11182   4838    14370   15516   12038   18999   7130    9803    22682   6812    20324   6320    12537   6289    10099   12463   5545    13184   4544    10230   4538    14686   13846   14019   8090    3645    12463   7098    3281    9751    0   1743    1730    1730    4518    16606;\n13077   4452    24715   14052   11979   4191    13470   16084   12560   18098   7822    8948    21781   5911    20892   5673    12489   6127    9198    13500   4644    12283   4496    8987    3612    14843   12603   15241   7443    2497    11952   5855    2133    8508    1710    0   880 880 3275    15706;\n13133   4063    25053   14108   12317   3692    13081   16422   12899   17709   8160    8559    21392   5523    21230   5174    12629   6036    8810    13799   4255    11895   4834    8599    3223    14983   12215   15468   6944    2108    11453   5467    1745    8120    1765    608 0   0   2886    15317;\n13133   4063    25053   14108   12317   3692    13081   16422   12899   17709   8160    8559    21392   5523    21230   5174    12629   6036    8810    13799   4255    11895   4834    8599    3223    14983   12215   15468   6944    2108    11453   5467    1745    8120    1765    608 0   0   2886    15317;\n14506   3112    26511   15448   13883   2991    12511   17988   14464   17843   9726    8693    21526   5396    22796   4473    13902   7323    8052    15364   5083    12028   6400    7648    4050    16257   11264   17034   6243    3674    12711   4516    2915    7169    3139    2440    1832    1832    0   15451;\n27829   13231   22760   29340   16962   14388   4973    16247   11264   2392    14487   7453    11758   10503   19715   13298   10151   11698   8249    21057   11322   4107    13842   8754    12530   12506   9105    25508   12177   13609   25382   11629   14478   10768   16798   15683   15587   15587   15721   0;\n];\n\n\nusing JuMP, HiGHS\nN = 25 #the problem is NP-hard we do not solve it for all cities\nm = Model(optimizer_with_attributes(HiGHS.Optimizer));\nJuMP.set_silent(m)\n@variable(m, x[f=1:N, t=1:N], Bin)\n@objective(m, Min, sum( x[i, j]*dist_mx[i,j] for i=1:N,j=1:N))\n@constraint(m, notself[i=1:N], x[i, i] == 0)\n@constraint(m, oneout[i=1:N], sum(x[i, 1:N]) == 1)\n@constraint(m, onein[j=1:N], sum(x[1:N, j]) == 1)\nfor f=1:N, t=1:N\n    @constraint(m, x[f, t]+x[t, f] &lt;= 1)\nend\n\n\noptimize!(m)\n\n\n\nfunction getcycle(x_v, N)\n    x_val = round.(Int, x_v)\n    cycle_idx = Vector{Int}()\n    push!(cycle_idx, 1)\n    while true\n        v, idx = findmax(x_val[cycle_idx[end], 1:N])\n        if idx == cycle_idx[1]\n            break\n        else\n            push!(cycle_idx, idx)\n        end\n    end\n    cycle_idx\nend\n\ngetcycle (generic function with 1 method)\n\n\n\ngetcycle(value.(x), N)\n\n22-element Vector{Int64}:\n  1\n  4\n 23\n 18\n 14\n 21\n 25\n  2\n  6\n 16\n 24\n 19\n 12\n 22\n  7\n 10\n 13\n 17\n  9\n 11\n  5\n 20\n\n\n\nfunction solved(m, cycle_idx, N)\n    if length(cycle_idx) &lt; N\n        cc = @constraint(m, sum(x[cycle_idx,cycle_idx]) &lt;= length(cycle_idx)-1)\n        println(\"Added a constraint since the cycle lenght was $(length(cycle_idx)) &lt; $N\")\n        return false\n    end\n    return true\nend\n\nsolved(m, getcycle(value.(x), N),N)\n\n\nAdded a constraint since the cycle lenght was 22 &lt; 25\n\n\nfalse\n\n\nHandling cycles inspired by the tutorial available at: https://opensourc.es/blog/mip-tsp/\n\nwhile true\n    optimize!(m)\n    status = termination_status(m)\n    cycle_idx = getcycle(value.(x), N)\n    if solved(m, cycle_idx,N)\n        break;\n    end\nend\n\nAdded a constraint since the cycle lenght was 5 &lt; 25\nAdded a constraint since the cycle lenght was 10 &lt; 25\nAdded a constraint since the cycle lenght was 10 &lt; 25\nAdded a constraint since the cycle lenght was 15 &lt; 25\nAdded a constraint since the cycle lenght was 7 &lt; 25\nAdded a constraint since the cycle lenght was 12 &lt; 25\nAdded a constraint since the cycle lenght was 15 &lt; 25\nAdded a constraint since the cycle lenght was 13 &lt; 25\nAdded a constraint since the cycle lenght was 20 &lt; 25\nAdded a constraint since the cycle lenght was 18 &lt; 25\n\n\n\nprintln(\"Trip length $(objective_value(m))\")\n\nTrip length 152803.99999999997\n\n\n\nusing CSV, DataFrames, HTTP\nurl = \"https://szufel.pl/tsl/Subway_LV.csv\"\nsbws_la = DataFrame(CSV.File(HTTP.get(url).body))\nsbws_la\n\n118×5 DataFrame93 rows omitted\n\n\n\nRow\nlong\nlatt\nname\naddress\nnode\n\n\n\nFloat64\nFloat64\nString7\nString\nInt64\n\n\n\n\n1\n-115.314\n36.1003\nSubway\n10140 W Tropicana Ave, Las Vegas, NV, 89147\n5503377919\n\n\n2\n-115.141\n36.1148\nSubway\n1040 E Flamingo, Las Vegas, NV, 89109\n2747920069\n\n\n3\n-115.325\n36.2187\nSubway\n10470 W Cheyanne, Las Vegas, NV, 89129\n2590273363\n\n\n4\n-115.207\n35.9976\nSubway\n10550 Southern Highlands Pky, Las Vegas, NV, 89141\n5514940961\n\n\n5\n-115.244\n36.1588\nSubway\n1105 S Rainbow, Las Vegas, NV, 89102\n5794871693\n\n\n6\n-115.137\n36.1011\nSubway\n1196 E Tropicana Ave, Las Vegas, NV, 89119\n5717536771\n\n\n7\n-115.08\n36.1575\nSubway\n1300 South Lamb Blvd., Las Vegas, NV, 89104\n4807070083\n\n\n8\n-115.26\n36.1901\nSubway\n1750 N Buffalo, Las Vegas, NV, 89128\n5778125595\n\n\n9\n-115.206\n36.1948\nSubway\n1940 N Decatur Blvd, Las Vegas, NV, 89108\n5797720840\n\n\n10\n-115.062\n36.1956\nSubway\n1961 N Nellis Blvd, Las Vegas, NV, 89115\n5521321066\n\n\n11\n-115.208\n36.1498\nSubway\n2003 S Decatur Blvd, Las Vegas, NV, 89102\n5844881906\n\n\n12\n-115.144\n36.1707\nSubway\n202 Fremont Street, Las Vegas, NV, 89101\n3813314952\n\n\n13\n-115.12\n36.2762\nSubway\n2225 E Centennial Pky, Las Vegas, NV, 89081\n5509334872\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n107\n-115.149\n36.0855\nSubway\nC Gate McCarran Int Airport, Las Vegas, NV, 89111\n4538984240\n\n\n108\n-115.146\n36.1715\nSubway\nOne South Main St, Las Vegas, NV, 89125\n3813314954\n\n\n109\n-115.178\n36.2857\nSubway\n6885 Aliante Parkway, N Las Vegas, NV, 89084\n4208824392\n\n\n110\n-115.118\n36.2176\nSubway\n2265 Cheyenne Avenue, North Las Vegas, NV, 89030\n5851001667\n\n\n111\n-115.116\n36.24\nSubway\n2546 E Craig Rd, North Las Vegas, NV, 89030\n5534608424\n\n\n112\n-115.109\n36.2081\nSubway\n2668 North Las Vegas Blvd, North Las Vegas, NV, 89030\n5483724476\n\n\n113\n-115.179\n36.2396\nSubway\n2816 W Craig Rd, North Las Vegas, NV, 89030\n5513681535\n\n\n114\n-115.182\n36.2617\nSubway\n3030 W Ann Rd, North Las Vegas, NV, 89031\n5512410055\n\n\n115\n-115.193\n36.1999\nSubway\n3950 W Lake Mead Blvd, North Las Vegas, NV, 89032\n5788688096\n\n\n116\n-115.097\n36.2396\nSubway\n4375 N Pecos Rd, North Las Vegas, NV, 89030\n5534608851\n\n\n117\n-115.155\n36.2603\nSubway\n5546 Camino Al Norte, North Las Vegas, NV, 89031\n5096983700\n\n\n118\n-115.18\n36.2753\nSubway\n6360 Simmons St., North Las Vegas, NV, 89031\n5512410390\n\n\n\n\n\n\n\nusing Plots\n\ncycle_idx = getcycle(value.(x), N)\nids = vcat(cycle_idx, cycle_idx[1])\n\np = plot(sbws_la.long[ids], sbws_la.latt[ids])\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptional Gurobi example\nusing JuMP, Gurobi\nN = 25 #the problem is NP-hard we do not solve it for all cities\nm2 = Model(optimizer_with_attributes(Gurobi.Optimizer));\nset_attribute(m2, \"TimeLimit\", 60)\nJuMP.set_silent(m2)\n@variable(m2, x[f=1:N, t=1:N], Bin)\n@objective(m2, Min, sum( x[i, j]*dist_mx[i,j] for i=1:N,j=1:N))\n@constraint(m2, notself[i=1:N], x[i, i] == 0)\n@constraint(m2, oneout[i=1:N], sum(x[i, 1:N]) == 1)\n@constraint(m2, onein[j=1:N], sum(x[1:N, j]) == 1)\nfor f=1:N, t=1:N\n    @constraint(m2, x[f, t]+x[t, f] &lt;= 1)\nend\n#optimize!(m2)\n\nfunction callbackhandle(cb)\n    cycle_idx =  getcycle(callback_value.(Ref(cb), x), N)\n    println(\"Callback! N= $N cycle_idx: $cycle_idx of length: $(length(cycle_idx))\")\n    if length(cycle_idx) &lt; N\n        con = @build_constraint(sum(x[cycle_idx,cycle_idx]) &lt;= length(cycle_idx)-1)\n        MOI.submit(m2, MOI.LazyConstraint(cb), con)\n        print(\"added a lazy constraint: \")\n        println(con)\n    end\nend\nMOI.set(m2, MOI.LazyConstraintCallback(), callbackhandle)\noptimize!(m2)\nprintln(\"Trip length $(objective_value(m2))\")\n\n\nSample quadratic model - minimizing sum of squares\n\nusing LinearAlgebra\n# here we generate a sample problem structure\nx = rand(Float64,(1000,2))*Diagonal([6,10]) .- [4 3]\nϵ = randn(1000).*2 #errors\n\na, b, c = 1, 10, 7 # values we are trying to estimate\nA = [a b/2;b/2 c]\n\n# y = a * x₁² + b*x₁x₂ + c x₂²\ny = (x * A ) .* x * [1;1] .+ ϵ # explained variable\n;\ny'\n\n1×1000 adjoint(::Vector{Float64}) with eltype Float64:\n -27.7648  84.2602  7.41514  10.4189  …  46.4475  202.429  28.5886  1.53657\n\n\n\nusing Ipopt\nm = Model(optimizer_with_attributes(Ipopt.Optimizer)); \n\n@variable(m, aa[1:2,1:2])\n\nfunction errs(aa)\n   sum((y .- (x * aa ) .* x * [1;1]) .^ 2)\nend\n\n@objective(m, Min, errs(aa))\n\noptimize!(m)\n\n\n******************************************************************************\nThis program contains Ipopt, a library for large-scale nonlinear optimization.\n Ipopt is released as open source code under the Eclipse Public License (EPL).\n         For more information visit https://github.com/coin-or/Ipopt\n******************************************************************************\n\nThis is Ipopt version 3.14.13, running with linear solver MUMPS 5.6.1.\n\nNumber of nonzeros in equality constraint Jacobian...:        0\nNumber of nonzeros in inequality constraint Jacobian.:        0\nNumber of nonzeros in Lagrangian Hessian.............:       10\n\nTotal number of variables............................:        4\n                     variables with only lower bounds:        0\n                variables with lower and upper bounds:        0\n                     variables with only upper bounds:        0\nTotal number of equality constraints.................:        0\nTotal number of inequality constraints...............:        0\n        inequality constraints with only lower bounds:        0\n   inequality constraints with lower and upper bounds:        0\n        inequality constraints with only upper bounds:        0\n\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n   0  1.4434260e+07 0.00e+00 1.00e+02  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0\n   1  4.0406556e+03 0.00e+00 7.00e-04  -1.0 7.00e+00  -4.0 1.00e+00 1.00e+00f  1\n   2  4.0406514e+03 0.00e+00 5.20e-09  -5.7 1.56e-04  -4.5 1.00e+00 1.00e+00f  1\n\nNumber of Iterations....: 2\n\n                                   (scaled)                 (unscaled)\nObjective...............:   1.0587604556415567e-01    4.0406514404900372e+03\nDual infeasibility......:   5.2033165641907263e-09    1.9857927691191438e-04\nConstraint violation....:   0.0000000000000000e+00    0.0000000000000000e+00\nVariable bound violation:   0.0000000000000000e+00    0.0000000000000000e+00\nComplementarity.........:   0.0000000000000000e+00    0.0000000000000000e+00\nOverall NLP error.......:   5.2033165641907263e-09    1.9857927691191438e-04\n\n\nNumber of objective function evaluations             = 3\nNumber of objective gradient evaluations             = 3\nNumber of equality constraint evaluations            = 0\nNumber of inequality constraint evaluations          = 0\nNumber of equality constraint Jacobian evaluations   = 0\nNumber of inequality constraint Jacobian evaluations = 0\nNumber of Lagrangian Hessian evaluations             = 1\nTotal seconds in IPOPT                               = 0.017\n\nEXIT: Optimal Solution Found.\n\n\n\nA\n\n2×2 Matrix{Float64}:\n 1.0  5.0\n 5.0  7.0\n\n\n\nvalue.(aa)\n\n2×2 Matrix{Float64}:\n 1.00837  5.00195\n 5.00195  6.99828\n\n\n\nusing Gurobi, JuMP\n\n\nm = Model(optimizer_with_attributes(Gurobi.Optimizer)); \n@variable(m, aa[1:2,1:2])\n\nfunction errs(aa)\n   sum((y .- (x * aa ) .* x * [1;1]) .^ 2)\nend\n\n@objective(m, Min, errs(aa))\n\noptimize!(m)\nstatus = termination_status(m)\n\nprintln(\"Cost: $(objective_value(m))\")\nres = value.(aa)\nprintln(\"aa=$res\")\nprintln(\"a, b, c = $(res[1,1]), $(res[1,2]+res[2,1]), $(res[2,2])\")\n\nSet parameter Username\nAcademic license - for non-commercial use only - expires 2024-09-01\nGurobi Optimizer version 10.0.2 build v10.0.2rc0 (win64)\n\nCPU model: 13th Gen Intel(R) Core(TM) i7-1355U, instruction set [SSE2|AVX|AVX2]\nThread count: 10 physical cores, 12 logical processors, using up to 12 threads\n\nOptimize a model with 0 rows, 4 columns and 0 nonzeros\nModel fingerprint: 0x3c39708a\nModel has 10 quadratic objective terms\nCoefficient statistics:\n  Matrix range     [0e+00, 0e+00]\n  Objective range  [2e+05, 4e+06]\n  QObjective range [8e+04, 7e+05]\n  Bounds range     [0e+00, 0e+00]\n  RHS range        [0e+00, 0e+00]\nPresolve time: 0.01s\nPresolved: 0 rows, 4 columns, 0 nonzeros\nPresolved model has 10 quadratic objective terms\nOrdering time: 0.00s\n\nBarrier statistics:\n Free vars  : 7\n AA' NZ     : 3.000e+00\n Factor NZ  : 6.000e+00\n Factor Ops : 1.400e+01 (less than 1 second per iteration)\n Threads    : 1\n\n                  Objective                Residual\nIter       Primal          Dual         Primal    Dual     Compl     Time\n   0   1.44342596e+07  1.44342596e+07  0.00e+00 3.82e+06  0.00e+00     0s\n   1   1.44339482e+07  1.44342596e+07  1.58e-08 3.82e+06  0.00e+00     0s\n   2   1.44325405e+07  1.44342596e+07  3.72e-09 3.82e+06  0.00e+00     0s\n   3   1.44311135e+07  1.44342594e+07  1.96e-08 3.82e+06  0.00e+00     0s\n   4   1.44298081e+07  1.44342593e+07  2.68e-08 3.82e+06  0.00e+00     0s\n   5   1.44285376e+07  1.44342590e+07  3.29e-08 3.82e+06  0.00e+00     0s\n   6   1.44273214e+07  1.44342588e+07  9.04e-08 3.82e+06  0.00e+00     0s\n   7   1.44229613e+07  1.44342574e+07  2.09e-07 3.81e+06  0.00e+00     0s\n   8   1.44105260e+07  1.44342498e+07  2.78e-07 3.81e+06  0.00e+00     0s\n   9   1.43732750e+07  1.44341950e+07  6.31e-07 3.81e+06  0.00e+00     0s\n  10   1.43216429e+07  1.44340390e+07  1.41e-06 3.80e+06  0.00e+00     0s\n  11   1.42552714e+07  1.44337011e+07  1.30e-06 3.79e+06  0.00e+00     0s\n  12   1.42233001e+07  1.44334829e+07  1.56e-06 3.79e+06  0.00e+00     0s\n  13   1.40577195e+07  1.44317708e+07  2.07e-06 3.77e+06  0.00e+00     0s\n  14   1.37865496e+07  1.44268240e+07  5.11e-06 3.73e+06  0.00e+00     0s\n  15   1.35572961e+07  1.44205155e+07  6.70e-06 3.70e+06  0.00e+00     0s\n  16   1.32773447e+07  1.44100932e+07  1.72e-05 3.66e+06  0.00e+00     0s\n  17   1.23107168e+07  1.43498046e+07  2.97e-05 3.52e+06  0.00e+00     0s\n  18   1.15289591e+07  1.42711491e+07  4.99e-05 3.41e+06  0.00e+00     0s\n  19   1.00599881e+07  1.40404258e+07  7.92e-05 3.19e+06  0.00e+00     0s\n  20   1.87907187e+06  8.53298174e+06  1.10e-04 1.38e+06  0.00e+00     0s\n  21   6.84438572e+05  5.59182113e+06  1.19e-04 8.29e+05  0.00e+00     0s\n  22   3.71409807e+03  4.04692001e+03  1.43e-04 8.29e-01  0.00e+00     0s\n  23   4.04065140e+03  4.04065145e+03  6.81e-11 8.29e-07  0.00e+00     0s\n\nBarrier solved model in 23 iterations and 0.01 seconds (0.00 work units)\nOptimal objective 4.04065140e+03\n\n\nUser-callback calls 85, time in user-callback 0.00 sec\nCost: 4040.6514033079147\naa=[1.008368985622381 5.001945560597719; 5.001945560597719 6.998278968876772]\na, b, c = 1.008368985622381, 10.003891121195439, 6.998278968876772\n\n\n\n\nModelling pandemic dynamics in a small community\n\nusing Ipopt, JuMP, LinearAlgebra\nobs_cases = vcat(1,2,4,8,15,27,44,58,55,32,12,3,1,zeros(13))\nSI_max = length(obs_cases)\nN = 300\n\n300\n\n\n\nobs_cases'\n\n1×26 adjoint(::Vector{Float64}) with eltype Float64:\n 1.0  2.0  4.0  8.0  15.0  27.0  44.0  …  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\n\n\nusing JuMP, Ipopt\nm = Model(optimizer_with_attributes(Ipopt.Optimizer, (\"print_level\"=&gt;2))); \n@variable(m, 0.5 &lt;= α &lt;= 1.5)\n@variable(m, 0.05 &lt;= β &lt;= 70)\n@variable(m, 0 &lt;= I_[1:SI_max] &lt;= N)\n\n@variable(m, 0 &lt;= S[1:SI_max]  &lt;= N)\n@variable(m, ε[1:SI_max])\n@constraint(m, ε .== I_ .- obs_cases  )\n@constraint(m, I_[1] == 1)\nfor i=2:SI_max\n   @NLconstraint(m, I_[i] == β*(I_[i-1]^α)*S[i-1]/N)\nend\n\n@constraint(m, S[1] == N)\nfor i=2:SI_max\n   @constraint(m, S[i] == S[i-1]-I_[i])\nend\n\n@NLobjective(m, Min, sum(ε[i]^2 for i in 1:SI_max))\nprintln(m)\n\nMin ε[1] ^ 2.0 + ε[2] ^ 2.0 + ε[3] ^ 2.0 + ε[4] ^ 2.0 + ε[5] ^ 2.0 + ε[6] ^ 2.0 + ε[7] ^ 2.0 + ε[8] ^ 2.0 + ε[9] ^ 2.0 + ε[10] ^ 2.0 + ε[11] ^ 2.0 + ε[12] ^ 2.0 + ε[13] ^ 2.0 + ε[14] ^ 2.0 + ε[15] ^ 2.0 + ε[16] ^ 2.0 + ε[17] ^ 2.0 + ε[18] ^ 2.0 + ε[19] ^ 2.0 + ε[20] ^ 2.0 + ε[21] ^ 2.0 + ε[22] ^ 2.0 + ε[23] ^ 2.0 + ε[24] ^ 2.0 + ε[25] ^ 2.0 + ε[26] ^ 2.0\nSubject to\n -I_[1] + ε[1] == -1\n -I_[2] + ε[2] == -2\n -I_[3] + ε[3] == -4\n -I_[4] + ε[4] == -8\n -I_[5] + ε[5] == -15\n -I_[6] + ε[6] == -27\n -I_[7] + ε[7] == -44\n -I_[8] + ε[8] == -58\n -I_[9] + ε[9] == -55\n -I_[10] + ε[10] == -32\n -I_[11] + ε[11] == -12\n -I_[12] + ε[12] == -3\n -I_[13] + ε[13] == -1\n -I_[14] + ε[14] == 0\n -I_[15] + ε[15] == 0\n -I_[16] + ε[16] == 0\n -I_[17] + ε[17] == 0\n -I_[18] + ε[18] == 0\n -I_[19] + ε[19] == 0\n -I_[20] + ε[20] == 0\n -I_[21] + ε[21] == 0\n -I_[22] + ε[22] == 0\n -I_[23] + ε[23] == 0\n -I_[24] + ε[24] == 0\n -I_[25] + ε[25] == 0\n -I_[26] + ε[26] == 0\n I_[1] == 1\n S[1] == 300\n I_[2] - S[1] + S[2] == 0\n I_[3] - S[2] + S[3] == 0\n I_[4] - S[3] + S[4] == 0\n I_[5] - S[4] + S[5] == 0\n I_[6] - S[5] + S[6] == 0\n I_[7] - S[6] + S[7] == 0\n I_[8] - S[7] + S[8] == 0\n I_[9] - S[8] + S[9] == 0\n I_[10] - S[9] + S[10] == 0\n I_[11] - S[10] + S[11] == 0\n I_[12] - S[11] + S[12] == 0\n I_[13] - S[12] + S[13] == 0\n I_[14] - S[13] + S[14] == 0\n I_[15] - S[14] + S[15] == 0\n I_[16] - S[15] + S[16] == 0\n I_[17] - S[16] + S[17] == 0\n I_[18] - S[17] + S[18] == 0\n I_[19] - S[18] + S[19] == 0\n I_[20] - S[19] + S[20] == 0\n I_[21] - S[20] + S[21] == 0\n I_[22] - S[21] + S[22] == 0\n I_[23] - S[22] + S[23] == 0\n I_[24] - S[23] + S[24] == 0\n I_[25] - S[24] + S[25] == 0\n I_[26] - S[25] + S[26] == 0\n α &gt;= 0.5\n β &gt;= 0.05\n I_[1] &gt;= 0\n I_[2] &gt;= 0\n I_[3] &gt;= 0\n I_[4] &gt;= 0\n I_[5] &gt;= 0\n I_[6] &gt;= 0\n I_[7] &gt;= 0\n I_[8] &gt;= 0\n I_[9] &gt;= 0\n I_[10] &gt;= 0\n I_[11] &gt;= 0\n I_[12] &gt;= 0\n I_[13] &gt;= 0\n I_[14] &gt;= 0\n I_[15] &gt;= 0\n I_[16] &gt;= 0\n I_[17] &gt;= 0\n I_[18] &gt;= 0\n I_[19] &gt;= 0\n I_[20] &gt;= 0\n I_[21] &gt;= 0\n I_[22] &gt;= 0\n I_[23] &gt;= 0\n I_[24] &gt;= 0\n I_[25] &gt;= 0\n I_[26] &gt;= 0\n S[1] &gt;= 0\n S[2] &gt;= 0\n S[3] &gt;= 0\n S[4] &gt;= 0\n S[5] &gt;= 0\n S[6] &gt;= 0\n S[7] &gt;= 0\n S[8] &gt;= 0\n S[9] &gt;= 0\n S[10] &gt;= 0\n S[11] &gt;= 0\n S[12] &gt;= 0\n S[13] &gt;= 0\n S[14] &gt;= 0\n S[15] &gt;= 0\n S[16] &gt;= 0\n S[17] &gt;= 0\n S[18] &gt;= 0\n S[19] &gt;= 0\n S[20] &gt;= 0\n S[21] &gt;= 0\n S[22] &gt;= 0\n S[23] &gt;= 0\n S[24] &gt;= 0\n S[25] &gt;= 0\n S[26] &gt;= 0\n α &lt;= 1.5\n β &lt;= 70\n I_[1] &lt;= 300\n I_[2] &lt;= 300\n I_[3] &lt;= 300\n I_[4] &lt;= 300\n I_[5] &lt;= 300\n I_[6] &lt;= 300\n I_[7] &lt;= 300\n I_[8] &lt;= 300\n I_[9] &lt;= 300\n I_[10] &lt;= 300\n I_[11] &lt;= 300\n I_[12] &lt;= 300\n I_[13] &lt;= 300\n I_[14] &lt;= 300\n I_[15] &lt;= 300\n I_[16] &lt;= 300\n I_[17] &lt;= 300\n I_[18] &lt;= 300\n I_[19] &lt;= 300\n I_[20] &lt;= 300\n I_[21] &lt;= 300\n I_[22] &lt;= 300\n I_[23] &lt;= 300\n I_[24] &lt;= 300\n I_[25] &lt;= 300\n I_[26] &lt;= 300\n S[1] &lt;= 300\n S[2] &lt;= 300\n S[3] &lt;= 300\n S[4] &lt;= 300\n S[5] &lt;= 300\n S[6] &lt;= 300\n S[7] &lt;= 300\n S[8] &lt;= 300\n S[9] &lt;= 300\n S[10] &lt;= 300\n S[11] &lt;= 300\n S[12] &lt;= 300\n S[13] &lt;= 300\n S[14] &lt;= 300\n S[15] &lt;= 300\n S[16] &lt;= 300\n S[17] &lt;= 300\n S[18] &lt;= 300\n S[19] &lt;= 300\n S[20] &lt;= 300\n S[21] &lt;= 300\n S[22] &lt;= 300\n S[23] &lt;= 300\n S[24] &lt;= 300\n S[25] &lt;= 300\n S[26] &lt;= 300\n (I_[2] - (β * I_[1] ^ α * S[1]) / 300.0) - 0.0 == 0\n (I_[3] - (β * I_[2] ^ α * S[2]) / 300.0) - 0.0 == 0\n (I_[4] - (β * I_[3] ^ α * S[3]) / 300.0) - 0.0 == 0\n (I_[5] - (β * I_[4] ^ α * S[4]) / 300.0) - 0.0 == 0\n (I_[6] - (β * I_[5] ^ α * S[5]) / 300.0) - 0.0 == 0\n (I_[7] - (β * I_[6] ^ α * S[6]) / 300.0) - 0.0 == 0\n (I_[8] - (β * I_[7] ^ α * S[7]) / 300.0) - 0.0 == 0\n (I_[9] - (β * I_[8] ^ α * S[8]) / 300.0) - 0.0 == 0\n (I_[10] - (β * I_[9] ^ α * S[9]) / 300.0) - 0.0 == 0\n (I_[11] - (β * I_[10] ^ α * S[10]) / 300.0) - 0.0 == 0\n (I_[12] - (β * I_[11] ^ α * S[11]) / 300.0) - 0.0 == 0\n (I_[13] - (β * I_[12] ^ α * S[12]) / 300.0) - 0.0 == 0\n (I_[14] - (β * I_[13] ^ α * S[13]) / 300.0) - 0.0 == 0\n (I_[15] - (β * I_[14] ^ α * S[14]) / 300.0) - 0.0 == 0\n (I_[16] - (β * I_[15] ^ α * S[15]) / 300.0) - 0.0 == 0\n (I_[17] - (β * I_[16] ^ α * S[16]) / 300.0) - 0.0 == 0\n (I_[18] - (β * I_[17] ^ α * S[17]) / 300.0) - 0.0 == 0\n (I_[19] - (β * I_[18] ^ α * S[18]) / 300.0) - 0.0 == 0\n (I_[20] - (β * I_[19] ^ α * S[19]) / 300.0) - 0.0 == 0\n (I_[21] - (β * I_[20] ^ α * S[20]) / 300.0) - 0.0 == 0\n (I_[22] - (β * I_[21] ^ α * S[21]) / 300.0) - 0.0 == 0\n (I_[23] - (β * I_[22] ^ α * S[22]) / 300.0) - 0.0 == 0\n (I_[24] - (β * I_[23] ^ α * S[23]) / 300.0) - 0.0 == 0\n (I_[25] - (β * I_[24] ^ α * S[24]) / 300.0) - 0.0 == 0\n (I_[26] - (β * I_[25] ^ α * S[25]) / 300.0) - 0.0 == 0\n\n\n\n\n\noptimize!(m)\n\nprintln(\"Cost: $(objective_value(m))\")\nprintln(\"α=$(value(α))\\nβ=$(value(β))\")\n\nCost: 0.4826914548884895\nα=0.9978555010305015\nβ=2.0069930759045875\n\n\n\nsbws_la \n\n118×5 DataFrame93 rows omitted\n\n\n\nRow\nlong\nlatt\nname\naddress\nnode\n\n\n\nFloat64\nFloat64\nString7\nString\nInt64\n\n\n\n\n1\n-115.314\n36.1003\nSubway\n10140 W Tropicana Ave, Las Vegas, NV, 89147\n5503377919\n\n\n2\n-115.141\n36.1148\nSubway\n1040 E Flamingo, Las Vegas, NV, 89109\n2747920069\n\n\n3\n-115.325\n36.2187\nSubway\n10470 W Cheyanne, Las Vegas, NV, 89129\n2590273363\n\n\n4\n-115.207\n35.9976\nSubway\n10550 Southern Highlands Pky, Las Vegas, NV, 89141\n5514940961\n\n\n5\n-115.244\n36.1588\nSubway\n1105 S Rainbow, Las Vegas, NV, 89102\n5794871693\n\n\n6\n-115.137\n36.1011\nSubway\n1196 E Tropicana Ave, Las Vegas, NV, 89119\n5717536771\n\n\n7\n-115.08\n36.1575\nSubway\n1300 South Lamb Blvd., Las Vegas, NV, 89104\n4807070083\n\n\n8\n-115.26\n36.1901\nSubway\n1750 N Buffalo, Las Vegas, NV, 89128\n5778125595\n\n\n9\n-115.206\n36.1948\nSubway\n1940 N Decatur Blvd, Las Vegas, NV, 89108\n5797720840\n\n\n10\n-115.062\n36.1956\nSubway\n1961 N Nellis Blvd, Las Vegas, NV, 89115\n5521321066\n\n\n11\n-115.208\n36.1498\nSubway\n2003 S Decatur Blvd, Las Vegas, NV, 89102\n5844881906\n\n\n12\n-115.144\n36.1707\nSubway\n202 Fremont Street, Las Vegas, NV, 89101\n3813314952\n\n\n13\n-115.12\n36.2762\nSubway\n2225 E Centennial Pky, Las Vegas, NV, 89081\n5509334872\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n107\n-115.149\n36.0855\nSubway\nC Gate McCarran Int Airport, Las Vegas, NV, 89111\n4538984240\n\n\n108\n-115.146\n36.1715\nSubway\nOne South Main St, Las Vegas, NV, 89125\n3813314954\n\n\n109\n-115.178\n36.2857\nSubway\n6885 Aliante Parkway, N Las Vegas, NV, 89084\n4208824392\n\n\n110\n-115.118\n36.2176\nSubway\n2265 Cheyenne Avenue, North Las Vegas, NV, 89030\n5851001667\n\n\n111\n-115.116\n36.24\nSubway\n2546 E Craig Rd, North Las Vegas, NV, 89030\n5534608424\n\n\n112\n-115.109\n36.2081\nSubway\n2668 North Las Vegas Blvd, North Las Vegas, NV, 89030\n5483724476\n\n\n113\n-115.179\n36.2396\nSubway\n2816 W Craig Rd, North Las Vegas, NV, 89030\n5513681535\n\n\n114\n-115.182\n36.2617\nSubway\n3030 W Ann Rd, North Las Vegas, NV, 89031\n5512410055\n\n\n115\n-115.193\n36.1999\nSubway\n3950 W Lake Mead Blvd, North Las Vegas, NV, 89032\n5788688096\n\n\n116\n-115.097\n36.2396\nSubway\n4375 N Pecos Rd, North Las Vegas, NV, 89030\n5534608851\n\n\n117\n-115.155\n36.2603\nSubway\n5546 Camino Al Norte, North Las Vegas, NV, 89031\n5096983700\n\n\n118\n-115.18\n36.2753\nSubway\n6360 Simmons St., North Las Vegas, NV, 89031\n5512410390\n\n\n\n\n\n\n\nround.(value.(I_), digits=2)\n\n26-element Vector{Float64}:\n  1.0\n  2.01\n  4.0\n  7.83\n 14.93\n 26.94\n 43.72\n 58.19\n 54.95\n 31.87\n 11.76\n  3.43\n  0.92\n  0.24\n  0.06\n  0.02\n  0.0\n  0.0\n  0.0\n  0.0\n  0.0\n  0.0\n  0.0\n  0.0\n  0.0\n  0.0"
  },
  {
    "objectID": "material/3_wed/vis/tasks.html",
    "href": "material/3_wed/vis/tasks.html",
    "title": "Setting up Pluto.jl",
    "section": "",
    "text": "Pluto is nice as you can prototype pretty fast.\n\n\n\n\n\n\nImportant\n\n\n\nPluto.jl has its own dependency management included!\nIf you want to add packages that are not registered, you have to activate your own environment. For example\nusing Pkg\nPkg.activate(mktempdir())\nPkg.add(\"/path/to/your/package/CoolPackage\")\nPkg.add(url=\"https://github.com/username/MyPackage.jl\")\n\nusing CoolPackage,MyPackage\n\n\nTo run pluto in the first place use:\n]add Pluto\nPluto.run()"
  },
  {
    "objectID": "material/3_wed/vis/tasks.html#data",
    "href": "material/3_wed/vis/tasks.html#data",
    "title": "Setting up Pluto.jl",
    "section": "1. Data",
    "text": "1. Data\n\nGenerate 500 normally distributed samples\n\n\n\n\n\n\nTip\n\n\n\nYou might want to make your results reproducible by fixing some seeds for the random generators. The two most common random generators used in julia are Random.MersenneTwister and StableRNGs.StableRNG - For this execrise I would recommend the latter (even though MersenneTwister is much more common to be used), thus run:\nusing StableRNGs\nrandn(StableRNG(1),100)\nto get 100 random numbers.\n\n\nScale the random numbers to fullfill std(x) ≈ 10\n\n\nfunctionize it\nNext wrap that code in a function simulate which takes two arguments, a random seed and the number of samples"
  },
  {
    "objectID": "material/3_wed/vis/tasks.html#cumulative-mean",
    "href": "material/3_wed/vis/tasks.html#cumulative-mean",
    "title": "Setting up Pluto.jl",
    "section": "2. cumulative mean",
    "text": "2. cumulative mean\nCalculate the cumulative mean of a single simulation. save it to a variable\nNote that there is no cummean function, but clever element-wise division in combination with cumsum should lead you there - or you just use a loop 🤷\n\n\n\n\n\n\nclick to show solution\n\n\n\n\n\ncumsum(x) ./ (1:length(x))"
  },
  {
    "objectID": "material/3_wed/vis/tasks.html#plotting",
    "href": "material/3_wed/vis/tasks.html#plotting",
    "title": "Setting up Pluto.jl",
    "section": "3. Plotting!",
    "text": "3. Plotting!\nNow for your first plot. Use a scatter plot1 to visualize the cummulative mean output, if you do not generate a Figure() + ax = f[1,1] = Axis(f) manually, you can get it back by the scatter call. f,ax,s = scatter(). This is helpful as we later want to extend the Axis and Figure with other plot elements\nUse hlines! to add a horizontal line at your “true” value"
  },
  {
    "objectID": "material/3_wed/vis/tasks.html#subplot",
    "href": "material/3_wed/vis/tasks.html#subplot",
    "title": "Setting up Pluto.jl",
    "section": "4. Subplot",
    "text": "4. Subplot\n\nsimulate repeatedly\nLet’s simulate 1000x datasets, each with a different seed, and take the mean over all simulated values\n\n\n\n\n\n\nclick to show tip\n\n\n\n\n\nAn easy way to call a function many times is to broadcast it on an array created e.g. via 1:1000 - you could also use map to do it, but I don’t think it is as clear :)\n\n\n\n\n\n\n\n\n\nclick to show solution\n\n\n\n\n\nsimulate.(1:1000,nmax)\n\n\n\n\n\nMean it\ncalculate the mean of each simulation\n\n\n\n\n\n\nclick to show solution\n\n\n\n\n\nusing Statistics\nmean.(simulate.(1:1000,nmax))\n\n# or \nsum.(...) ./ nmax\n\n\n\n\n\nAdd it as a subplot\nWe want to add a histogram of the 1000 means to the plot.\n\nAdd a new Axis to f[1,2]\nuse it to plot the histogram of the means via hist! - don’t forget to change the direction=:x to flip the histogram\nlink the axes using linkaxes"
  },
  {
    "objectID": "material/3_wed/vis/tasks.html#prettify-it",
    "href": "material/3_wed/vis/tasks.html#prettify-it",
    "title": "Setting up Pluto.jl",
    "section": "5. Prettify it",
    "text": "5. Prettify it\nThere are some simple tricks to make a plot look nicer:\n\nremove the “box” using `hidespines!(ax,:r,:t)\nresize the right sub-plot to be smaller colsize! and Relative(X)\nhide the x-grid (type ax.+ TAB to find all possible attributes)\nhide the xlabels + xticks + bottomspine from the right subplot\nadd two Labels (A) and (B) to the plot\nBonus: use color to color the cummulative sum samples according to how many samples went into that sum. colormap=:Reds looks good to me!\n\n\n\n\n\n\n\nBonus: Click for more fancy labels\n\n\n\n\n\nYou can create a slightly fancier label by adding a circle around it :)\n    Label(f[1,2,TopLeft()],\"B\",padding=[0,0,5,0])\n    Label(f[1,2,TopLeft()],\"⭕\",padding=[0,0,8,0],fontsize=30)"
  },
  {
    "objectID": "material/3_wed/vis/tasks.html#adding-interactivity-via-sliders",
    "href": "material/3_wed/vis/tasks.html#adding-interactivity-via-sliders",
    "title": "Setting up Pluto.jl",
    "section": "Adding interactivity via sliders",
    "text": "Adding interactivity via sliders\n\nDefine a slider that controls the number of samples from 1:500\nDefine a second slider that adds a constant offset to all values of the simulation simulation\nmake sure to fix the x/y-limits to get a nice looking plot :-)\n\n\n\n\n\n\n\nBonus: Advanced slider management\n\n\n\n\n\nAfter understanding the slightly awkward syntax, the following gives a nice collection of Sliders, Checkboxes, Widgets etc. with at the same time being drag-and-dropable and in a sidebar. Neat!\nusing PlutoExtras\n\nPlutoExtras.BondTable([\n    PlutoExtras.@BondsList \"Sliders\" let \n        \"name A\" = @bind(varA,PlutoUI.Slider(1:500))\n        \"name B\" = @bind(varB, PlutoUI.Slider(-5:5))\n    end\n    ])"
  },
  {
    "objectID": "material/3_wed/vis/tasks.html#vs.",
    "href": "material/3_wed/vis/tasks.html#vs.",
    "title": "Setting up Pluto.jl",
    "section": "🥚 vs. 🗓",
    "text": "🥚 vs. 🗓\nVisualize the number of eggs against the year\n\n\n\n\n\n\nTip\n\n\n\nTo get a first overview, first(df) , describe(df) and names(df) are typically helpful"
  },
  {
    "objectID": "material/3_wed/vis/tasks.html#split-them-up",
    "href": "material/3_wed/vis/tasks.html#split-them-up",
    "title": "Setting up Pluto.jl",
    "section": "Split them up",
    "text": "Split them up\nNext split them up, choose color and col and choose reasonable columns from the dataset"
  },
  {
    "objectID": "material/3_wed/vis/tasks.html#rotate-the-labels",
    "href": "material/3_wed/vis/tasks.html#rotate-the-labels",
    "title": "Setting up Pluto.jl",
    "section": "Rotate the labels",
    "text": "Rotate the labels\nUse the trick from the handout to modify a plot after it was generated: Rotate the x-label ticks by some 30°\n:::callout-tip instead of rotating each axis manually, you can also replace the draw command in your pipeline with an anonymous function. This allows you to specify additional arguments e.g. to the axis, for all “sub”-plots\n1... |&gt; x-&gt; draw(x;axis=(;xlims = (-3,2)))\n\n1\n\nNote the ; before xlims, this enforces that a NamedTuple is created"
  },
  {
    "objectID": "material/3_wed/vis/tasks.html#footnotes",
    "href": "material/3_wed/vis/tasks.html#footnotes",
    "title": "Setting up Pluto.jl",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nafter a using CairoMakie↩︎"
  },
  {
    "objectID": "material/5_fri/optimizing_julia/optimizing_julia.html",
    "href": "material/5_fri/optimizing_julia/optimizing_julia.html",
    "title": "Optimizing Julia code",
    "section": "",
    "text": "This session provides an introduction to optimizing Julia code. The examples are developed with Julia v1.9.3. You can download all files from the summer school website:\n\noptimizing_julia.jl\nProject.toml\nManifest.toml\n\nThis website renders the content of optimizing_julia.jl.\nFirst, we install all required packages\nimport Pkg\nPkg.activate(@__DIR__)\nPkg.instantiate()\nThe markdown file is created from the source code using Literate.jl. You can create the markdown file via\nusing Literate\nLiterate.markdown(joinpath(@__DIR__, \"optimizing_julia.jl\");\n                  flavor = Literate.CommonMarkFlavor())\n\n\nThe Julia manual contains basic information about performance. In particular, you should be familiar with\n\nhttps://docs.julialang.org/en/v1/manual/performance-tips/\nhttps://docs.julialang.org/en/v1/manual/style-guide/\n\nif you care about performance.\n\n\n\nThis is a classical partial differential equation (PDE) simulation setup. If you are not familiar with it, just ignore what’s going on - but we need an example. This one is similar to several problematic cases I have seen in practice.\nFirst, we generate initial data and store it in a file.\nusing HDF5\nx = range(-1.0, 1.0, length = 1000)\ndx = step(x)\nh5open(\"initial_data.h5\", \"w\") do io\n    u0 = sinpi.(x)\n    write_dataset(io, \"x\", collect(x))\n    write_dataset(io, \"u0\", u0)\nend\nNext, we write our simulation code as a function - as we have learned from the performance tips!\nfunction simulate()\n    x, u0 = h5open(\"initial_data.h5\", \"r\") do io\n        read_dataset(io, \"x\"), read_dataset(io, \"u0\")\n    end\n\n    t = 0\n    u = u0\n    while t &lt; t_end\n        u = u + dt * rhs(u)\n        t = t + dt\n    end\n\n    return t, x, u, u0\nend\n\nfunction rhs(u)\n    du = similar(u)\n    for i in eachindex(u)\n        im1 = i == firstindex(u) ? lastindex(u) : (i - 1)\n        du[i] = -(u[i] - u[im1]) / dx\n    end\n    return du\nend\nNow, we can define our parameters, run a simulation, and plot the results.\nusing Plots, LaTeXStrings\n\nt_end = 2.5\ndt = 0.9 * dx\nt, x, u, u0 = simulate()\nplot(x, u0; label = L\"u_0\", xguide = L\"x\")\nplot!(x, u; label = L\"u\")\nMaybe you can already spot problems in the code above. Anyway, before you begin optimizing some code, you should test it and make sure it’s correct. Let’s assume this is the case here. You should write tests making sure that the code continues to work as expected while we optimize it. We will not do this here right now.\n\n\n\nFirst, we need to measure the performance of our code to see whether it’s already reasonable. For this, you can use @time - or better BenchmarkTools.jl.\nusing BenchmarkTools\n@benchmark simulate()\nThis shows quite a lot of allocations - typically a bad sign if you are working with numerical simulations.\nThere are also profiling tools available in Julia. Some of them are already loaded in the Visual Studio Code extension for Julia. If you prefer working in the REPL, you can install ProfileView.jl (@profview simulate()) and PProf.jl (pprof() after creating a profile via @profview).\n@profview simulate()\nTask: Optimize the code!\n\n\n\nOne of the strengths of Julia is that you can use quite a few modern tools like AD. However, you need to learn Julia a bit to use everything efficiently. Here, we concentrate on ForwardDiff.jl.\nusing ForwardDiff\nusing Statistics\n\nfunction foo0(x)\n    vector = zeros(typeof(x), 100)\n    foo0!(vector, x)\nend\n\nfunction foo0!(vector, scalar)\n    for i in eachindex(vector)\n        vector[i] = atan(i * scalar) / π\n    end\n\n    for _ in 1:1000\n        for i in eachindex(vector)\n            vector[i] = cos(vector[i])\n        end\n    end\n\n    return mean(vector)\nend\n\nlet x = 2 * π\n    @show foo0(x)\n    @show ForwardDiff.derivative(foo0, x)\n    @benchmark foo0($x)\nend\nThe code above is basically a fixed point iteration. By doing some analysis, one could figure out that it should converge to the solution x of x == cos(x), the “Dottie number”. See https://en.wikipedia.org/wiki/Dottie_number\nusing SimpleNonlinearSolve\n\nfunction dottie_number()\n    f(u, p) = cos(u) - u\n    bounds = (0.0, 2.0)\n    prob = IntervalNonlinearProblem(f, bounds)\n    sol = solve(prob, ITP())\n    return sol.u\nend\n\ndottie_number()\nNext, we introduce a custom struct. Can you spot the problems?\nstruct MyData1\n    scalar\n    vector\nend\n\nfunction foo1(x)\n    data = MyData1(x, zeros(typeof(x), 100))\n    foo1!(data)\nend\n\nfunction foo1!(data)\n    (; scalar, vector) = data\n\n    for i in eachindex(vector)\n        vector[i] = atan(i * scalar) / π\n    end\n\n    for _ in 1:1000\n        for i in eachindex(vector)\n            vector[i] = cos(vector[i])\n        end\n    end\n\n    return mean(vector)\nend\n\nlet x = 2 * π\n    @show foo1(x)\n    @show ForwardDiff.derivative(foo1, x)\n    @benchmark foo1($x)\nend\nWe can fix type instabilities by introducing types explicitly. But we lose the possibility to use AD this way!\nstruct MyData2\n    scalar::Float64\n    vector::Vector{Float64}\nend\n\nfunction foo2(x)\n    data = MyData2(x, zeros(typeof(x), 100))\n    foo1!(data)\nend\n\nlet x = 2 * π\n    @show foo2(x)\n    @benchmark foo2($x)\nend\n\nlet x = 2 * π\n    ForwardDiff.derivative(foo2, x)\nend\nThus, we need parametric types!\nstruct MyData3{T}\n    scalar::T\n    vector::Vector{T}\nend\n\nfunction foo3(x)\n    data = MyData3(x, zeros(typeof(x), 100))\n    foo1!(data)\nend\n\nlet x = 2 * π\n    @show foo3(x)\n    @show ForwardDiff.derivative(foo3, x)\n    @benchmark foo3($x)\nend\n\nThis page was generated using Literate.jl."
  },
  {
    "objectID": "material/5_fri/optimizing_julia/optimizing_julia.html#basics",
    "href": "material/5_fri/optimizing_julia/optimizing_julia.html#basics",
    "title": "Optimizing Julia code",
    "section": "",
    "text": "The Julia manual contains basic information about performance. In particular, you should be familiar with\n\nhttps://docs.julialang.org/en/v1/manual/performance-tips/\nhttps://docs.julialang.org/en/v1/manual/style-guide/\n\nif you care about performance."
  },
  {
    "objectID": "material/5_fri/optimizing_julia/optimizing_julia.html#example-a-linear-advection-simulation",
    "href": "material/5_fri/optimizing_julia/optimizing_julia.html#example-a-linear-advection-simulation",
    "title": "Optimizing Julia code",
    "section": "",
    "text": "This is a classical partial differential equation (PDE) simulation setup. If you are not familiar with it, just ignore what’s going on - but we need an example. This one is similar to several problematic cases I have seen in practice.\nFirst, we generate initial data and store it in a file.\nusing HDF5\nx = range(-1.0, 1.0, length = 1000)\ndx = step(x)\nh5open(\"initial_data.h5\", \"w\") do io\n    u0 = sinpi.(x)\n    write_dataset(io, \"x\", collect(x))\n    write_dataset(io, \"u0\", u0)\nend\nNext, we write our simulation code as a function - as we have learned from the performance tips!\nfunction simulate()\n    x, u0 = h5open(\"initial_data.h5\", \"r\") do io\n        read_dataset(io, \"x\"), read_dataset(io, \"u0\")\n    end\n\n    t = 0\n    u = u0\n    while t &lt; t_end\n        u = u + dt * rhs(u)\n        t = t + dt\n    end\n\n    return t, x, u, u0\nend\n\nfunction rhs(u)\n    du = similar(u)\n    for i in eachindex(u)\n        im1 = i == firstindex(u) ? lastindex(u) : (i - 1)\n        du[i] = -(u[i] - u[im1]) / dx\n    end\n    return du\nend\nNow, we can define our parameters, run a simulation, and plot the results.\nusing Plots, LaTeXStrings\n\nt_end = 2.5\ndt = 0.9 * dx\nt, x, u, u0 = simulate()\nplot(x, u0; label = L\"u_0\", xguide = L\"x\")\nplot!(x, u; label = L\"u\")\nMaybe you can already spot problems in the code above. Anyway, before you begin optimizing some code, you should test it and make sure it’s correct. Let’s assume this is the case here. You should write tests making sure that the code continues to work as expected while we optimize it. We will not do this here right now."
  },
  {
    "objectID": "material/5_fri/optimizing_julia/optimizing_julia.html#profiling",
    "href": "material/5_fri/optimizing_julia/optimizing_julia.html#profiling",
    "title": "Optimizing Julia code",
    "section": "",
    "text": "First, we need to measure the performance of our code to see whether it’s already reasonable. For this, you can use @time - or better BenchmarkTools.jl.\nusing BenchmarkTools\n@benchmark simulate()\nThis shows quite a lot of allocations - typically a bad sign if you are working with numerical simulations.\nThere are also profiling tools available in Julia. Some of them are already loaded in the Visual Studio Code extension for Julia. If you prefer working in the REPL, you can install ProfileView.jl (@profview simulate()) and PProf.jl (pprof() after creating a profile via @profview).\n@profview simulate()\nTask: Optimize the code!"
  },
  {
    "objectID": "material/5_fri/optimizing_julia/optimizing_julia.html#introduction-to-generic-julia-code-and-ad",
    "href": "material/5_fri/optimizing_julia/optimizing_julia.html#introduction-to-generic-julia-code-and-ad",
    "title": "Optimizing Julia code",
    "section": "",
    "text": "One of the strengths of Julia is that you can use quite a few modern tools like AD. However, you need to learn Julia a bit to use everything efficiently. Here, we concentrate on ForwardDiff.jl.\nusing ForwardDiff\nusing Statistics\n\nfunction foo0(x)\n    vector = zeros(typeof(x), 100)\n    foo0!(vector, x)\nend\n\nfunction foo0!(vector, scalar)\n    for i in eachindex(vector)\n        vector[i] = atan(i * scalar) / π\n    end\n\n    for _ in 1:1000\n        for i in eachindex(vector)\n            vector[i] = cos(vector[i])\n        end\n    end\n\n    return mean(vector)\nend\n\nlet x = 2 * π\n    @show foo0(x)\n    @show ForwardDiff.derivative(foo0, x)\n    @benchmark foo0($x)\nend\nThe code above is basically a fixed point iteration. By doing some analysis, one could figure out that it should converge to the solution x of x == cos(x), the “Dottie number”. See https://en.wikipedia.org/wiki/Dottie_number\nusing SimpleNonlinearSolve\n\nfunction dottie_number()\n    f(u, p) = cos(u) - u\n    bounds = (0.0, 2.0)\n    prob = IntervalNonlinearProblem(f, bounds)\n    sol = solve(prob, ITP())\n    return sol.u\nend\n\ndottie_number()\nNext, we introduce a custom struct. Can you spot the problems?\nstruct MyData1\n    scalar\n    vector\nend\n\nfunction foo1(x)\n    data = MyData1(x, zeros(typeof(x), 100))\n    foo1!(data)\nend\n\nfunction foo1!(data)\n    (; scalar, vector) = data\n\n    for i in eachindex(vector)\n        vector[i] = atan(i * scalar) / π\n    end\n\n    for _ in 1:1000\n        for i in eachindex(vector)\n            vector[i] = cos(vector[i])\n        end\n    end\n\n    return mean(vector)\nend\n\nlet x = 2 * π\n    @show foo1(x)\n    @show ForwardDiff.derivative(foo1, x)\n    @benchmark foo1($x)\nend\nWe can fix type instabilities by introducing types explicitly. But we lose the possibility to use AD this way!\nstruct MyData2\n    scalar::Float64\n    vector::Vector{Float64}\nend\n\nfunction foo2(x)\n    data = MyData2(x, zeros(typeof(x), 100))\n    foo1!(data)\nend\n\nlet x = 2 * π\n    @show foo2(x)\n    @benchmark foo2($x)\nend\n\nlet x = 2 * π\n    ForwardDiff.derivative(foo2, x)\nend\nThus, we need parametric types!\nstruct MyData3{T}\n    scalar::T\n    vector::Vector{T}\nend\n\nfunction foo3(x)\n    data = MyData3(x, zeros(typeof(x), 100))\n    foo1!(data)\nend\n\nlet x = 2 * π\n    @show foo3(x)\n    @show ForwardDiff.derivative(foo3, x)\n    @benchmark foo3($x)\nend\n\nThis page was generated using Literate.jl."
  },
  {
    "objectID": "material/1_mon/why_julia/page.html",
    "href": "material/1_mon/why_julia/page.html",
    "title": "Why Julia?",
    "section": "",
    "text": "Why Julia?\nIntroduction talk from Hendrik Ranocha.\nPlease find the slides here (pdf)"
  },
  {
    "objectID": "material/1_mon/envs/tasks.html",
    "href": "material/1_mon/envs/tasks.html",
    "title": "Task",
    "section": "",
    "text": "Task\n\nCreate a new package MyStatsPackage using generate\nAdd your statistic_functions.jl & “include” it.\nExport all functions\nCreate a new environment in a separate folder and add the package.\nDoes using MyStatsPackage work now?\n\n\n\n\n\n\n\nYes!\n\n\n\n\n\n🎉 congratulations!\n\n\n\n\n\n\n\n\n\nNo!\n\n\n\n\n\nOh no, better check you activated the right environment - ask for help!\n\n\n\n\nGo back to your package environment. Now add a dependency (e.g. ProgressMeter.jl) and a compat-entry\nGo back to your project environment, has the dependency been updated?\n\n\n\n\n\n\n\nHint?\n\n\n\n\n\nShould you use resolve or instantiate?"
  },
  {
    "objectID": "material/1_mon/firststeps/firststeps_handout.html#getting-started",
    "href": "material/1_mon/firststeps/firststeps_handout.html#getting-started",
    "title": "First Steps",
    "section": "Getting started",
    "text": "Getting started\n\n\n\n\n\n\nTip\n\n\n\nThe julia manual is excellent!\n\n\nAt this point we assume that you have Julia 1.9 installed, VSCode language extension ready, and installed the VSCode Julia plugin. There are some more recommended settings in VSCode which are not necessary, but helpful.\nWe further recommend to not use the small “play” button on the top right (which opens a new julia process everytime you change something), but rather open a new Julia repl (ctrl+shift+p =&gt; &gt;Julia: Start Repl) which you keep open as long as possible.\n\n\n\n\n\n\nTip\n\n\n\nVSCode automatically loads the Revise.jl package, which screens all your actively loaded packages/files and updates the methods instances whenever it detects a change. This is quite similar to %autoreload 2 in ipython. If you use VSCode, you dont need to think about it, if you prefer a command line, you should put Revise.jl in your startup.jl file."
  },
  {
    "objectID": "material/1_mon/firststeps/firststeps_handout.html#syntax-differences-pythonrmatlab",
    "href": "material/1_mon/firststeps/firststeps_handout.html#syntax-differences-pythonrmatlab",
    "title": "First Steps",
    "section": "Syntax differences Python/R/MatLab",
    "text": "Syntax differences Python/R/MatLab\n\nControl Structures\nMatlab User? Syntax will be very familiar.\nR User? Forget about all the {} brackets.\nPython User? We don’t need no intendation, and we also have 1-index.\n1myarray = zeros(6)\n2for k = 1:length(myarray)\n    if iseven(k)\n3        myarray[k] = sum(myarray[1:k])\n    elseif k == 5\n41        myarray = myarray .- 1\n    else \n        myarray[k] = 5\n5    end\nend\n\n1\n\ninitialize a vector (check with typeof(myArray))\n\n2\n\nControl-Structure for-loop. 1-index!\n\n3\n\nMatLab: Notice the [ brackets to index Arrays!\n\n4\n\nPython/R: . always means elementwise\n\n5\n\nPython/R: end after each control sequence\n\n\n\n\nFunctions\n1function myfunction(a,b=123;keyword1=\"defaultkeyword\")\n    if keyword1 == \"defaultkeyword\"\n        c = a+b\n    else\n        c = a*b\n    end\n    return c\nend\n2methods(myfunction)\nmyfunction(0)\nmyfunction(1;keyword1 = \"notdefault\")\nmyfunction(0,5)\nmyfunction(0,5;keyword1 = \"notdefault\")\n\n1\n\neverything before the ; =&gt; positional, after =&gt; kwargs\n\n2\n\nList all methods with that function name - returns two functions, due to the b=123 optional positional argument\n\n\n\n\n\n\n\n\nTip\n\n\n\nTerminology function vs. method: Methods are instantiations of an abstract function\n\n\n anonym = (x,y) -&gt; x+y\n anonym(3,4)\nmyshortfunction(x) = x^2\nfunction mylongfunction(x)\n    return x^2\nend\nmyfunction(args...;kwargs...) = myotherfunction(newarg,args...;kwargs...)\n\n\nIn the beginning there was nothing\nnothing- but also NaN and also Missing.\nEach of those has a specific purpose, but most likely we will only need a = nothing and b = NaN.\nNote that NaN counts as a Float-Number, whereas nothing & missing does not.\n\nExcourse: splatting & slurping\nThink of it as unpacking / collecting something\na = [1,2,3]\n+(a)\n1+(a...)\n\n1\n\nequivalent to +(1,2,3)\n\n\n\n\nelementwise-function / broadcasting\nJulia is very neat in regards of applying functions elementwise (also called broadcasting).\n    a = [1,2,3,4]\n1    b = sqrt(a)\n2    c = sqrt.(a)\n\n1\n\nError - there is no method defined for the sqrt of a Vector\n\n2\n\nthe small . applies the function to all elements of the container a - this works as “expected”\n\n\n\n\n\n\n\n\nImportant\n\n\n\nBroadcasting is very powerful, as Julia can get a huge performance boost in chaining many operations, without requiring saving temporary arrays. For example:\n    a = [1,2,3,4,5]\n    b = [6,7,8,9,10]\n\n    c = (a.^2 .+ sqrt.(a) .+ log.(a.*b))./5\nIn many languages (Matlab, Python, R) you would need to do the following:\n1. temp1 = a.*b\n2. temp2 = log.(temp1)\n3. temp3 = a.^2\n4. temp4 = sqrt.(a)\n5. temp5 = temp3 .+ temp4\n6. temp6 = temp5 + temp2\n7. output = temp6./5\nThus, we need to allocate ~7x the memory of the vector (not at the same time though).\nIn Julia, the elementwise code above rather translates to:\n1    c = similar(a)\n    for k = 1:length(a)\n        c[k] = (a[k]^2 + sqrt(a[k]) + log(a[k]*b[k]))/5\n    end\n\n1\n\nFunction to initialize an undef array with the same size as a\n\n\nThe temp memory we need at each iteration is simply c[k]. And a nice sideeffect: By doing this, we get rid of any specialized “serialized” function, e.g. to do sum, or + or whatever. Those are typically the inbuilt C functions in Python/Matlab/R, that really speed up things. In Julia we do not need inbuilt functions for speed."
  },
  {
    "objectID": "material/1_mon/firststeps/firststeps_handout.html#linear-algebra",
    "href": "material/1_mon/firststeps/firststeps_handout.html#linear-algebra",
    "title": "First Steps",
    "section": "Linear Algebra",
    "text": "Linear Algebra\n1import LinearAlgebra\nimport LinearAlgebra: qr\n2using LinearAlgebra\n\n1\n\nRequires to write LinearAlgebra.QR(...) to access a function\n\n2\n\nLinearAlgebra is a Base package, and always available\n\n\n\n\n\n\n\n\nTip\n\n\n\nJulia typically recommends to use using PackageNames. Name-space polution is not a problem, as the package manager will never silently overwrite an already existing method - it will always ask the user to specify in those cases (different to R: shows a warning, or Python: just goes on with life as if nothing happened)\n\n\n1A = Matrix{Float64}(undef,11,22)\n2B = Array{Float64,2}(undef,22,33)\nqr(A*B)\n\n1\n\nequivalent to Array, as Matrix is a convenience type-alias for Array with 2 dimensions. Same thing for Vector.\n\n2\n\nthe 2 of {Float64,2} is not mandatory\n\n\nMuch more on Wednesday in the lecture LinearAlgebra!"
  },
  {
    "objectID": "material/1_mon/firststeps/firststeps_handout.html#style-conventions",
    "href": "material/1_mon/firststeps/firststeps_handout.html#style-conventions",
    "title": "First Steps",
    "section": "Style-conventions",
    "text": "Style-conventions\n\n\n\n\n\n\n\nvariables\nlowercase, lower_case\n\n\nTypes,Modules\nUpperCamelCase\n\n\nfunctions, macro\nlowercase\n\n\ninplace / side-effects\nendwith!()1"
  },
  {
    "objectID": "material/1_mon/firststeps/firststeps_handout.html#strings",
    "href": "material/1_mon/firststeps/firststeps_handout.html#strings",
    "title": "First Steps",
    "section": "Strings",
    "text": "Strings\n    character = 'a'\n    str = \"abc\"\n1    str[3]\n\n1\n\nreturns c\n\n\n\ncharacters\n1    'a':'f'\n2    collect('a':'f')\n3    join('a':'f')\n\n1\n\na StepRange between characters\n\n2\n\na Array{Chars}\n\n3\n\na String\n\n\n\n\nconcatenation\n    a = \"one\"\n    b = \"two\"\n1    ab = a * b\n\n1\n\nIndeed, * and not + - as plus implies from algebra that a+b == b+a which obviously is not true for string concatenation. But a*b !== b*a - at least for matrices.\n\n\n\n\nsubstrings\n    str = \"long string\"\n    substr = SubString(str, 1, 4)\n    whereis_str = findfirst(\"str\",str)"
  },
  {
    "objectID": "material/1_mon/firststeps/firststeps_handout.html#regexp",
    "href": "material/1_mon/firststeps/firststeps_handout.html#regexp",
    "title": "First Steps",
    "section": "regexp",
    "text": "regexp\n    str = \"any WORD written in CAPITAL?\"\n1    occursin(r\"[A-Z]+\", str)\n2    m = match(r\"[A-Z]+\",str)\n\n1\n\nReturns true. Note the small r before the r\"regular expression\" - nifty!\n\n2\n\nReturns a ::RegexMatch - access via m.match & m.offset (index) - or m.captures / m.offsets if you defined capture-groups"
  },
  {
    "objectID": "material/1_mon/firststeps/firststeps_handout.html#interpolation",
    "href": "material/1_mon/firststeps/firststeps_handout.html#interpolation",
    "title": "First Steps",
    "section": "Interpolation",
    "text": "Interpolation\n    a = 123\n    str = \"this is a: $a; this 2*a: $(2*a)\""
  },
  {
    "objectID": "material/1_mon/firststeps/firststeps_handout.html#scopes",
    "href": "material/1_mon/firststeps/firststeps_handout.html#scopes",
    "title": "First Steps",
    "section": "Scopes",
    "text": "Scopes\nAll things (excepts modules) are in local scope (in scripts)\na = 0\nfor k = 1:10\n    a = 1\nend\n1a\n\n1\n\na = 0! - in a script; but a = 1 in the REPL!\n\n\nVariables are in global scope in the REPL for debugging convenience\n\n\n\n\n\n\nTip\n\n\n\nPutting this code into a function automatically resolves this issue\n  function myfun()\n  a = 0\n    for k = 1:10\n        a = 1\n    end\n    a\n    return a\n  end\n  myfun()\n\n1\n\nreturns 1 now in both REPL and include(“myscript.jl”)\n\n\n\n\n\nexplicit global / local\na = 0\nglobal b\nb = 0\nfor k = 1:10\n    local a \n    global b\n    a = 1\n    b = 1\nend\n1a\n2b\n\n1\n\na = 0\n\n2\n\nb = 1\n\n\n\n\nModifying containers works in any case\na = zeros(10)\nfor k = 1:10\n    \n    a[k] = k\nend\n1a\n\n1\n\nThis works “correctly” in the REPL as well as in a script, because we modify the content of a, not a itself"
  },
  {
    "objectID": "material/1_mon/firststeps/firststeps_handout.html#types",
    "href": "material/1_mon/firststeps/firststeps_handout.html#types",
    "title": "First Steps",
    "section": "Types",
    "text": "Types\nTypes play a super important role in Julia for several main reasons:\n\nThe allow for specialization e.g. +(a::Int64,b::Float64) might have a different (faster?) implementation compared to +(a::Float64,b::Float64)\nThey allow for generalization using abstract types\nThey act as containers, structuring your programs and tools\n\nEverything in julia has a type! Check this out:\ntypeof(1)\ntypeof(1.0)\ntypeof(sum)\ntypeof([1])\ntypeof([(1,2),\"5\"])\n\nWe will discuss two types of types:\n\ncomposite types\nabstract types.\n\n\n\n\n\n\n\nClick me for even more types!\n\n\n\n\n\nThere is a third type, primitive type - but we will practically never use them Not much to say at this level, they are types like Float64. You could define your own one, e.g.\nprimitive type Float128 &lt;: AbstractFloat 128 end\nAnd there are two more, Singleton types and Parametric types - which (at least the latter), you might use at some point. But not in this tutorial.\n\n\n\n\ncomposite types\nYou can think of these types as containers for your variables, which allows you for specialization.\n    struct SimulationResults\n        parameters::Vector\n        results::Vector\n    end\n\n    s = SimulationResults([1,2,3],[5,6,7,8,9,10,NaN])\n\n   function print(s::SimulationResults)\n        println(\"The following simulation was run:\")\n        println(\"Parameters: \",s.parameters)\n        println(\"And we got results!\")\n        println(\"Results: \",s.results)\n    end\n\n    print(s)\n\n1    function SimulationResults(parameters)\n        results = run_simulation(parameters)\n        return SimulationResults(parameters,results)\n    end\n\n    function run_simulation(x)\n        return cumsum(repeat(x,2))\n    end\n\n    s = SimulationResults([1,2,3])\n    print(s)\n\n\n1\n\nin case not all fields are directly defined, we can provide an outer constructor (there are also inner constructors, but we will not discuss them here)\n\n\n\n\n\n\n\n\nWarning\n\n\n\nonce defined, a type-definition in the global scope of the REPL cannot be re-defined without restarting the julia REPL! This is annoying, there are some tricks arround it (e.g. defining the type in a module (see below), and then reloading the module)"
  },
  {
    "objectID": "material/1_mon/firststeps/firststeps_handout.html#modules",
    "href": "material/1_mon/firststeps/firststeps_handout.html#modules",
    "title": "First Steps",
    "section": "Modules",
    "text": "Modules\nmodule MyStatsPackage\n    include(\"src/statistic_functions.jl\")\n1    export SimulationResults\n    export rse_tstat\nend\n\nusing MyStatsPackage\n\n1\n\nThis makes the SimulationResults type immediately available after running using MyStatsPackage. To use the other “internal” functions, one would use MyStatsPackage.rse_sum.\n\n\n    import MyStatsPackage\n    \n    MyStatsPackage.rse_tstat(1:10)\n\n    import MyStatsPackage: rse_sum\n    rse_sum(1:10)"
  },
  {
    "objectID": "material/1_mon/firststeps/firststeps_handout.html#macros",
    "href": "material/1_mon/firststeps/firststeps_handout.html#macros",
    "title": "First Steps",
    "section": "Macros",
    "text": "Macros\nMacros allow to programmers to edit the actual code before it is run. We will pretty much just use them, without learning how they work.\n    @which cumsum\n    @which(cumsum)\n    a = \"123\"\n    @show a"
  },
  {
    "objectID": "material/1_mon/firststeps/firststeps_handout.html#debugging",
    "href": "material/1_mon/firststeps/firststeps_handout.html#debugging",
    "title": "First Steps",
    "section": "Debugging",
    "text": "Debugging\n\nDebug messages\n@debug \"my debug message\"\nENV[\"JULIA_DEBUG\"] = Main\nENV[\"JULIA_DEBUG\"] = MyPackage\n\n\nDebugger proper:\nCheatsheet for debugging\nIn most cases, @run myFunction(1,2,3) is sufficient."
  },
  {
    "objectID": "material/1_mon/firststeps/firststeps_handout.html#footnotes",
    "href": "material/1_mon/firststeps/firststeps_handout.html#footnotes",
    "title": "First Steps",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nA functionname ending with a ! indicates that inplace operations will occur / side-effects are possible. This is convention only, but in 99% of cases adopted↩︎"
  },
  {
    "objectID": "material/4_thu/parallel/Julia_Parallel_Distributed_2023_Stuttgart.html",
    "href": "material/4_thu/parallel/Julia_Parallel_Distributed_2023_Stuttgart.html",
    "title": "Parallel and Distributed Computing with Julia",
    "section": "",
    "text": "Przemysław Szufel\nBefore running Jupyter notebook set in Julia number of threads. This should be done before actually running the notebook() command. The number of threads can be also set up in Julia options in Visual Studio code (if this is used to run this notebook).\nprintln(\"Number of threads that your Julia is run: ## $(Threads.nthreads())\")\n\nNumber of threads that your Julia is run: ## 4\nusing BenchmarkTools, Distributed"
  },
  {
    "objectID": "material/4_thu/parallel/Julia_Parallel_Distributed_2023_Stuttgart.html#parallelize-via-single-instruction-multiple-data-simd",
    "href": "material/4_thu/parallel/Julia_Parallel_Distributed_2023_Stuttgart.html#parallelize-via-single-instruction-multiple-data-simd",
    "title": "Parallel and Distributed Computing with Julia",
    "section": "Parallelize via Single Instruction Multiple Data (SIMD)",
    "text": "Parallelize via Single Instruction Multiple Data (SIMD)\n\nfunction dot1(x, y)\n    s = 0.0\n    for i in 1:length(x)\n        @inbounds s += x[i]*y[i]\n    end\n    s\nend\n\ndot1 (generic function with 1 method)\n\n\n\nfunction dot2(x, y)\n    s = 0.0\n    @simd for i in 1:length(x)\n        @inbounds s += x[i]*y[i]\n    end\n    s\nend\n\ndot2 (generic function with 1 method)\n\n\n\nx = 100*rand(10000)\ny = 100*rand(10000);\n\n#res1 = @btime dot1($x, $y)\n#res2 = @btime dot2($x, $y)\n\n#println(res1)\n#println(res2)\n\n\nres1 =  dot1(x, y)\n\n2.491428520518866e7\n\n\n\nres2 =  dot2(x, y)\n\n2.491428520518861e7\n\n\n\nres1 == res2\n\nfalse\n\n\n\n@show res1 \n@show res2\n\nres1 = 2.491428520518866e7\nres2 = 2.491428520518861e7\n\n\n2.491428520518861e7"
  },
  {
    "objectID": "material/4_thu/parallel/Julia_Parallel_Distributed_2023_Stuttgart.html#green-threading",
    "href": "material/4_thu/parallel/Julia_Parallel_Distributed_2023_Stuttgart.html#green-threading",
    "title": "Parallel and Distributed Computing with Julia",
    "section": "Green threading",
    "text": "Green threading\n\n@time sleep(2)\n\n  2.009545 seconds (63 allocations: 1.625 KiB)\n\n\n\n@time t = @async sleep(2)\n\n  0.052863 seconds (10.22 k allocations: 646.190 KiB, 56.06% compilation time)\n\n\nTask (runnable) @0x000001fdbbb45f10\n\n\n\nt\n\nTask (runnable) @0x000001fdbbb45f10\n\n\n\nfunction dojob(i)\n    val = round(rand(), digits=2)\n    sleep(val)   # this could be external computations with I/O\n    i, val\nend\n\ndojob (generic function with 1 method)\n\n\n\nresult = Vector{Tuple{Int,Float64}}(undef, 8)\n\n8-element Vector{Tuple{Int64, Float64}}:\n (2189270652080, 1.081643418665e-311)\n (2189270652176, 1.0816434187123e-311)\n (2189270652272, 1.08164341876e-311)\n (2189270652368, 1.081643418807e-311)\n (2189270652464, 1.0816434188546e-311)\n (2189270652560, 1.081643418902e-311)\n (2189270652752, 1.081643418997e-311)\n (2189270652848, 1.0816434190443e-311)\n\n\n\n@time for i=1:8\n    result[i] = dojob(i)\nend\nresult\n\n  4.136902 seconds (1.19 k allocations: 73.610 KiB, 0.52% compilation time)\n\n\n8-element Vector{Tuple{Int64, Float64}}:\n (1, 0.65)\n (2, 0.31)\n (3, 0.75)\n (4, 0.3)\n (5, 0.67)\n (6, 0.64)\n (7, 0.25)\n (8, 0.46)\n\n\n\nresult = Vector{Tuple{Int,Float64}}(undef, 8);\n@time for i=1:8\n   @async result[i] = dojob(i)\nend\nresult\n\n  0.000174 seconds (85 allocations: 7.208 KiB)\n\n\n8-element Vector{Tuple{Int64, Float64}}:\n (2, 1.5e-323)\n (5, 8.0e-323)\n (18, 9.4e-323)\n (21, 1.2e-322)\n (25, 1.5e-322)\n (31, 1.6e-322)\n (33, 1.7e-322)\n (35, 1.9e-322)\n\n\n\nresult\n\n8-element Vector{Tuple{Int64, Float64}}:\n (2, 1.5e-323)\n (5, 8.0e-323)\n (18, 9.4e-323)\n (21, 1.2e-322)\n (25, 1.5e-322)\n (31, 1.6e-322)\n (33, 1.7e-322)\n (35, 1.9e-322)\n\n\n\nresult = Vector{Tuple{Int,Float64}}(undef, 8);\n@time @sync for i=1:8\n   @async result[i] = dojob(i)\nend\nresult\n\n  0.793057 seconds (2.71 k allocations: 170.346 KiB, 9.69% compilation time)\n\n\n8-element Vector{Tuple{Int64, Float64}}:\n (1, 0.1)\n (2, 0.91)\n (3, 0.71)\n (4, 0.72)\n (5, 0.63)\n (6, 0.05)\n (7, 0.01)\n (8, 0.76)\n\n\n\nProgramming a simple web server\nYou should be able to connect using the address http://localhost:9992/3+4\nTo stop web server click http://localhost:9992/stopme\n\nusing Sockets\nprintln(\"Starting the web server...\")\nserver = Sockets.listen(9992)\n\nStarting the web server...\n\n\nSockets.TCPServer(Base.Libc.WindowsRawSocket(0x00000000000003e4) active)\n\n\n\n@async begin\n    contt = Ref(true)\n    while contt[]\n        sock = Sockets.accept(server)\n        @async begin\n            data = readline(sock)\n            print(\"Got request:\\n\", data, \"\\n\")\n            cmd = split(data, \" \")[2][2:end]\n            println(sock, \"\\nHTTP/1.1 200 OK\\nContent-Type: text/html\\n\")\n            contt[] = contt[] && (!occursin(\"stopme\", data))\n            if contt[]\n                 println(sock, string(\"&lt;html&gt;&lt;body&gt;\", cmd, \"=\", \n                     eval(Meta.parse(cmd)), \"&lt;/body&gt;&lt;/html&gt;\"))\n            else\n                println(sock,\"&lt;html&gt;&lt;body&gt;stopping&lt;/body&gt;&lt;/html&gt;\")\n            end\n            close(sock)\n        end\n    end\n    println(\"Handling requests stopped\")\nend\n\nTask (runnable) @0x000001fdbb1eee90"
  },
  {
    "objectID": "material/4_thu/parallel/Julia_Parallel_Distributed_2023_Stuttgart.html#multithreading",
    "href": "material/4_thu/parallel/Julia_Parallel_Distributed_2023_Stuttgart.html#multithreading",
    "title": "Parallel and Distributed Computing with Julia",
    "section": "Multithreading",
    "text": "Multithreading\n\nThreads.nthreads()\n\n4\n\n\n\nfunction ssum(x)\n    r, c = size(x)\n    y = zeros(c)\n    for i in 1:c\n        for j in 1:r\n            @inbounds y[i] += x[j, i]\n        end\n    end\n    y\nend\n\nssum (generic function with 1 method)\n\n\n\nfunction tsum(x)\n    r, c = size(x)\n    y = zeros(c)\n    Threads.@threads for i in 1:c\n        for j in 1:r\n            @inbounds y[i] += x[j, i]\n        end\n    end\n    y\nend\n\ntsum (generic function with 1 method)\n\n\n\nx = rand(1000,10000);\n\n\n@time ssum(x)\n@time ssum(x);\n\n  0.048094 seconds (13.70 k allocations: 1.009 MiB, 62.07% compilation time)\n  0.017480 seconds (2 allocations: 78.172 KiB)\n\n\n\n@time tsum(x)\n@time tsum(x);\n\n  0.253809 seconds (41.53 k allocations: 2.933 MiB, 230.17% compilation time)\n  0.011025 seconds (35 allocations: 81.469 KiB)\n\n\n\nLocking mechanism for threads\n\nfunction f_bad()\n    x = 0\n    Threads.@threads for i in 1:10^6\n        x += 1\n    end\n    return x\nend\n\nf_bad (generic function with 1 method)\n\n\n\n@time f_bad()\n\n  0.168872 seconds (1.01 M allocations: 15.892 MiB, 90.33% compilation time)\n\n\n251079\n\n\n\nfunction f_add()\n    x = 0 \n    for i in 1:10^7\n        x += 1\n    end\n    x\nend\n@btime f_add()\n    \n\n  3.400 ns (0 allocations: 0 bytes)\n\n\n10000000\n\n\n\nfunction f_atomic()\n    x = Threads.Atomic{Int}(0)\n    Threads.@threads for i in 1:10^6\n        Threads.atomic_add!(x, 1)\n    end\n    return x[]\nend\nf_atomic()\n\n1000000\n\n\n\n\n\nfunction f_spin()\n    l = Threads.SpinLock()\n    x = 0\n    Threads.@threads for i in 1:10^6\n        Threads.lock(l) do\n            x += 1\n        end\n    end\n    return x\nend\n\nfunction f_reentrant()\n    l = ReentrantLock()\n    x = 0\n    Threads.@threads for i in 1:10^6\n        Threads.lock(l) do\n            x += 1\n        end\n    end\n    return x\nend\n\nf_reentrant (generic function with 1 method)\n\n\n\nusing DataFrames\nstats = DataFrame()\nfor f in [f_bad, f_atomic, f_spin, f_reentrant]\n    for i = 1:2\n        value, elapsedtime  = @timed f()\n        push!(stats, (f=string(f),i=i, value=value, timems=elapsedtime*1000))\n    end\nend\nprintln(stats)\n\n8×4 DataFrame\n Row │ f            i      value    timems   \n     │ String       Int64  Int64    Float64  \n─────┼───────────────────────────────────────\n   1 │ f_bad            1   507942   74.5333\n   2 │ f_bad            2   495913   50.5647\n   3 │ f_atomic         1  1000000   31.4744\n   4 │ f_atomic         2  1000000   33.8758\n   5 │ f_spin           1  1000000  693.007\n   6 │ f_spin           2  1000000  586.934\n   7 │ f_reentrant      1  1000000  847.592\n   8 │ f_reentrant      2  1000000  521.148"
  },
  {
    "objectID": "material/4_thu/parallel/Julia_Parallel_Distributed_2023_Stuttgart.html#multi-processing-and-distributed-computing",
    "href": "material/4_thu/parallel/Julia_Parallel_Distributed_2023_Stuttgart.html#multi-processing-and-distributed-computing",
    "title": "Parallel and Distributed Computing with Julia",
    "section": "Multi-processing and distributed computing",
    "text": "Multi-processing and distributed computing\n\nusing Distributed\n\nThis code adds 4 workers (and avoids adding more)\n\naddprocs(max(0, 5-nprocs()));\n\n\nworkers()\n\n4-element Vector{Int64}:\n 2\n 3\n 4\n 5\n\n\n\nfunction s_rand()\n    n = 10^4\n    x = 0.0\n    for i in 1:n\n        x += sum(rand(10^4))\n    end\n    x / n\nend\n \n@time s_rand()\n@time s_rand()\n\n  1.206733 seconds (20.00 k allocations: 763.397 MiB, 18.47% gc time)\n  1.018381 seconds (20.00 k allocations: 763.397 MiB, 17.30% gc time)\n\n\n5000.101742284563\n\n\n\nusing Distributed\n \n \nfunction p_rand()\n    n = 10^4\n    x = @distributed (+) for i in 1:n\n        #line\n        # but the last line will be aggregated\n        sum(rand(10^4))\n    end\n    x / n\nend\n\n@time p_rand()\n@time p_rand()\n\n  7.204575 seconds (508.98 k allocations: 33.710 MiB, 24.34% compilation time)\n  0.784540 seconds (564 allocations: 34.305 KiB)\n\n\n4999.629326079839\n\n\n\nworkers()'\n\n1×4 adjoint(::Vector{Int64}) with eltype Int64:\n 2  3  4  5\n\n\n\nfetch(@spawnat 3 4+3)\n\n7\n\n\n\n@everywhere function f() \n    println(\"I am on worker \", myid())\n    rand()\nend\nf()\n\nI am on worker 1\n\n\n0.37079910289627693\n\n\n\nfetch(@spawnat 4 f())\n\n      From worker 4:    I am on worker 4\n\n\n0.22025454198281003\n\n\n\nvec(collect(Iterators.product(1:4, 1:5)))\n        \n\n20-element Vector{Tuple{Int64, Int64}}:\n (1, 1)\n (2, 1)\n (3, 1)\n (4, 1)\n (1, 2)\n (2, 2)\n (3, 2)\n (4, 2)\n (1, 3)\n (2, 3)\n (3, 3)\n (4, 3)\n (1, 4)\n (2, 4)\n (3, 4)\n (4, 4)\n (1, 5)\n (2, 5)\n (3, 5)\n (4, 5)\n\n\n\nusing Distributed\n@everywhere using Pkg\n@everywhere Pkg.activate(\".\")\n@everywhere using Distributed, Random, DataFrames\n\n@everywhere function calc(x, y)\n    2x + y\nend\n\n@everywhere function init_worker()    \n   Random.seed!(myid())\n    # readding CSV file\nend\n\n@sync for wid in workers()\n    @async fetch(@spawnat wid init_worker())\nend\n\n      From worker 5:      Activating project at `C:\\AAABIBLIOTEKA\\MIT_Boston\\Stuttgart`\n      From worker 3:      Activating project at `C:\\AAABIBLIOTEKA\\MIT_Boston\\Stuttgart`\n      From worker 4:      Activating project at `C:\\AAABIBLIOTEKA\\MIT_Boston\\Stuttgart`\n      From worker 2:      Activating project at `C:\\AAABIBLIOTEKA\\MIT_Boston\\Stuttgart`\n\n\n  Activating project at `C:\\AAABIBLIOTEKA\\MIT_Boston\\Stuttgart`\n\n\nTypically results are collected to a DataFrame\n\ndata = @distributed (append!) for (i, j) = vec(collect(Iterators.product(1:4, 1:5)))\n    a = rand(1:499)\n    b = rand(1:9)*1000\n    c = calc(a, b)\n    DataFrame(;i,j,a,b,c,procid = myid())\nend\n\n20×6 DataFrame\n\n\n\nRow\ni\nj\na\nb\nc\nprocid\n\n\n\nInt64\nInt64\nInt64\nInt64\nInt64\nInt64\n\n\n\n\n1\n1\n1\n143\n9000\n9286\n2\n\n\n2\n2\n1\n291\n4000\n4582\n2\n\n\n3\n3\n1\n320\n8000\n8640\n2\n\n\n4\n4\n1\n377\n3000\n3754\n2\n\n\n5\n1\n2\n30\n7000\n7060\n2\n\n\n6\n2\n2\n351\n3000\n3702\n3\n\n\n7\n3\n2\n118\n8000\n8236\n3\n\n\n8\n4\n2\n415\n9000\n9830\n3\n\n\n9\n1\n3\n397\n1000\n1794\n3\n\n\n10\n2\n3\n260\n9000\n9520\n3\n\n\n11\n3\n3\n132\n8000\n8264\n4\n\n\n12\n4\n3\n420\n1000\n1840\n4\n\n\n13\n1\n4\n304\n4000\n4608\n4\n\n\n14\n2\n4\n112\n3000\n3224\n4\n\n\n15\n3\n4\n349\n6000\n6698\n4\n\n\n16\n4\n4\n466\n8000\n8932\n5\n\n\n17\n1\n5\n413\n6000\n6826\n5\n\n\n18\n2\n5\n426\n5000\n5852\n5\n\n\n19\n3\n5\n326\n1000\n1652\n5\n\n\n20\n4\n5\n481\n8000\n8962\n5"
  },
  {
    "objectID": "material/4_thu/parallel/Julia_Parallel_Distributed_2023_Stuttgart.html#advanced-interprocess-communication---cellular-automaton-example",
    "href": "material/4_thu/parallel/Julia_Parallel_Distributed_2023_Stuttgart.html#advanced-interprocess-communication---cellular-automaton-example",
    "title": "Parallel and Distributed Computing with Julia",
    "section": "Advanced Interprocess communication - cellular automaton example",
    "text": "Advanced Interprocess communication - cellular automaton example\n\nusing Distributed\n@everywhere using ParallelDataTransfer, Distributed\n\n\n@everywhere function rule30()\n    lastv = Main.caa[1]\n    for i in 2:(length(Main.caa)-1)\n        current = Main.caa[i]\n        Main.caa[i] = xor(lastv, Main.caa[i] || Main.caa[i+1])\n        lastv = current\n    end\nend\n\n\n@everywhere function getcaa()\n    Main.caa\nend\n@everywhere function getsetborder()\n    #println(myid(),\"gs\");flush(stdout)\n    Main.caa[1] = (@fetchfrom Main.neighbours[1] getcaa()[15+1])\n    #println(myid(),\"gs1\");flush(stdout)\n    Main.caa[end] = (@fetchfrom Main.neighbours[2] getcaa()[2])\n    #println(myid(),\"gse\");flush(stdout)\nend\n\nfunction printsimdist(workers::Array{Int})\n    for w in workers\n        dat = @fetchfrom w caa\n        for b in dat[2:end-1]\n            print(b ? \"#\" : \" \")\n        end\n    end\n    println()\n    flush(stdout)\nend\n\nfunction runca(steps::Int, visualize::Bool)\n    @sync for w in workers()\n        @async @fetchfrom w fill!(caa, false)\n    end\n    @fetchfrom wks[Int(nwks/2)+1] caa[2]=true\n    visualize && printsimdist(workers())\n    for i in 1:steps\n        @sync for w in workers()\n            @async @fetchfrom w getsetborder()\n        end\n        @sync for w in workers()\n            @async @fetchfrom w rule30()\n        end\n        visualize && printsimdist(workers())\n    end\nend\n\n\nrunca (generic function with 1 method)\n\n\n\nwks = workers()\nnwks = length(wks)\nfor i in 1:nwks\n    sendto(wks[i], neighbours = (i==1 ? wks[nwks] : wks[i-1],\n                                i==nwks ? wks[1] : wks[i+1]))\n    fetch(@defineat wks[i] const caa = zeros(Bool, 15+2));\nend\n\nrunca(20,true)\n\n                              #                             \n                             ###                            \n                            ##  #                           \n                           ## ####                          \n                          ##  #   #                         \n                         ## #### ###                        \n                        ##  #    #  #                       \n                       ## ####  ######                      \n                      ##  #   ###     #                     \n                     ## #### ##  #   ###                    \n                    ##  #    # #### ##  #                   \n                   ## ####  ## #    # ####                  \n                  ##  #   ###  ##  ## #   #                 \n                 ## #### ##  ### ###  ## ###                \n                ##  #    # ###   #  ###  #  #               \n               ## ####  ## #  # #####  #######              \n              ##  #   ###  #### #    ###      #             \n             ## #### ##  ###    ##  ##  #    ###            \n            ##  #    # ###  #  ## ### ####  ##  #           \n           ## ####  ## #  ######  #   #   ### ####          \n          ##  #   ###  ####     #### ### ##   #   #"
  },
  {
    "objectID": "material/4_thu/sim/slides.html#pre-registration",
    "href": "material/4_thu/sim/slides.html#pre-registration",
    "title": "Fake It Until You Make It",
    "section": "Pre-Registration",
    "text": "Pre-Registration\n\nPrep analysis scripts for pre-registration"
  },
  {
    "objectID": "material/4_thu/sim/slides.html#power",
    "href": "material/4_thu/sim/slides.html#power",
    "title": "Fake It Until You Make It",
    "section": "Power",
    "text": "Power\n\nCalculate power and sensitivity for analyses that don’t have empirical methods"
  },
  {
    "objectID": "material/4_thu/sim/slides.html#reproducible-examples",
    "href": "material/4_thu/sim/slides.html#reproducible-examples",
    "title": "Fake It Until You Make It",
    "section": "Reproducible Examples",
    "text": "Reproducible Examples\n\n\nCreate reproducible examples when your data are too big or confidential to share"
  },
  {
    "objectID": "material/4_thu/sim/slides.html#enhance-understanding",
    "href": "material/4_thu/sim/slides.html#enhance-understanding",
    "title": "Fake It Until You Make It",
    "section": "Enhance Understanding",
    "text": "Enhance Understanding\n\n\nEnhance your understanding of statistical concepts"
  },
  {
    "objectID": "material/4_thu/sim/slides.html#teaching-data",
    "href": "material/4_thu/sim/slides.html#teaching-data",
    "title": "Fake It Until You Make It",
    "section": "Teaching Data",
    "text": "Teaching Data\n\nCreate demo data for teaching and tutorials"
  },
  {
    "objectID": "material/4_thu/sim/slides.html#plot",
    "href": "material/4_thu/sim/slides.html#plot",
    "title": "Fake It Until You Make It",
    "section": "Plot",
    "text": "Plot"
  },
  {
    "objectID": "material/4_thu/sim/slides.html#data",
    "href": "material/4_thu/sim/slides.html#data",
    "title": "Fake It Until You Make It",
    "section": "Data",
    "text": "Data"
  },
  {
    "objectID": "material/4_thu/sim/slides.html#code",
    "href": "material/4_thu/sim/slides.html#code",
    "title": "Fake It Until You Make It",
    "section": "Code",
    "text": "Code"
  },
  {
    "objectID": "material/2_tue/testing/slides.html",
    "href": "material/2_tue/testing/slides.html",
    "title": "Learning Goals",
    "section": "",
    "text": "Get to know a few common terms of testing\nWork with the Julia unit testing package Test.jl\n\nMaterial is taken and modified from the SSE lecture, which builds partly on the py-rse book, and from the Test.jl docs."
  },
  {
    "objectID": "material/2_tue/testing/slides.html#what-is-testing",
    "href": "material/2_tue/testing/slides.html#what-is-testing",
    "title": "Learning Goals",
    "section": "What is Testing?",
    "text": "What is Testing?\n\nSmelling old milk before using it\nA way to determine if a software is not producing reliable results and if so, what is the reason\nManual testing vs. automated testing"
  },
  {
    "objectID": "material/2_tue/testing/slides.html#why-should-you-test-your-software",
    "href": "material/2_tue/testing/slides.html#why-should-you-test-your-software",
    "title": "Learning Goals",
    "section": "Why Should you Test your Software?",
    "text": "Why Should you Test your Software?\n\nImprove software reliability and reproducibility\nMake sure that changes (bugfixes, new features) do not affect other parts of software\nGenerally all software is better off being tested regularly. Possible exceptions are very small codes with single users.\nEnsure that a released version of a software actually works."
  },
  {
    "objectID": "material/2_tue/testing/slides.html#some-ways-to-test-software",
    "href": "material/2_tue/testing/slides.html#some-ways-to-test-software",
    "title": "Learning Goals",
    "section": "Some Ways to Test Software",
    "text": "Some Ways to Test Software\n\nAssertions\nUnit testing\nIntegration testing\nRegression testing"
  },
  {
    "objectID": "material/2_tue/testing/slides.html#assertions",
    "href": "material/2_tue/testing/slides.html#assertions",
    "title": "Learning Goals",
    "section": "Assertions",
    "text": "Assertions\n@assert condition \"message\"\n\nPrinciple of defensive programming\nNothing happens when an assertion is true; throws error when false.\nTypes of assertion statements:\n\nPrecondition\nPostcondition\nInvariant\n\nA basic but powerful tool to test a software on-the-go"
  },
  {
    "objectID": "material/2_tue/testing/slides.html#unit-testing",
    "href": "material/2_tue/testing/slides.html#unit-testing",
    "title": "Learning Goals",
    "section": "Unit Testing",
    "text": "Unit Testing\n\nCatching errors with assertions is good but preventing them is better.\nA unit is a single function in one situation.\n\nA situation is one amongst many possible variations of input parameters.\n\nUser creates the expected result manually.\nActual result is compared to the expected result by @test."
  },
  {
    "objectID": "material/2_tue/testing/slides.html#integration-testing",
    "href": "material/2_tue/testing/slides.html#integration-testing",
    "title": "Learning Goals",
    "section": "Integration Testing",
    "text": "Integration Testing\n\nTest whether several units work in conjunction.\nIntegrate units and test them together in an integration test.\nOften more complicated than a unit test and gives higher test coverage."
  },
  {
    "objectID": "material/2_tue/testing/slides.html#regression-testing",
    "href": "material/2_tue/testing/slides.html#regression-testing",
    "title": "Learning Goals",
    "section": "Regression Testing",
    "text": "Regression Testing\n\nGenerating an expected result is not possible in some situations.\nCompare the current actual result with a previous actual result.\nNo guarantee that the current actual result is correct.\nRisk of a bug being carried over indefinitely.\nMain purpose is to identify changes in the current state of the code with respect to a past state."
  },
  {
    "objectID": "material/2_tue/testing/slides.html#setup-of-test.jl",
    "href": "material/2_tue/testing/slides.html#setup-of-test.jl",
    "title": "Learning Goals",
    "section": "Setup of Test.jl",
    "text": "Setup of Test.jl\n\nStandardized folder structure:\n├── Manifest.toml\n├── Project.toml\n├── src/\n└── test\n    ├── Manifest.toml\n    ├── Project.toml\n    ├── runtests.jl\n    └── setup.jl\nSingular test vs plural runtests.jl\nsetup.jl for all using XYZ statements, included in runtests.jl\nAdditional packages in [extra] section of ./Project.toml or in new ./test/Project.toml\n\nIn case of the latter: Do not add the package itself to the ./test/Project.toml\n\nRun: ]test when root project is activated"
  },
  {
    "objectID": "material/2_tue/testing/slides.html#implement-and-structure-tests",
    "href": "material/2_tue/testing/slides.html#implement-and-structure-tests",
    "title": "Learning Goals",
    "section": "Implement and Structure Tests",
    "text": "Implement and Structure Tests\n\n@test expr: Test whether expression expr is true\n@test expr broken=true: Explicitly mark test as broken\n@test_throws exception expr: Test whether expression expr throws exception (test unhappy path)\njulia&gt; @test_throws DimensionMismatch [1, 2, 3] + [1, 2]\nTest Passed\n      Thrown: DimensionMismatch\n@testset: Structure tests\n@testset \"trigonometric identities\" begin\n    θ = 2/3*π\n    @test sin(-θ) ≈ -sin(θ)\n    @test cos(-θ) ≈ cos(θ)\nend;\n@testset for ... end: Test in loop"
  },
  {
    "objectID": "material/2_tue/testing/slides.html#further-reading-and-watching",
    "href": "material/2_tue/testing/slides.html#further-reading-and-watching",
    "title": "Learning Goals",
    "section": "Further Reading and Watching",
    "text": "Further Reading and Watching\n\nResearch Software Engineering with Python - Chapter 11: Testing Software\nHiRSE-Summer of Testing Part 2b: “Testing with Julia” by Nils Niggemann\nOfficial documentation of Test.jl"
  },
  {
    "objectID": "material/2_tue/git/tasks.html",
    "href": "material/2_tue/git/tasks.html",
    "title": "Tasks",
    "section": "",
    "text": "Tasks\n\nWork with any forge that you like and create a user account (we strongly recommend GitHub since we will need it later again).\nPush your package MyStatsPackage to a remote repository.\nAdd a function printOwner to the package through a pull request. The function should print your (GitHub) user name (hard-coded).\nStart a new Julia environment and use your package through its url: ]add https://github.com/[username]/MyStatsPackage.\nNow use the package from somebody else in the classroom instead and verify with printOwner that you use the correct package.\nFork this other package and contribute a function printContributor to it via a PR. Get a review and get it merged.\nAdd more functions to other packages of classmates that print funny things, but always ensure a linear history."
  },
  {
    "objectID": "material/2_tue/git/slides.html",
    "href": "material/2_tue/git/slides.html",
    "title": "Learning Goals",
    "section": "",
    "text": "Refresh and organize students’ existing knowledge on Git (learn how to learn more).\nStudents can explain difference between merge and rebase and when to use what.\nHow to use Git workflows to organize research software development in a team.\nGet to know a few useful GitHub/GitLab standards and a few helpful tools.\nGet to know a few rules on good commit messages.\n\nMaterial is taken and modified from the SSE lecture, which builds partly on the py-rse book."
  },
  {
    "objectID": "material/2_tue/git/slides.html#why-do-we-need-version-control",
    "href": "material/2_tue/git/slides.html#why-do-we-need-version-control",
    "title": "Learning Goals",
    "section": "Why Do We Need Version Control?",
    "text": "Why Do We Need Version Control?\nVersion control …\n\ntracks changes to files and helps people share those changes with each other.\n\nCould also be done via email / Google Docs / …, but not as accurately and efficiently\n\nwas originally developed for software development, but today cornerstone of reproducible research\n\n\n“If you can’t git diff a file format, it’s broken.”"
  },
  {
    "objectID": "material/2_tue/git/slides.html#how-does-version-control-work",
    "href": "material/2_tue/git/slides.html#how-does-version-control-work",
    "title": "Learning Goals",
    "section": "How Does Version Control Work?",
    "text": "How Does Version Control Work?\n\nmaster (or main) copy of code in repository, can’t edit directly\nInstead: check out a working copy of code, edit, commit changes back\nRepository records complete revision history\n\nYou can go back in time\nIt’s clear who did what when"
  },
  {
    "objectID": "material/2_tue/git/slides.html#the-alternative-a-story-told-in-file-names",
    "href": "material/2_tue/git/slides.html#the-alternative-a-story-told-in-file-names",
    "title": "Learning Goals",
    "section": "The Alternative: A Story Told in File Names",
    "text": "The Alternative: A Story Told in File Names\n\nhttp://phdcomics.com/comics/archive/phd052810s.gif"
  },
  {
    "objectID": "material/2_tue/git/slides.html#a-very-short-history-of-version-control-i",
    "href": "material/2_tue/git/slides.html#a-very-short-history-of-version-control-i",
    "title": "Learning Goals",
    "section": "A Very Short History of Version Control I",
    "text": "A Very Short History of Version Control I\nThe old centralized variants:\n\n1982: RCS (Revision Control System), operates on single files\n1986 (release in 1990): CVS (Concurrent Versions System), front end of RCS, operates on whole projects\n1994: VSS (Microsoft Visual SourceSafe)\n2000: SVN (Apache Subversion), mostly compatible successor of CVS, still used today"
  },
  {
    "objectID": "material/2_tue/git/slides.html#a-very-short-history-of-version-control-ii",
    "href": "material/2_tue/git/slides.html#a-very-short-history-of-version-control-ii",
    "title": "Learning Goals",
    "section": "A Very Short History of Version Control II",
    "text": "A Very Short History of Version Control II\nDistributed version control:\n\nBesides remote master version, also local copy of repository\nMore memory required, but much better performance\nFor a long time: highly fragmented market\n\n2000: BitKeeper (originally proprietary software)\n2005: Mercurial\n2005: Git\nA few more\n\n\nLearn more: Podcast All Things Git: History of VC"
  },
  {
    "objectID": "material/2_tue/git/slides.html#the-only-standard-today-git",
    "href": "material/2_tue/git/slides.html#the-only-standard-today-git",
    "title": "Learning Goals",
    "section": "The Only Standard Today: Git",
    "text": "The Only Standard Today: Git\nNo longer a fragmented market, there is nearly only Git today:\n\nStackoverflow developer survey 2021: &gt; “Over 90% of respondents use Git, suggesting that it is a fundamental tool to being a developer.”\nIs this good or bad?"
  },
  {
    "objectID": "material/2_tue/git/slides.html#more-facts-on-git",
    "href": "material/2_tue/git/slides.html#more-facts-on-git",
    "title": "Learning Goals",
    "section": "More Facts on Git",
    "text": "More Facts on Git\n\nGit itself is open-source: GPL license\nSource code on GitHub, contributions are a bit more complicated than a simple PR\nWritten mainly in C\nStarted by Linus Torvalds, core maintainer since later 2005: Junio Hamano\nGit (the version control software) vs. git (the command line interface)"
  },
  {
    "objectID": "material/2_tue/git/slides.html#forges",
    "href": "material/2_tue/git/slides.html#forges",
    "title": "Learning Goals",
    "section": "Forges",
    "text": "Forges\nThere is a difference between Git and hosting services (forges):\n\nGitHub\nGitLab, open-source, hosted e.g. at IPVS\nBitbucket\nSourceForge\nmany more\noften, more than just hosting, also DevOps"
  },
  {
    "objectID": "material/2_tue/git/slides.html#expert-level-poll",
    "href": "material/2_tue/git/slides.html#expert-level-poll",
    "title": "Learning Goals",
    "section": "Expert level poll",
    "text": "Expert level poll\nWhich level do you have?\n\nBeginner: hardly ever used Git\nUser: pull, commit, push, status, diff\nDeveloper: fork, branch, merge, checkout\nMaintainer: rebase, squash, cherry-pick, bisect\nOwner: submodules"
  },
  {
    "objectID": "material/2_tue/git/slides.html#overview",
    "href": "material/2_tue/git/slides.html#overview",
    "title": "Learning Goals",
    "section": "Overview",
    "text": "Overview\n\nGit overview picture from py-rse"
  },
  {
    "objectID": "material/2_tue/git/slides.html#demo",
    "href": "material/2_tue/git/slides.html#demo",
    "title": "Learning Goals",
    "section": "Demo",
    "text": "Demo\n\ngit --help, git commit --help\nincomplete statement git comm\nThere is not the one solution how to do things with Git. I simply show what I typically use.\nDon’t use a client if you don’t understand the command line git\n\nLook at GitHub\n\n\npreCICE repository\ndefault branch develop\nfork -&gt; my fork\n\n\nWorking directory:\n\n\nZSH shell shows git branches\ngit remote -v (I have upstream, myfork, …)\nmention difference between ssh and https (also see GitHub)\nget newest changes git pull upstream develop\ngit log -&gt; I use special format, see ~/.gitconfig,\ncheck log on GitHub; explain short hash\ngit branch\ngit branch add-demo-feature\ngit checkout add-demo-feature\n\n\nFirst commit\n\n\ngit status -&gt; always tells you what you can do\nvi src/action/Action.hpp -&gt; add #include \"MagicHeader.hpp\"\ngit diff, git diff src/com/Action.hpp, git diff --color-words\ngit status, git add, git status\ngit commit -&gt; “Include MagicHeader in Action.hpp”\ngit status, git log, git log -p, git show\n\n\nChange or revert things\n\n\nI forgot to add sth: git reset --soft HEAD~1, git status\ngit diff, git diff HEAD because already staged\ngit log\ngit commit\nactually all that is nonsense: git reset --hard HEAD~1\nmodify again, all nonsense before committing: git checkout src/action/Action.hpp\n\n\nStash\n\n\nwhile working on unfinished feature, I need to change / test this other thing quickly, too lazy for commits / branches\ngit stash\ngit stash pop\n\n\nCreate PR\n\n\ncreate commit again\npreview what will be in PR: git diff develop..add-demo-feature\ngit push -u myfork add-demo-feature -&gt; copy link\nexplain PR template\nexplain target branch\nexplain “Allow edits by maintainers”\ncancel\nmy fork -&gt; branches -&gt; delete\n\n\nCheck out someone else’s work\n\n\nhave a look at an existing PR, look at all tabs, show suggestion feature\nbut sometimes we want to really build and try sth out …\ngit remote -v\ngit remote add alex git@github.com:ajaust/precice.git if I don’t have remote already (or somebody else)\ngit fetch alex\ngit checkout -t alex/[branch-name]\nI could now also push to ajaust’s remote"
  },
  {
    "objectID": "material/2_tue/git/slides.html#useful-links",
    "href": "material/2_tue/git/slides.html#useful-links",
    "title": "Learning Goals",
    "section": "Useful Links",
    "text": "Useful Links\n\nOfficial documentation\nVideo: Git in 15 minutes: basics, branching, no remote\nChapters 6 and 7 of Research Software Engineering with Python\nPodcast All Things Git: History of VC\ngit purr"
  },
  {
    "objectID": "material/2_tue/git/slides.html#linear-history",
    "href": "material/2_tue/git/slides.html#linear-history",
    "title": "Learning Goals",
    "section": "Linear History",
    "text": "Linear History\n\n\nCommits are snapshots + pointer to parent, not diffs\n\nBut for linear history, this makes no difference\n\nEach normal commit has one parent commit\n\nc05f017^ &lt;– c05f017\nA = B^ &lt;– B\n(^ is the same as ~1)\nPointer to parent commit goes into hash\n\ngit show gives diff of commit to parent"
  },
  {
    "objectID": "material/2_tue/git/slides.html#merge-commits",
    "href": "material/2_tue/git/slides.html#merge-commits",
    "title": "Learning Goals",
    "section": "Merge Commits",
    "text": "Merge Commits\n\ngit checkout main && git merge feature \nA merge commit (normally) has two parent commits M^1 and M^2 (don’t confuse ^2 with ~2)\n\nCan’t show unique diff\nFirst parent relative to the branch you are on (M^1 = C, M^2 = E)\n\ngit show\n\ngit show: “combined diff”\nGitHub: git show --first-parent\ngit show -m: separate diff to all parents"
  },
  {
    "objectID": "material/2_tue/git/slides.html#why-is-a-linear-history-important",
    "href": "material/2_tue/git/slides.html#why-is-a-linear-history-important",
    "title": "Learning Goals",
    "section": "Why is a Linear History Important?",
    "text": "Why is a Linear History Important?\nWe use here:\n\nLinear history := no merge commits\n\n\nMerge commits are hard to understand per se.\nA merge takes all commits from feature to main (on git log). –&gt; Hard to understand\nDevelopers often follow projects by reading commits (reading the diffs). –&gt; Harder to read (where happened what)\nTracing bugs easier with linear history (see git bisect)\n\nExample: We know a bug was introduced between v1.3 and v1.4."
  },
  {
    "objectID": "material/2_tue/git/slides.html#how-to-get-a-linear-history",
    "href": "material/2_tue/git/slides.html#how-to-get-a-linear-history",
    "title": "Learning Goals",
    "section": "How to get a Linear History?",
    "text": "How to get a Linear History?\n\nReal conflicts are very rare in real projects, most merge commits are false positives (not conflicts) and should be avoided.\nIf there are no changes on main, git merge does a “fast-forward” merge (no merge commit).\nIf there are changes on main, rebase feature branch."
  },
  {
    "objectID": "material/2_tue/git/slides.html#rebase",
    "href": "material/2_tue/git/slides.html#rebase",
    "title": "Learning Goals",
    "section": "Rebase",
    "text": "Rebase\n\ngit checkout feature && git rebase main \nStates of issues change (and new parents) –&gt; history is rewritten\nIf feature is already on remote, it needs a force push git push --force myfork feature (or --force-with-lease).\nBe careful: Only use rebase if only you work on a branch (a local branch or a branch on your fork).\nFor local branches very helpful: git pull --rebase (fetch & rebase)"
  },
  {
    "objectID": "material/2_tue/git/slides.html#github-pr-merge-variants",
    "href": "material/2_tue/git/slides.html#github-pr-merge-variants",
    "title": "Learning Goals",
    "section": "GitHub PR Merge Variants",
    "text": "GitHub PR Merge Variants\n\nGitHub offers three ways to merge a non-conflicting (no changes in same files) PR:\n\nCreate a merge commit\nSquash and merge\nRebase and merge\n\nLook at a PR together, e.g. PR 1432 from preCICE (will be closed eventually)\n\n\nWhat do the options do?"
  },
  {
    "objectID": "material/2_tue/git/slides.html#squash-and-merge",
    "href": "material/2_tue/git/slides.html#squash-and-merge",
    "title": "Learning Goals",
    "section": "Squash and Merge",
    "text": "Squash and Merge\n\n… squashes all commits into one\n\nOften, single commits of feature branch are important while developing the feature,\n… but not when the feature is merged\nWorks well for small feature PRs\n\n… also does a rebase (interactively, git rebase -i)"
  },
  {
    "objectID": "material/2_tue/git/slides.html#conflicts",
    "href": "material/2_tue/git/slides.html#conflicts",
    "title": "Learning Goals",
    "section": "Conflicts",
    "text": "Conflicts\n\nBut what if there is a conflict?\n\n\nResolve by rebasing feature branch (recommended)\nOr resolve by merging main into feature"
  },
  {
    "objectID": "material/2_tue/git/slides.html#summary-and-remarks",
    "href": "material/2_tue/git/slides.html#summary-and-remarks",
    "title": "Learning Goals",
    "section": "Summary and Remarks",
    "text": "Summary and Remarks\n\nTry to keep a linear history with rebasing whenever reasonable\nDon’t use rebase on a public/shared branch during development\nSquash before merging if reasonable\nDelete feature branch after merging\nLocal view: git log --graph\nRemote view on GitHub, e.g. for preCICE"
  },
  {
    "objectID": "material/2_tue/git/slides.html#further-reading",
    "href": "material/2_tue/git/slides.html#further-reading",
    "title": "Learning Goals",
    "section": "Further Reading",
    "text": "Further Reading\n\nBitbucket docs: “Merging vs. Rebasing”\nHackernoon: “What’s the diff?”\nGitHub Blog: “Commits are snapshots, not diffs”\nStack Overflow: “Git show of a merge commit”"
  },
  {
    "objectID": "material/2_tue/git/slides.html#why-workflows",
    "href": "material/2_tue/git/slides.html#why-workflows",
    "title": "Learning Goals",
    "section": "Why Workflows?",
    "text": "Why Workflows?\n\nGit offers a lot of flexibility in managing changes.\nWhen working in a team, some agreements need to be made however (especially on how to work with branches)."
  },
  {
    "objectID": "material/2_tue/git/slides.html#which-workflow",
    "href": "material/2_tue/git/slides.html#which-workflow",
    "title": "Learning Goals",
    "section": "Which Workflow?",
    "text": "Which Workflow?\n\nThere are standard solutions.\nIt depends on the size of the team.\nWorkflow should enhance effectiveness of team, not be a burden that limits productivity."
  },
  {
    "objectID": "material/2_tue/git/slides.html#centralized-workflow",
    "href": "material/2_tue/git/slides.html#centralized-workflow",
    "title": "Learning Goals",
    "section": "Centralized Workflow",
    "text": "Centralized Workflow\n\nOnly one branch: the main branch\nKeep your changes in local commits till some feature is ready\nIf ready, directly push to main; no PRs, no reviews\nConflicts: fix locally (push not allowed anyway), use git pull --rebase\nGood for: small teams, small projects, projects that are anyway reviewed over and over again\nExample: LaTeX papers\n\nPut each section in separate file\nPut each sentence in separate line"
  },
  {
    "objectID": "material/2_tue/git/slides.html#feature-branch-workflow",
    "href": "material/2_tue/git/slides.html#feature-branch-workflow",
    "title": "Learning Goals",
    "section": "Feature Branch Workflow",
    "text": "Feature Branch Workflow\n\nEach feature (or bugfix) in separate branch\nPush feature branch to remote, use descriptive name\n\ne.g. issue number in name if each branch closes one issue\n\nmain should never contain broken code\nProtect direct push to main\nPR (or MR) with review to merge from feature branch to main\nRebase feature branch on main if necessary\nDelete remote branch once merged and no longer needed (one click on GitHub after merge)\nGood for: small teams, small projects, prototyping, websites (continuous deployment), documentation\nAka. trunk-based development or GitHub flow"
  },
  {
    "objectID": "material/2_tue/git/slides.html#gitflow",
    "href": "material/2_tue/git/slides.html#gitflow",
    "title": "Learning Goals",
    "section": "Gitflow",
    "text": "Gitflow\n\nVisualization by Vincent Driessen, from original blog post in 2010\nmain and develop\n\nmain contains releases as tags\ndevelop contains latest features\n\nFeature branches created of develop, PRs back to develop\nProtect main and (possibly) develop from direct pushes\nDedicated release branches (e.g., v1.0) created of develop\n\nTested, fixed, merged to main\nAfterwards, tagged, merged back to develop\n\nHotfix branches directly of and to main\nGood for: software with users, larger teams\nThere is a tool git-flow, a wrapper around git, e.g. git flow init … but not really necessary IMHO"
  },
  {
    "objectID": "material/2_tue/git/slides.html#forking-workflow",
    "href": "material/2_tue/git/slides.html#forking-workflow",
    "title": "Learning Goals",
    "section": "Forking Workflow",
    "text": "Forking Workflow\n\nGitflow + feature branches on other forks\nMore control over access rights, distinguish between maintainers and external contributors\nShould maintainers also use branches on their forks?\n\nMakes overview of branches easier\nDistinguishes between prototype branches (on fork, no PR), serious enhancements (on fork with PR), joint enhancements (on upstream)\n\nGood for: open-source projects with external contributions (used more or less in preCICE)"
  },
  {
    "objectID": "material/2_tue/git/slides.html#do-small-prs",
    "href": "material/2_tue/git/slides.html#do-small-prs",
    "title": "Learning Goals",
    "section": "Do Small PRs",
    "text": "Do Small PRs\n\nFor all workflows, it is better to do small PRs\n\nEasier to review\nFaster to merge –&gt; fewer conflicts\nEasier to squash"
  },
  {
    "objectID": "material/2_tue/git/slides.html#quick-reads",
    "href": "material/2_tue/git/slides.html#quick-reads",
    "title": "Learning Goals",
    "section": "Quick Reads",
    "text": "Quick Reads\n\nAtlassian docs on workflows\nOriginal gitflow blog post\nTrunk-based development\nGitHub flow\nHow to keep pull requests manageable"
  },
  {
    "objectID": "material/2_tue/git/slides.html#what-do-we-mean-with-standards",
    "href": "material/2_tue/git/slides.html#what-do-we-mean-with-standards",
    "title": "Learning Goals",
    "section": "What Do We Mean With Standards?",
    "text": "What Do We Mean With Standards?\n\nGitHub uses standards or conventions.\nCertain files or names trigger certain behavior automatically.\nMany are supported by most forges.\n\nThis is good.\nEverybody should know them."
  },
  {
    "objectID": "material/2_tue/git/slides.html#special-files",
    "href": "material/2_tue/git/slides.html#special-files",
    "title": "Learning Goals",
    "section": "Special Files",
    "text": "Special Files\nCertain files lead to special formatting (normally directly at root of repo):\n\nREADME.md\n\n… contains meta information / overview / first steps of software.\n… gets rendered on landing page (and in every folder).\n\nLICENSE\n\n… contains software license.\n… gets rendered on right sidebar, when clicking on license, and on repo preview.\n\nCONTRIBUTING.md\n\n… contains guidelines for contributing.\nFirst-time contributors see banner.\n\nCODE_OF_CONDUCT.md\n\n… contains code of conduct.\n… gets rendered on right sidebar."
  },
  {
    "objectID": "material/2_tue/git/slides.html#issues-and-prs",
    "href": "material/2_tue/git/slides.html#issues-and-prs",
    "title": "Learning Goals",
    "section": "Issues and PRs",
    "text": "Issues and PRs\n\nTemplates for description in .github folder\ncloses #34 (or several other keywords: fixes, resolves) in commit message or PR description will close issue 34 when merged.\nhelp wanted label gets rendered on repo preview (e.g. “3 issues need help”)."
  },
  {
    "objectID": "material/2_tue/git/slides.html#commit-messages-12",
    "href": "material/2_tue/git/slides.html#commit-messages-12",
    "title": "Learning Goals",
    "section": "Commit Messages (1/2)",
    "text": "Commit Messages (1/2)\n\nConsistent\nDescriptive and concise (such that complete history becomes skimmable)\nExplain the “why” (the “how” is covered in the diff)"
  },
  {
    "objectID": "material/2_tue/git/slides.html#commit-messages-22",
    "href": "material/2_tue/git/slides.html#commit-messages-22",
    "title": "Learning Goals",
    "section": "Commit Messages (2/2)",
    "text": "Commit Messages (2/2)\nThe seven rules of a great Git commit message:\n\nSeparate subject from body with a blank line.\nLimit the subject line to 50 characters.\nCapitalize the subject line.\nDo not end the subject line with a period.\nUse the imperative mood in the subject line.\nWrap the body at 72 characters.\nUse the body to explain what and why vs. how."
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#error-detection",
    "href": "material/2_tue/codereview/slides.html#error-detection",
    "title": "Code Review",
    "section": "Error Detection",
    "text": "Error Detection\n\n\n\nAn analysis by Nuijten et al. (2016) of over 250K p-values reported in 8 major psych journals from 1985 to 2013 found that:\n\nhalf the papers had at least one inconsistent p-value\n1/8 of papers had errors that could affect conclusions\nerrors more likely to be erroneously significant than not"
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#analysis-reproducibility",
    "href": "material/2_tue/codereview/slides.html#analysis-reproducibility",
    "title": "Code Review",
    "section": "Analysis Reproducibility",
    "text": "Analysis Reproducibility\nOf 35 articles published in Cognition with usable data (but no code, Hardwicke et al. (2018) found:\n\nonly 11 could be reproduced independently\n11 were reproducible with the original authors’ help\n13 were not reproducible even by the original authors"
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#code-reproducibility",
    "href": "material/2_tue/codereview/slides.html#code-reproducibility",
    "title": "Code Review",
    "section": "Code Reproducibility",
    "text": "Code Reproducibility\nOf 62 Registered Reports in psychology published from 2014–2018, 36 had data and analysis code, 31 could be run, and 21 reproduced all the main results (Obels et al, 2020)"
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#barriers-to-doing-code-review",
    "href": "material/2_tue/codereview/slides.html#barriers-to-doing-code-review",
    "title": "Code Review",
    "section": "Barriers to Doing Code Review",
    "text": "Barriers to Doing Code Review\n\n\n💻 Technical\n\nLack of skill\nNo guide\n\n\n⏱ Incentive\n\nNo time\nNot expected\n\n\n😳 Social\n\nExpectations\nFear of judgement"
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#does-it-run",
    "href": "material/2_tue/codereview/slides.html#does-it-run",
    "title": "Code Review",
    "section": "Does it run?",
    "text": "Does it run?\n\nRequires the least expertise and time\nCan result in a substantial improvement\nRun on a different computer than coded on\nIdeally, access from the same place users or reviewers will\nNote if you get any errors\nIf you have the expertise to fix them, make and note the fix, then try again\n\n\nChecking whether the code runs is the simplest goal, but one of the most important and it would be a substantial improvement if all research code had this single check. It requires only the expertise to run a script in the relevant language. The reviewer does not necessarily need to be able to diagnose or help with any problems, just identify them to the coder."
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#is-it-reproducible",
    "href": "material/2_tue/codereview/slides.html#is-it-reproducible",
    "title": "Code Review",
    "section": "Is it reproducible?",
    "text": "Is it reproducible?\n\nRequires more time, but not expertise\nThe coder can make this a lot easier for the reviewer\nAnyone running the code should get the same outputs\nOutputs include: Analysis Results; Plots; Tables\nCheck for a seed when random values are used\nAssess how straightforward it is to do this check\n\n\nComputational reproducibility means that anyone running the code gets the same results. The reviewer can check for consistency with outputs that are created by the code, such as an HTML or PDF rendered version of the script, or with values and figures in a manuscript.\nIt is also relevant to comment on how straightforward it is to check the outputs. For example, did the coder use literate programming, where the source code and natural-language explanations are interspersed in the same document, to divide the code into sections that clearly correspond with outputs that it needs to be consistent with? Are figures and tables numbered or labeled in a way that makes it easy for the reviewer to see their correspondence? This both helps the reviewer assess the reproducibility of the code, and helps other researchers use the code."
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#is-it-auditable-and-understandable",
    "href": "material/2_tue/codereview/slides.html#is-it-auditable-and-understandable",
    "title": "Code Review",
    "section": "Is it auditable and understandable?",
    "text": "Is it auditable and understandable?\n\nRequires a bit more expertise and time\nIs the code well-organised?\nHeaders make a complex script much more accessible\nCan you find corresponding parts of the outputs or manuscript?\nAre all parts of the process available (e.g., generating analysed data from raw data)?\nLiterate programming makes code more understandable.\n\n\nEven if a reviewer doesn’t have the expertise to assess the statistics or data processing, they can assess whether the code is well-organized enough to figure out what is intended so mistakes could be detected."
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#does-it-follow-best-practices",
    "href": "material/2_tue/codereview/slides.html#does-it-follow-best-practices",
    "title": "Code Review",
    "section": "Does it follow best practices?",
    "text": "Does it follow best practices?\n\nRequires substantial expertise and time\nGeneral coding principles that serve to reduce the scope for errors and make understanding code easier, for example:\n\nDo the variable names make sense?\nIs there repeated code (DRY) or values defined in multiple places (SPOT)?\nAre outputs of long processes saved and loaded from file?\nAre there sense checks or unit tests where appropriate?\n\n\n\nRecommendations about ‘best practices’ can be idiosyncratic, but here we mean general coding principles that serve to reduce the scope for errors and make understanding code easier. This goal can take a bit longer and requires more general coding expertise from the reviewer. It also may be more appropriate in earlier stages of the project. However, advice on best practices can still help coders with future projects, even when there isn’t scope to make big structural changes to the current project."
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#is-it-correct-and-appropriate",
    "href": "material/2_tue/codereview/slides.html#is-it-correct-and-appropriate",
    "title": "Code Review",
    "section": "Is it correct and appropriate?",
    "text": "Is it correct and appropriate?\n\nRequires substantial expertise and time\nIs the code actually doing what was intended?\nIs what was intended correct?\nDetect logical problems (e.g., filtering in instead of out)\nMay require domain expertise to detect some problems (e.g., knowing that a certain questionnaire has reverse-coded items)\n\n\nIs the code actually doing what was intended, and is what was intended correct? A careful answer to this question requires the reviewer to have domain-specific expertise and statistical expertise. Some logical problems can be caught without domain knowledge, such as intending to filter out male subjects, but actually filtering them IN. However, other problems will require specialist domain or statistical knowledge to detect."
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#not-goals",
    "href": "material/2_tue/codereview/slides.html#not-goals",
    "title": "Code Review",
    "section": "Not Goals",
    "text": "Not Goals\n\nDo not submit code that doesn’t run for you for code review. Of course, code review may uncover bugs that were not apparent to you, but the reviewer should be able to assume that the code runs on your setup. Depending on their experience, a reviewer may fix bugs they find in review, or simply point them out. Severe enough bugs may cause the reviewer to terminate the review, which then prevents higher-order goals from being achieved. This is one reason it is important to do informal code check with colleagues before you send code for more formal review check, such as a journal submission.\nDon’t expect the reviewer to create code for you. Code review is not an opportunity to get someone else to fix sloppy or inefficient code, or to add documentation for you.Some reviewers, depending on their expertise and investment in the project, may of course choose to help improve the code directly, but this verges on a co-author role, not a review role.\nDo not rely on code review to assess the appropriateness of your scientific decisions or statistical analyses. In the context of a manuscript review at a journal, the reviewer may be both a scientific and code reviewer, but these are distinct roles. Code review itself is not a guarantee that your research is methodologically sound or that your statistical approach is appropriate.\n\n\n\n\nDebugging\nCode help\nStatistical help"
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#a-review-package-should-include",
    "href": "material/2_tue/codereview/slides.html#a-review-package-should-include",
    "title": "Code Review",
    "section": "A review package should include:",
    "text": "A review package should include:\n\n\nA README file that describes the project; specifies credit and licensing\nAny outputs that the reviewers should try to reproduce\nAll data used to create the outputs to be reproduced\nAll code necessary to recreate the outputs\nA main script that runs any subscripts in the relevant order"
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#project-organisation",
    "href": "material/2_tue/codereview/slides.html#project-organisation",
    "title": "Code Review",
    "section": "Project organisation",
    "text": "Project organisation\n\nMake sure all files used in the code are in a single directory that is the working directory\nUse Jupyter notebooks or RStudio projects to make this easy\nInclude a README that explains the purpose of all files\nDanielle Navarro’s Project structure"
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#file-paths",
    "href": "material/2_tue/codereview/slides.html#file-paths",
    "title": "Code Review",
    "section": "File paths",
    "text": "File paths\nAll file references should use relative paths, not absolute paths.\n👎 Absolute Path\ndogs = open(\"C:\\Documents\\My Project\\data\\dogs.csv\", \"r\")\n\n👍 Relative Path\ndogs  open(\"data/dogs.csv\", \"r\")"
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#naming-things",
    "href": "material/2_tue/codereview/slides.html#naming-things",
    "title": "Code Review",
    "section": "Naming things",
    "text": "Naming things\nName files and code objects so both people and computers can easily find things.\n\nFile and directory names should only contain letters, numbers, dashes, and underscores, with a full stop (.) between the file name and extension (no spaces!) e.g., DeBruine_code-review_2023-10-10.qmd\nBe consistent with capitalization, punctuation, and order\nUse a pattern that alphabetizes in a sensible order\nUse YYYY-MM-DD format for dates\nJenny Bryan’s Naming Things"
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#data-documentation",
    "href": "material/2_tue/codereview/slides.html#data-documentation",
    "title": "Code Review",
    "section": "Data documentation",
    "text": "Data documentation\n\n\nOverview\n\nauthors\ndate and location\nsampling/inclusion criteria\ninstruments used\nupdates to the data\nlicense\n\n\nVariable information\n\nNames (i.e., the column names)\nLabels/description\nCodings (e.g., 1 = always, 5 = never)\nData type (e.g., binary, continuous)\nDescriptives (e.g., min, max)\nData units (e.g., mg/L, months)\nMissing values (e.g., NA, 999)"
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#literate-coding",
    "href": "material/2_tue/codereview/slides.html#literate-coding",
    "title": "Code Review",
    "section": "Literate coding",
    "text": "Literate coding\nAn approach to programming that focuses on the creation of a document containing a mix of human-readable narrative text and machine-readable computer code.\n\nQuarto, Jupyter, or R Markdown notebooks\n\n## Data Exclusions\n\nWhy we excluded these subjects...\n\n```{julia}\n# exclude subjects with more than 50% errors\ndf_grouped = groupby(df, :id)\ndf_excluded = combine(df_grouped) do sub_df\n    if mean(sub_df.correct) &gt;= 0.5\n        return sub_df\n    end\n    return DataFrame()\nend\n```\n\n\nWhen writing code, it is important to write it in such a way that it is easily understandable by others, and by your future self. The goals of literate programming are similar to those associated with writing clean code (Martin, 2009). Clean code is understandable by humans, well formatted, with an appropriate amount of white space, with meaningful names for variables and functions, and is well commented. Comments should clearly explain to the reader the purpose of the associated lines of code. The quality of commenting is more important than the quantity."
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#single-point-of-truth-spot",
    "href": "material/2_tue/codereview/slides.html#single-point-of-truth-spot",
    "title": "Code Review",
    "section": "Single point of truth (SPOT)",
    "text": "Single point of truth (SPOT)\nWith repeated numbers\nusing DataFrames, Random\n\nsimdat = DataFrame(\n  id = 1:10, \n  group = repeat([\"A\", \"B\"], 5), \n  dv = randn(10)\n)\n\nWith parameter variables\nn = 10\n\nsimdat = DataFrame(\n  id = 1:n,\n  group = repeat([\"A\", \"B\"], n ÷ 2), \n  dv = randn(n)\n)"
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#dont-repeat-yourself-dry",
    "href": "material/2_tue/codereview/slides.html#dont-repeat-yourself-dry",
    "title": "Code Review",
    "section": "Don’t repeat yourself (DRY)",
    "text": "Don’t repeat yourself (DRY)\n\nIf you find yourself copying and pasting code more than twice, it’s probably time to turn that into a function. This can save you both time and errors. What if you forgot to make the t-tests paired? With repeated code, you need to make sure to fix every instance. With a function, you just need to fix it once. This also makes the code easier to understand where the same thing is happening repeatedly, and exactly how it is different each time.\n\nWith repeated code\nusing HypothesisTests\n\ndfA = filter(row -&gt; row.group == \"A\", simdat)\nanalysisA = OneSampleTTest(dfA.dv)\n\ndfB = filter(row -&gt; row.group == \"B\", simdat)\nanalysisB = OneSampleTTest(dfB.dv)\n\nWith a function\nfunction subtest(data, level)\n    sub_df = filter(row -&gt; row.group == level, data)\n    return OneSampleTTest(sub_df.dv)\nend\n\nanalysisA = subtest(simdat, \"A\")\nanalysisB = subtest(simdat, \"B\")"
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#unit-tests",
    "href": "material/2_tue/codereview/slides.html#unit-tests",
    "title": "Code Review",
    "section": "Unit Tests",
    "text": "Unit Tests\nusing Test\n\n# check length of DataFrame is correct\n@test size(simdat, 1) == 10\n\n# check column names are as expected\n@test names(simdat) == [\"id\", \"group\", \"dv\"]\n\n# check all dv values are positive\n@test all(simdat.dv .&gt; 0)"
  },
  {
    "objectID": "material/2_tue/codereview/slides.html#exercises",
    "href": "material/2_tue/codereview/slides.html#exercises",
    "title": "Code Review",
    "section": "Exercises",
    "text": "Exercises\n\n\n🔐 Personal Code\n\nFind code that you have written, in any language\nForm groups of 2-3 people with code in the same language\nTrade scripts and write code reviews\nGo over the code review with the writer\n\n\n🔓 Open Code\n\nForm groups of 2-3 with expertise in the same topic/language\nFind open code in that topic and language\nCollaboratively write a code review for it\nOptional: send it to the code author"
  },
  {
    "objectID": "material/2_tue/ci/slides.html",
    "href": "material/2_tue/ci/slides.html",
    "title": "Learning Goals",
    "section": "",
    "text": "Name and explain common workflows to automate in RSE.\nExplain the differences between the various continuous methodologies.\nExplain why automation is crucial in RSE.\nWrite and understand basic automation scripts for GitHub Actions.\n\ns.t. we understand what PkgTemplates generates for us.\n\n\nMaterial is taken and modified from the SSE lecture."
  },
  {
    "objectID": "material/2_tue/ci/slides.html#why-automation",
    "href": "material/2_tue/ci/slides.html#why-automation",
    "title": "Learning Goals",
    "section": "Why Automation?",
    "text": "Why Automation?\n\nAutomatize tasks\n\nRun tests frequently, give feedback early etc.\nEnsure reproducible test environments\nCannot forget automatized tasks\nLess burden to developer (and their workstation)\nAvoid manual errors\n\nProcess often integrated in development workflow\n\nExample: Support by Git hooks or Git forges"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#typical-automation-tasks-in-rse",
    "href": "material/2_tue/ci/slides.html#typical-automation-tasks-in-rse",
    "title": "Learning Goals",
    "section": "Typical Automation Tasks in RSE",
    "text": "Typical Automation Tasks in RSE\n\nCheck code formatting and quality\nCompile and test code for different platforms\nGenerate coverage reports and visualization\nBuild documentation and deploy it\nBuild, package, and upload releases"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#continuous-methodologies-12",
    "href": "material/2_tue/ci/slides.html#continuous-methodologies-12",
    "title": "Learning Goals",
    "section": "Continuous Methodologies (1/2)",
    "text": "Continuous Methodologies (1/2)\n\nContinuous Integration (CI)\n\nContinuously integrate changes into “main” branch\nAvoids “merge hell”\nRelies on testing and checking code continuously\n\nShould be automatized"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#continuous-methodologies-22",
    "href": "material/2_tue/ci/slides.html#continuous-methodologies-22",
    "title": "Learning Goals",
    "section": "Continuous Methodologies (2/2)",
    "text": "Continuous Methodologies (2/2)\n\nContinuous Delivery (CD)\n\nSoftware is in a state that allows new release at any time\nSoftware package is built\nActual release triggered manually\n\nContinuous Deployment (CD)\n\nSoftware is in a state that allows new release at any time\nSoftware package is built\nActual release triggered automatically (continuously)"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#automation-servicessoftware",
    "href": "material/2_tue/ci/slides.html#automation-servicessoftware",
    "title": "Learning Goals",
    "section": "Automation Services/Software",
    "text": "Automation Services/Software\n\nGitHub Actions\nGitLab CI/CD\nCircle CI\nTravis CI\nJenkins\n…"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#what-is-github-actions",
    "href": "material/2_tue/ci/slides.html#what-is-github-actions",
    "title": "Learning Goals",
    "section": "What is “GitHub Actions”?",
    "text": "What is “GitHub Actions”?\n\nAutomate, customize, and execute your software development workflows right in your repository with GitHub Actions.\n\nFrom: https://docs.github.com/en/actions"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#general-information",
    "href": "material/2_tue/ci/slides.html#general-information",
    "title": "Learning Goals",
    "section": "General Information",
    "text": "General Information\n\nUsage of GitHub’s runners is limited\nAvailable for public repositories or accounts with subscription\nBy default Actions run on GitHub’s runners\n\nLinux, Windows, or MacOS\n\nQuickly evolving and significant improvements in recent years"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#components-12",
    "href": "material/2_tue/ci/slides.html#components-12",
    "title": "Learning Goals",
    "section": "Components (1/2)",
    "text": "Components (1/2)\n\nWorkflow: Runs one or more jobs\nEvent: Triggers a workflow\nJobs: Set of steps (running on same runner)\n\nSteps executed consecutively and share data\nJobs by default executed in parallel\n\nAction: Application performing common, complex task (step) often used in workflows\nRunner: Server that runs jobs\nArtifacts: Files to be shared between jobs or to be kept after workflow finishes"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#components-22",
    "href": "material/2_tue/ci/slides.html#components-22",
    "title": "Learning Goals",
    "section": "Components (2/2)",
    "text": "Components (2/2)\n\nFrom GitHub Actions tutorial"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#setting-up-a-workflow",
    "href": "material/2_tue/ci/slides.html#setting-up-a-workflow",
    "title": "Learning Goals",
    "section": "Setting up a Workflow",
    "text": "Setting up a Workflow\n\nWorkflow file files stored ${REPO_ROOT}/.github/workflows\nConfigured via YAML file\n\nname: learn-github-actions\non: [push]\njobs:\n  check-bats-version:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - run: npm install -g bats\n      - run: bats -v"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#actions",
    "href": "material/2_tue/ci/slides.html#actions",
    "title": "Learning Goals",
    "section": "Actions",
    "text": "Actions\n- uses: actions/checkout@v3\n- uses: actions/setup-node@v2\n  with:\n    node-version: '14'\n\nIntegrated via uses directive\nAdditional configuration via with (options depend on Action)\nFind actions in marketplace\nWrite own actions"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#some-useful-julia-actions",
    "href": "material/2_tue/ci/slides.html#some-useful-julia-actions",
    "title": "Learning Goals",
    "section": "Some Useful Julia Actions",
    "text": "Some Useful Julia Actions\n\nFind on github.com/julia-actions\n- uses: julia-actions/setup-julia@v1\n     with:\n       version: '1.9'\nMore:\n\ncache: caches ~/.julia/artifacts/* and ~/.julia/packages/* to reduce runtime of CI\njulia-buildpkg: build package\njulia-runtest: run tests\njulia-format: format code (not really an action, but example)"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#user-specified-commands",
    "href": "material/2_tue/ci/slides.html#user-specified-commands",
    "title": "Learning Goals",
    "section": "User-specified Commands",
    "text": "User-specified Commands\n- name: \"Single line command\"\n  run: echo \"Single line command\"\n- name: \"Multi line command\"\n  run: |\n    echo \"First line\"\n    echo \"Second line. Directory ${PWD}\"\n  workdir: tmp/\n  shell: bash"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#events",
    "href": "material/2_tue/ci/slides.html#events",
    "title": "Learning Goals",
    "section": "Events",
    "text": "Events\n\nSingle or multiple events\non: [push, fork]\nActivities\non:\n  issue:\n    types:\n      - opened\n      - labeled\nFilters\non:\n  push:\n    branches:\n      - main\n      - 'releases/**'"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#artifacts",
    "href": "material/2_tue/ci/slides.html#artifacts",
    "title": "Learning Goals",
    "section": "Artifacts",
    "text": "Artifacts\n\nData sharing between jobs and data upload\nUploading artifact\n- name: \"Upload artifact\"\n  uses: actions/upload-artifact@v2\n  with:\n    name: my-artifact\n    path: my_file.txt\n    retention-days: 5\nDownloading artifact\n- name: \"Download a single artifact\"\n  uses: actions/download-artifact@v2\n  with:\n    name: my-artifact\nNote: Drop name to download all artifacts"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#test-actions-locally",
    "href": "material/2_tue/ci/slides.html#test-actions-locally",
    "title": "Learning Goals",
    "section": "Test Actions Locally",
    "text": "Test Actions Locally\n\nact\nRelies extensively on Docker\n\nUser should be in docker group\n\nRun act from root of the repository\nact (runs all workflows)\nact --job WORKFLOWNAME\nEnvironment is not 100% identical to GitHub’s\n\nWorkflows may fail locally, but work on GitHub"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#further-reading",
    "href": "material/2_tue/ci/slides.html#further-reading",
    "title": "Learning Goals",
    "section": "Further Reading",
    "text": "Further Reading\n\nWhat is Continuous Integration?\nGitHub Actions documentation\nGitHub Actions quickstart"
  },
  {
    "objectID": "material/2_tue/ci/slides.html#setting-up-a-test-job",
    "href": "material/2_tue/ci/slides.html#setting-up-a-test-job",
    "title": "Learning Goals",
    "section": "Setting up a Test Job",
    "text": "Setting up a Test Job\n\nImport Julia test package repository (the same code we used for testing)\nSet up workflow file\nmkdir -p .github/workflows\ncd .github/workflows\nvi format-check.yml\nLet’s check whether our code is formatted correctly. Edit format-check.yml to have following content\nname: format-check\n\non: [push, pull_request]\n\njobs:\n  format:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: julia-actions/setup-julia@v1\n        with:\n          version: '1.9'\n      - name: Install JuliaFormatter and format\n        run: |\n          julia  -e 'using Pkg; Pkg.add(PackageSpec(name=\"JuliaFormatter\"))'\n          julia  -e 'using JuliaFormatter; format(\".\", verbose=true)'\n      - name: Format check\n        run: |\n          julia -e '\n          out = Cmd(`git diff --name-only`) |&gt; read |&gt; String\n          if out == \"\"\n              exit(0)\n          else\n              @error \"Some files have not been formatted\"\n              write(stdout, out)\n              exit(1)\n          end'     \nruns-on does not refer to a Docker container, but to a runner tag.\nAdd, commit, push\nAfter the push, inspect “Action” panel on GitHub repository\n\nGitHub will schedule a run (yellow dot)\nHooray. We have set up our first action.\n\nFailing test example:\n\nEdit settings on GitHub that one can only merge if all tests pass:\n\nSettings -&gt; Branches -&gt; Branch protection rule\nChoose main branch\nEnable “Require status checks to pass before merging”. Optionally enable “Require branches to be up to date before merging”\nChoose status checks that need to pass: test\nClick on “Create” at bottom of page.\n\nCreate a new branch break-code.\nEdit some file, violate the formatting, commit it and push it to the branch. Afterwards open a new PR and inspect the failing test. We are also not able to merge the changes as the “Merge” button should be inactive."
  },
  {
    "objectID": "material/2_tue/ci/slides.html#act-demo",
    "href": "material/2_tue/ci/slides.html#act-demo",
    "title": "Learning Goals",
    "section": "act Demo",
    "text": "act Demo\n\nact is for quick checks while developing workflows, not for developing the code\nCheck available jobs (at root of repository)\nact -l\nRun jobs for push event (default event)\nact\nRun a specific job\nact -j test"
  },
  {
    "objectID": "material/4_thu/bootstrap/Bootstrap.html",
    "href": "material/4_thu/bootstrap/Bootstrap.html",
    "title": "Resampling-Based Statistics",
    "section": "",
    "text": "Situation considered yesterday: We have data and want to fit a model with certain parameters (e.g., a linear model) – we estimate the parameter.\nNotation:\n\ndata: \\(\\mathbf{x} = (x_1, \\ldots, x_n)\\)\nmodel with unknown parameter \\(\\theta\\)\nestimate \\(\\widehat \\theta(\\mathbf{x})\\)\n\n\n\n\ndata: \\(\\mathbf{x} = (x_1, \\ldots, x_n)\\)\nmodel: \\(\\mathcal{N}(\\theta, \\sigma^2)\\), i.e., a normal distribution with unknown mean \\(\\theta\\) (that we want to estimate) and variance \\(\\sigma^2\\) (that we are less interested in)\nuse empirical mean as estimator: \\(\\widehat \\theta(\\mathbf{x}) = \\overline{x} = \\frac 1 n \\sum_{i=1}^n x_i\\)\n\n\nusing Distributions\nusing Statistics\nusing StatsPlots\n\nd = Normal(0.0, 1.0)\nn = 100\nx = rand(d, n)\nθ = mean(x)\nProblem: Estimator never gives the exact result – if you have random data, also the estimate is random.\nAim: Find the distribution (or at least the variance) of the estimator \\(\\widehat \\theta\\) in order to get standard errors, confidence intervals, etc.\nIn some easy examples, you can calculate the distribution of \\(\\widehat \\theta\\) theoretically. Example: If \\(x_i\\) is \\(\\mathcal{N}(\\theta,\\sigma^2)\\) distributed, then the distribution of \\(\\widehat \\theta(\\mathbf{x})\\) is \\(\\mathcal{N}(\\theta, \\sigma^2/n)\\). Strategy: Estimate \\(\\sigma^2\\), e.g. via the sample variance \\[ \\widehat \\sigma^2 = \\frac 1 {n-1} \\sum_{i=1}^n (x_i - \\overline{x})^2 \\] and take the standard error, confidence intervals, etc. of the corresponding normal distribution.\n\nσ = std(x)\nest_d = Normal(θ, σ/sqrt(n))\nplot(est_d, legend=false)\n\nci_bounds = quantile(est_d, [0.025,0.975])\nvline!(ci_bounds)\nProblem: In more complex examples, we cannot calculate the distribution.\n\n\n\n\nIn theory, one would ideally do the following:\n\nGenerate new independent data \\(\\mathbf{x}^{(1)}, \\mathbf{x}^{(2)}, \\ldots, \\mathbf{x}^{(B)}\\) (each sample of size \\(n\\))\nApply the estimator separately to each sample \\(\\leadsto\\) \\(\\widehat \\theta(\\mathbf{x}^{(1)}), \\ldots, \\widehat \\theta(\\mathbf{x}^{(B)})\\)\nUse the empirical distribution \\(\\widehat \\theta(\\mathbf{x}^{(1)}), \\ldots, \\widehat \\theta(\\mathbf{x}^{(B)})\\) as a proxy to the theoretical one.\n\nB = 1000\nest_vector_new = zeros(B)\nfor i in 1:B\n  x_new = rand(d, n)\n  est_vector_new[i] = mean(x_new)\nend    \nhistogram(est_vector_new, legend=false)\n\nci_bounds_new = quantile(est_vector_new, [0.025, 0.975])\nvline!(ci_bounds_new)\n\nBut: In most real world situation, we can not generate new data if the distribution is unknown. We have to work with the data we have …\n\n\n\n\nIdea: Use samples \\(\\mathbf{x}^{(1)}, \\mathbf{x}^{(2)}, \\ldots, \\mathbf{x}^{(B)}\\) that are not completely new, but obtained from resampling the original data \\(\\mathbf{x}\\).\nQuestion: How can one obtained another sample of the same size \\(n\\)? \\(\\leadsto\\) (re-)sampling with replacement\nThe overall procedure is as follows:\n\nGenerate \\(B\\) samples \\(\\mathbf{x}^{(1)}, \\mathbf{x}^{(2)}, \\ldots, \\mathbf{x}^{(B)}\\) of size \\(n\\) by independently resampling from \\(\\mathbf{x}\\) with replacement.\nApply the estimator separately to each sample \\(\\leadsto\\) \\(\\widehat \\theta(\\mathbf{x}^{(1)}), \\ldots, \\widehat \\theta(\\mathbf{x}^{(B)})\\)\nUse the empirical distribution \\(\\widehat \\theta(\\mathbf{x}^{(1)}), \\ldots, \\widehat \\theta(\\mathbf{x}^{(B)})\\) as a proxy to the theoretical one.\n\n\nest_vector_bs = zeros(B)\nfor i in 1:B\n  x_bs = rand(x, n)\n  est_vector_bs[i] = mean(x_bs)\nend\nhistogram(est_vector_bs, legend=false)\n\nci_bounds_bs = quantile(est_vector_bs, [0.025, 0.975])\nvline!(ci_bounds_bs) \nIf the sample \\(\\mathbf{x} = (x_1,\\ldots,x_n)\\) consists of independent and identically distributed data, the resampling procedure often provides a code proxy to the true (unknown) distribution of the estimator.\n\n\n\n\n\n\nNote\n\n\n\nThe above resampling procedure is called bootstrap (from ‘’To pull oneself up by one’s bootstraps.’’) as only data are used that are already available.\n\n\n\n\n\n\n\n\nTask 1\n\n\n\n\n\n\nReconsider the tree data set and the simple linear regression model Volume ~ Girth. Calculate a 95% confidence interval for \\(\\beta_1\\) via bootstrap and compare to the Julia output of the linear model.\nUse bootstrap to estimate the standard error for the predicted volume of a tree with Girth=10 the output above.\n\n\n\n\nProblem: If the data are not independent, the above (i.i.d.) bootstrap samples would have a misspecified dependence structure and therefore lead to a bad uncertainty estimate. For some situations, there are specific modifications of the bootstrap procedure (e.g. block bootstrap for time series), but they tend to work well only if dependence is sufficiently weak.\n\n\n\nThere are situations where it is hardly possible to construct reasonable confidence intervals or estimate the standard error. But one could at least get a rough guess of the uncertainty by the following thought experiment:\nAssume that the estimated parameter value \\(\\theta^*\\) would be equal to the true one. How uncertain would an estimate be in that case?\nThe answer is given by the following procedure, called parametric bootstrap:\n\nGenerate independent data \\(\\mathbf{x}^{(1)}, \\mathbf{x}^{(2)}, \\ldots, \\mathbf{x}^{(B)}\\) (each sample of size \\(n\\)) from the model with parameter \\(\\theta^*\\)\nApply the estimator separately to each sample \\(\\leadsto\\) \\(\\widehat \\theta(\\mathbf{x}^{(1)}), \\ldots, \\widehat \\theta(\\mathbf{x}^{(B)})\\)\nUse the empirical distribution \\(\\widehat \\theta(\\mathbf{x}^{(1)}), \\ldots, \\widehat \\theta(\\mathbf{x}^{(B)})\\) as a proxy to the theoretical one.\n\n\n\n\n\n\n\nTask 2\n\n\n\n\n\n\nConsider the following function that generate \\(n\\) correlated samples that are uniformly distributed on \\([\\mu-0-5,\\mu+0.5]\\).\n\nmyrand = function(mu, n) \n  rho = 0.9\n  res = zeros(n)\n  res[1] = rand(1)[1]\n  if n &gt; 1\n    for i in 2:n\n      res[i] = rho*res[i-1] .+ (1-rho)*rand(1)[1]\n    end\n  end\n  res .= mu - 0.5 .+ res\n  return(res)\nend \nThe additional parameter rho (between 0 and 1) controls the strength of dependence with 0 meaning independence and 1 meaning full dependence.\nWrite functions that estimate the standard deviation of the estimated mean via (a) generating new samples from the true unknown distribution, (b) i.i.d. bootstrap, (c) parametric bootstrap 2. Use the functions for different values of rho and compare the results."
  },
  {
    "objectID": "material/4_thu/bootstrap/Bootstrap.html#motivation-fitting-models-to-data",
    "href": "material/4_thu/bootstrap/Bootstrap.html#motivation-fitting-models-to-data",
    "title": "Resampling-Based Statistics",
    "section": "",
    "text": "Situation considered yesterday: We have data and want to fit a model with certain parameters (e.g., a linear model) – we estimate the parameter.\nNotation:\n\ndata: \\(\\mathbf{x} = (x_1, \\ldots, x_n)\\)\nmodel with unknown parameter \\(\\theta\\)\nestimate \\(\\widehat \\theta(\\mathbf{x})\\)\n\n\n\n\ndata: \\(\\mathbf{x} = (x_1, \\ldots, x_n)\\)\nmodel: \\(\\mathcal{N}(\\theta, \\sigma^2)\\), i.e., a normal distribution with unknown mean \\(\\theta\\) (that we want to estimate) and variance \\(\\sigma^2\\) (that we are less interested in)\nuse empirical mean as estimator: \\(\\widehat \\theta(\\mathbf{x}) = \\overline{x} = \\frac 1 n \\sum_{i=1}^n x_i\\)\n\n\nusing Distributions\nusing Statistics\nusing StatsPlots\n\nd = Normal(0.0, 1.0)\nn = 100\nx = rand(d, n)\nθ = mean(x)\nProblem: Estimator never gives the exact result – if you have random data, also the estimate is random.\nAim: Find the distribution (or at least the variance) of the estimator \\(\\widehat \\theta\\) in order to get standard errors, confidence intervals, etc.\nIn some easy examples, you can calculate the distribution of \\(\\widehat \\theta\\) theoretically. Example: If \\(x_i\\) is \\(\\mathcal{N}(\\theta,\\sigma^2)\\) distributed, then the distribution of \\(\\widehat \\theta(\\mathbf{x})\\) is \\(\\mathcal{N}(\\theta, \\sigma^2/n)\\). Strategy: Estimate \\(\\sigma^2\\), e.g. via the sample variance \\[ \\widehat \\sigma^2 = \\frac 1 {n-1} \\sum_{i=1}^n (x_i - \\overline{x})^2 \\] and take the standard error, confidence intervals, etc. of the corresponding normal distribution.\n\nσ = std(x)\nest_d = Normal(θ, σ/sqrt(n))\nplot(est_d, legend=false)\n\nci_bounds = quantile(est_d, [0.025,0.975])\nvline!(ci_bounds)\nProblem: In more complex examples, we cannot calculate the distribution."
  },
  {
    "objectID": "material/4_thu/bootstrap/Bootstrap.html#the-ideal-solution-generate-new-data",
    "href": "material/4_thu/bootstrap/Bootstrap.html#the-ideal-solution-generate-new-data",
    "title": "Resampling-Based Statistics",
    "section": "",
    "text": "In theory, one would ideally do the following:\n\nGenerate new independent data \\(\\mathbf{x}^{(1)}, \\mathbf{x}^{(2)}, \\ldots, \\mathbf{x}^{(B)}\\) (each sample of size \\(n\\))\nApply the estimator separately to each sample \\(\\leadsto\\) \\(\\widehat \\theta(\\mathbf{x}^{(1)}), \\ldots, \\widehat \\theta(\\mathbf{x}^{(B)})\\)\nUse the empirical distribution \\(\\widehat \\theta(\\mathbf{x}^{(1)}), \\ldots, \\widehat \\theta(\\mathbf{x}^{(B)})\\) as a proxy to the theoretical one.\n\nB = 1000\nest_vector_new = zeros(B)\nfor i in 1:B\n  x_new = rand(d, n)\n  est_vector_new[i] = mean(x_new)\nend    \nhistogram(est_vector_new, legend=false)\n\nci_bounds_new = quantile(est_vector_new, [0.025, 0.975])\nvline!(ci_bounds_new)\n\nBut: In most real world situation, we can not generate new data if the distribution is unknown. We have to work with the data we have …"
  },
  {
    "objectID": "material/4_thu/bootstrap/Bootstrap.html#the-practical-solution-resampling-bootstrap",
    "href": "material/4_thu/bootstrap/Bootstrap.html#the-practical-solution-resampling-bootstrap",
    "title": "Resampling-Based Statistics",
    "section": "",
    "text": "Idea: Use samples \\(\\mathbf{x}^{(1)}, \\mathbf{x}^{(2)}, \\ldots, \\mathbf{x}^{(B)}\\) that are not completely new, but obtained from resampling the original data \\(\\mathbf{x}\\).\nQuestion: How can one obtained another sample of the same size \\(n\\)? \\(\\leadsto\\) (re-)sampling with replacement\nThe overall procedure is as follows:\n\nGenerate \\(B\\) samples \\(\\mathbf{x}^{(1)}, \\mathbf{x}^{(2)}, \\ldots, \\mathbf{x}^{(B)}\\) of size \\(n\\) by independently resampling from \\(\\mathbf{x}\\) with replacement.\nApply the estimator separately to each sample \\(\\leadsto\\) \\(\\widehat \\theta(\\mathbf{x}^{(1)}), \\ldots, \\widehat \\theta(\\mathbf{x}^{(B)})\\)\nUse the empirical distribution \\(\\widehat \\theta(\\mathbf{x}^{(1)}), \\ldots, \\widehat \\theta(\\mathbf{x}^{(B)})\\) as a proxy to the theoretical one.\n\n\nest_vector_bs = zeros(B)\nfor i in 1:B\n  x_bs = rand(x, n)\n  est_vector_bs[i] = mean(x_bs)\nend\nhistogram(est_vector_bs, legend=false)\n\nci_bounds_bs = quantile(est_vector_bs, [0.025, 0.975])\nvline!(ci_bounds_bs) \nIf the sample \\(\\mathbf{x} = (x_1,\\ldots,x_n)\\) consists of independent and identically distributed data, the resampling procedure often provides a code proxy to the true (unknown) distribution of the estimator.\n\n\n\n\n\n\nNote\n\n\n\nThe above resampling procedure is called bootstrap (from ‘’To pull oneself up by one’s bootstraps.’’) as only data are used that are already available.\n\n\n\n\n\n\n\n\nTask 1\n\n\n\n\n\n\nReconsider the tree data set and the simple linear regression model Volume ~ Girth. Calculate a 95% confidence interval for \\(\\beta_1\\) via bootstrap and compare to the Julia output of the linear model.\nUse bootstrap to estimate the standard error for the predicted volume of a tree with Girth=10 the output above.\n\n\n\n\nProblem: If the data are not independent, the above (i.i.d.) bootstrap samples would have a misspecified dependence structure and therefore lead to a bad uncertainty estimate. For some situations, there are specific modifications of the bootstrap procedure (e.g. block bootstrap for time series), but they tend to work well only if dependence is sufficiently weak."
  },
  {
    "objectID": "material/4_thu/bootstrap/Bootstrap.html#parametric-bootstrap",
    "href": "material/4_thu/bootstrap/Bootstrap.html#parametric-bootstrap",
    "title": "Resampling-Based Statistics",
    "section": "",
    "text": "There are situations where it is hardly possible to construct reasonable confidence intervals or estimate the standard error. But one could at least get a rough guess of the uncertainty by the following thought experiment:\nAssume that the estimated parameter value \\(\\theta^*\\) would be equal to the true one. How uncertain would an estimate be in that case?\nThe answer is given by the following procedure, called parametric bootstrap:\n\nGenerate independent data \\(\\mathbf{x}^{(1)}, \\mathbf{x}^{(2)}, \\ldots, \\mathbf{x}^{(B)}\\) (each sample of size \\(n\\)) from the model with parameter \\(\\theta^*\\)\nApply the estimator separately to each sample \\(\\leadsto\\) \\(\\widehat \\theta(\\mathbf{x}^{(1)}), \\ldots, \\widehat \\theta(\\mathbf{x}^{(B)})\\)\nUse the empirical distribution \\(\\widehat \\theta(\\mathbf{x}^{(1)}), \\ldots, \\widehat \\theta(\\mathbf{x}^{(B)})\\) as a proxy to the theoretical one.\n\n\n\n\n\n\n\nTask 2\n\n\n\n\n\n\nConsider the following function that generate \\(n\\) correlated samples that are uniformly distributed on \\([\\mu-0-5,\\mu+0.5]\\).\n\nmyrand = function(mu, n) \n  rho = 0.9\n  res = zeros(n)\n  res[1] = rand(1)[1]\n  if n &gt; 1\n    for i in 2:n\n      res[i] = rho*res[i-1] .+ (1-rho)*rand(1)[1]\n    end\n  end\n  res .= mu - 0.5 .+ res\n  return(res)\nend \nThe additional parameter rho (between 0 and 1) controls the strength of dependence with 0 meaning independence and 1 meaning full dependence.\nWrite functions that estimate the standard deviation of the estimated mean via (a) generating new samples from the true unknown distribution, (b) i.i.d. bootstrap, (c) parametric bootstrap 2. Use the functions for different values of rho and compare the results."
  },
  {
    "objectID": "material/4_thu/parallel/slides.html",
    "href": "material/4_thu/parallel/slides.html",
    "title": "Research Software Engineering Summer School",
    "section": "",
    "text": "The slides are available in pptx format here. Note that there are a few extra slides in case you are motivated to learn more!"
  },
  {
    "objectID": "material/4_thu/parallel/slides.html#slides",
    "href": "material/4_thu/parallel/slides.html#slides",
    "title": "Research Software Engineering Summer School",
    "section": "",
    "text": "The slides are available in pptx format here. Note that there are a few extra slides in case you are motivated to learn more!"
  },
  {
    "objectID": "material/4_thu/parallel/slides.html#exercise",
    "href": "material/4_thu/parallel/slides.html#exercise",
    "title": "Research Software Engineering Summer School",
    "section": "Exercise",
    "text": "Exercise\nThe exercise is rendered as html here but can also be downloaded  Download as ipynb"
  },
  {
    "objectID": "material/1_mon/firststeps/tasks.html",
    "href": "material/1_mon/firststeps/tasks.html",
    "title": "Task 1",
    "section": "",
    "text": "Typically, you work in a Julia script ending in scriptname.jl\nYou concurrently have a REPL open, to not reload all packages etc. everytime. Further you typically have Revise.jl running in the background to automatically update your custom Packages / Modules (more to that later).\nYou can mark some code and execute it using ctrl + enter - you can also generate code-blocks using #--- and run a whole code-block using alt+enter\n\n\n\n\nOpen a new script statistic_functions.jl in VSCode in a folder of your choice.\nimplement a function called rse_sum1. This function should return true if provided with the following test: rse_sum(1:36) == 666. You should further make use of a for-loop.\nimplement a second function called rse_mean, which calculates the mean of the provided vector. Make sure to use the rse_sum function! Test it using rse_mean(-15:17) == 1\nNext implement a standard deviation function rse_std: \\(\\sqrt{\\frac{\\sum((x-mean(x))^2)}{n-1}}\\), this time you should use elementwise/broadcasting operators. Test it with rse_std(1:3) == 1.\nFinally, we will implement rse_tstat, returning the t-value with length(x)-1 DF, that the provided Array actually has a mean of 0. The formula is \\(\\frac{mean(x)}{std(x) / (sqrt(length(x)))}\\) Test it with rse_tstat(2:3) == 5.. Add the keyword argument σ that allows the user to optionally provide a pre-calculated standard deviation.\n\nWell done! You now have all functions defined with which we will continue our journey.\n\n\n\n\n\n\nBonus Task ProgressMeter\n\n\n\nfor very large sums we might want to add a progressmeter. To do so:\n]add ProgressMeter\nusing ProgressMeter\n...\n@showprogress for ...\n\n\nAnd that’s it! You should have a nice progress bar now"
  },
  {
    "objectID": "material/1_mon/firststeps/tasks.html#wait---how-do-i-even-run-things-in-juliavscode",
    "href": "material/1_mon/firststeps/tasks.html#wait---how-do-i-even-run-things-in-juliavscode",
    "title": "Task 1",
    "section": "",
    "text": "Typically, you work in a Julia script ending in scriptname.jl\nYou concurrently have a REPL open, to not reload all packages etc. everytime. Further you typically have Revise.jl running in the background to automatically update your custom Packages / Modules (more to that later).\nYou can mark some code and execute it using ctrl + enter - you can also generate code-blocks using #--- and run a whole code-block using alt+enter"
  },
  {
    "objectID": "material/1_mon/firststeps/tasks.html#the-exercise",
    "href": "material/1_mon/firststeps/tasks.html#the-exercise",
    "title": "Task 1",
    "section": "",
    "text": "Open a new script statistic_functions.jl in VSCode in a folder of your choice.\nimplement a function called rse_sum1. This function should return true if provided with the following test: rse_sum(1:36) == 666. You should further make use of a for-loop.\nimplement a second function called rse_mean, which calculates the mean of the provided vector. Make sure to use the rse_sum function! Test it using rse_mean(-15:17) == 1\nNext implement a standard deviation function rse_std: \\(\\sqrt{\\frac{\\sum((x-mean(x))^2)}{n-1}}\\), this time you should use elementwise/broadcasting operators. Test it with rse_std(1:3) == 1.\nFinally, we will implement rse_tstat, returning the t-value with length(x)-1 DF, that the provided Array actually has a mean of 0. The formula is \\(\\frac{mean(x)}{std(x) / (sqrt(length(x)))}\\) Test it with rse_tstat(2:3) == 5.. Add the keyword argument σ that allows the user to optionally provide a pre-calculated standard deviation.\n\nWell done! You now have all functions defined with which we will continue our journey.\n\n\n\n\n\n\nBonus Task ProgressMeter\n\n\n\nfor very large sums we might want to add a progressmeter. To do so:\n]add ProgressMeter\nusing ProgressMeter\n...\n@showprogress for ...\n\n\nAnd that’s it! You should have a nice progress bar now"
  },
  {
    "objectID": "material/1_mon/firststeps/tasks.html#footnotes",
    "href": "material/1_mon/firststeps/tasks.html#footnotes",
    "title": "Task 1",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nrse = research software engineering, we could use sum in a principled way, but it requires some knowledge you likely don’t have right now↩︎"
  },
  {
    "objectID": "material/1_mon/envs/envs_handout.html#environments-in-julia",
    "href": "material/1_mon/envs/envs_handout.html#environments-in-julia",
    "title": "Environments",
    "section": "Environments in Julia",
    "text": "Environments in Julia\nEvery folder with an Project.toml file has it’s own environment (see below)\nThe “base” environment is active by default:\n(@v1.9) pkg&gt;\nKeep this as empty+tidy as possible!\nTip: (you could also start julia by julia --project=\".\")\n\nTypical commands\n\nactivate\nUse activate . or activate ./path/to creates a new Project.toml in the selected folder (. means current folder), or activates it, if it already exists.\n\n\nstatus (st)\nShows the currently installed packages\n\n\nadd\nMultiple ways to add packages to the Project.toml:\n\nadd UnicodePlots\nadd https://github.com/JuliaPlots/UnicodePlots.jl\nspecify branch: add UnicodePlots#unicodeplots-docs\nspecify version add UnicodePlots@3.3\nadd ./path/to/localPackage\n\n\n\n\n\n\n\nNote\n\n\n\nFolders have to be git-repositories, see below. Probably better use develop\n\n\n\n\nremove (rm)\nremove package from Project.toml (not from ~/.julia, use gc - garbage collect for this)\n\n\ndevelop\n\ndev --local UnicodePlots\ndev ./Path/To/LocalPackage/\n\n\n\n\n\n\n\nNote\n\n\n\nYou can’t select a branch with dev and need to do it manually\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou are asking for the difference of dev ./Path/Package and add ./Path/Package? Good question! dev will always track the actual content of the folder - whereas add will make a “snapshot” of the last commit in that folder (has to be an git for add!). And you have to use ]up to actually update to new changes\n\n\n\n\npin / free\nYou can pin versions of packages, so that they are not updated. Unpin with free - also undo develop by using free\n\n\ninstantiate / resolve\ninstantiate setup all dependencies in the given Project.toml+Manifest.toml\nresolve update the Manifest.toml to respect the local setup"
  },
  {
    "objectID": "material/1_mon/envs/envs_handout.html#project.toml-manifest.toml",
    "href": "material/1_mon/envs/envs_handout.html#project.toml-manifest.toml",
    "title": "Environments",
    "section": "Project.toml & Manifest.toml",
    "text": "Project.toml & Manifest.toml\n\n📄Project.toml\nThe “big picture”: keeps track of user-added dependencies (+ compatabilities + header)\n[deps]\nPythonCall = \"6099a3de-0909-46bc-b1f4-468b9a2dfc0d\"\nRCall = \"6f49c342-dc21-5d91-9882-a32aef131414\"\n\n\n📄Manifest.toml\nThe “details”: keeps track of all versions of all dependencies, and dependencies of dependencies\njulia_version = \"1.9.2\"\n\n[[deps.AbstractPlutoDingetjes]]\ndeps = [\"Pkg\"]\ngit-tree-sha1 = \"8eaf9f1b4921132a4cff3f36a1d9ba923b14a481\"\nuuid = \"6e696c72-6542-2067-7265-42206c756150\"\nversion = \"1.1.4\"\n\n[[deps.ArgTools]]\nuuid = \"0dad84c5-d112-42e6-8d28-ef12dabb789f\"\nversion = \"1.1.1\"\n\n[[deps.BibInternal]]\ngit-tree-sha1 = \"3a760b38ba8da19e64d29244f06104823ff26f25\"\nuuid = \"2027ae74-3657-4b95-ae00-e2f7d55c3e64\"\nversion = \"0.3.4\"\n\n[...]"
  },
  {
    "objectID": "material/1_mon/envs/envs_handout.html#projects-in-julia",
    "href": "material/1_mon/envs/envs_handout.html#projects-in-julia",
    "title": "Environments",
    "section": "Projects in Julia",
    "text": "Projects in Julia\nFormally, projects don’t have specific requirements. You should activate an environment (Project.toml+Manifest.toml) in the main folder though. I recommend the following minimal structure:\n\n./src/ - all functions should go there\n./scripts/ - all actual scripts should go here,\n./README.md - Write what this is about, who you are etc.\n./Project.toml - Your explicit dependencies\n./Manifest.toml - Your implicit dependencies + versions &lt;– this makes it reproducible!\n\n\n\n\n\n\n\nTip\n\n\n\nOne recommendation is to use DrWatson.initialize_project([path]) to start a new project - it will generate a nice folder structure + provide some other helpful DrWatson.jl features.\n\n\n\n\n\n\n\n\nClick to expand the full datastructure\n\n\n\n\n\n│projectdir          &lt;- Project's main folder. It is initialized as a Git\n│                       repository with a reasonable .gitignore file.\n│\n├── _research        &lt;- WIP scripts, code, notes, comments,\n│   |                   to-dos and anything in an alpha state.\n│   └── tmp          &lt;- Temporary data folder.\n│\n├── data             &lt;- **Immutable and add-only!**\n│   ├── sims         &lt;- Data resulting directly from simulations.\n│   ├── exp_pro      &lt;- Data from processing experiments.\n│   └── exp_raw      &lt;- Raw experimental data.\n│\n├── plots            &lt;- Self-explanatory.\n├── notebooks        &lt;- Jupyter, Weave or any other mixed media notebooks.\n│\n├── papers           &lt;- Scientific papers resulting from the project.\n│\n├── scripts          &lt;- Various scripts, e.g. simulations, plotting, analysis,\n│   │                   The scripts use the `src` folder for their base code.\n│   └── intro.jl     &lt;- Simple file that uses DrWatson and uses its greeting.\n│\n├── src              &lt;- Source code for use in this project. Contains functions,\n│                       structures and modules that are used throughout\n│                       the project and in multiple scripts.\n│\n├── README.md        &lt;- Optional top-level README for anyone using this project.\n├── .gitignore       &lt;- by default ignores _research, data, plots, videos,\n│                       notebooks and latex-compilation related files.\n│\n├── Manifest.toml    &lt;- Contains full list of exact package versions used currently.\n└── Project.toml     &lt;- Main project file, allows activation and installation.\n                        Includes DrWatson by default."
  },
  {
    "objectID": "material/1_mon/envs/envs_handout.html#packages-in-julia",
    "href": "material/1_mon/envs/envs_handout.html#packages-in-julia",
    "title": "Environments",
    "section": "Packages in Julia",
    "text": "Packages in Julia\nSeveral thousand packages exist in Julia already. Take a thorough look before starting something new!\n\nMinimal requirements for ]add to work\nMinimal structure\nOne git-repository containing:\n\n./src/MyStatsPackage.jl\n\n(module MyStatsPackage)\n\n./Project.toml\n\nname = \"MyStatsPackage\"\nuuid =\"b4cd1eb8-1e24-11e8-3319-93036a3eb9f3\"\n([compat] entries)\n(version= \"0.1.0\")\n\n\n\n\nAdditional requirements to register\nJulia supports many registries (you can host your own!), which are just fancy GITs that index what version is available at what git-url for each registered package.\nThe default registry is JuliaRegistries/General.\nTo register at the general registiry, you need additionally::\n\n[compat] entries for all dependencies\na version=\na supported license\nSome restrictions on the name (e.g. nothing with Julia, only ASCII, etc.)"
  },
  {
    "objectID": "material/1_mon/envs/envs_handout.html#lets-generate-our-first-package",
    "href": "material/1_mon/envs/envs_handout.html#lets-generate-our-first-package",
    "title": "Environments",
    "section": "Let’s generate our first package!",
    "text": "Let’s generate our first package!\n] generate MyStatsPackage\n\nAdding dependencies\n]activate ./path/to/MyStatsPackage\n]add ProgressMeter\n1]compat\n\n1\n\nlet’s directly add a compat entry for ProgressMeter\n\n\n\n\nSemantic Versioning\nFollowing semver - three parts:\nv2.7.5\nmeans:\n\nMajor 2\nMinor 7\nBugfix 5\nBump Major if you propose backward-breaking changes\nBump Minor if you only introduce new features -Bump Bugfix if you, well, fix bugs\n\nSpecial case:\nv0.37.1\nMeans package is in development and not stable. Bump Major if you release it Bump Minor for breaking changes Bump Bugfix if you fix bugs or release new features\n\n\nCompat entries\ncompat entries define with what versions your package is compatible with\n[compat]\n1AllMinorReleases1 = \"1\"\n2AllMinorReleases2 = \"1.5\"\n3AllMinorReleases3 = \"1.5.3\"\n4ExactPackage = \"=1.5.6\"\nMultiVersionexample = \"0.5,1.2,2\"\n5DevelopPackage = \"0.2.3\"\n\n1\n\n[1.0.0-2)\n\n2\n\n[1.5.0-2)\n\n3\n\n[1.5.3-2)\n\n4\n\n[1.5.6]\n\n5\n\n[0.2.3 - 0.3)\n\n\nAs you can see, develop version (version &lt; 1) are treated a bit special in Julia, and different to semver. Read more here\n\n\n\n\n\n\nWarning\n\n\n\nkeep the compat list in alphabetical order - github-actions might behave very strange else.\n\n\n\n\nInternals of a package\nThe file ./src/MyStatsPackage.jl should contain:\nmodule MyStatsPackage\n1using ProgressMeter\ninclude(\"src/stats_functions.jl\")\n\nexport sum\nexport mean, tstat\n\nend\n\n1\n\nWe use GLMakie as a simple example as you need it on Wednesday again anyway - it does take a while to install though!\n\n\nNow we are ready to use the package from a different environment\n]dev ./path/to/MyStatsPackage"
  },
  {
    "objectID": "material/1_mon/envs/envs_handout.html#footnotes",
    "href": "material/1_mon/envs/envs_handout.html#footnotes",
    "title": "Environments",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nlibraries, dlls, .so etc.↩︎"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides.html",
    "href": "material/1_mon/rse/rse_basics_slides.html",
    "title": "Introduction to the Research Software Engineering Summerschol",
    "section": "",
    "text": "www.simtech-summerschool.de\nFind all slides, all materials, and the schedule\n(activate presentation mode)\n\n\n\n\nBenedikt has Corona since last week - he hopes to make it. He hopes to give this talk hybrid, but we’ll see!\nSome words on what can be paid: All lunch + Food Mo + We + Bowling Entry+Shoes. No food/drinks on any other days unfortunately.\n\n\n\n\n\nCheck out the schedule\nIn the beginning we will focus on the Research Software Engineering part.\nAdvanced Julia, later this week and by custom request. We hope we put enough slack time in!\n\n\n\n\n\n\n\n\n\n\nPrzemysław Szufel\n\n\n\n\n\n\n\nHendrik Ranocha\n\n\n\n\n\n\n\nLisa DeBruine\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMarco Oesting\n\n\n\n\n\n\n\nBenjamin Uekermann\n\n\n\n\n\n\n\nBenedikt Ehinger"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides.html#most-important-link",
    "href": "material/1_mon/rse/rse_basics_slides.html#most-important-link",
    "title": "Introduction to the Research Software Engineering Summerschol",
    "section": "",
    "text": "www.simtech-summerschool.de\nFind all slides, all materials, and the schedule\n(activate presentation mode)"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides.html#last-minute-organization-issues",
    "href": "material/1_mon/rse/rse_basics_slides.html#last-minute-organization-issues",
    "title": "Introduction to the Research Software Engineering Summerschol",
    "section": "",
    "text": "Benedikt has Corona since last week - he hopes to make it. He hopes to give this talk hybrid, but we’ll see!\nSome words on what can be paid: All lunch + Food Mo + We + Bowling Entry+Shoes. No food/drinks on any other days unfortunately."
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides.html#structure-of-the-summer-school",
    "href": "material/1_mon/rse/rse_basics_slides.html#structure-of-the-summer-school",
    "title": "Introduction to the Research Software Engineering Summerschol",
    "section": "",
    "text": "Check out the schedule\nIn the beginning we will focus on the Research Software Engineering part.\nAdvanced Julia, later this week and by custom request. We hope we put enough slack time in!"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides.html#your-teaching-staff-i",
    "href": "material/1_mon/rse/rse_basics_slides.html#your-teaching-staff-i",
    "title": "Introduction to the Research Software Engineering Summerschol",
    "section": "",
    "text": "Przemysław Szufel\n\n\n\n\n\n\n\nHendrik Ranocha\n\n\n\n\n\n\n\nLisa DeBruine"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides.html#your-teaching-staff-ii",
    "href": "material/1_mon/rse/rse_basics_slides.html#your-teaching-staff-ii",
    "title": "Introduction to the Research Software Engineering Summerschol",
    "section": "",
    "text": "Marco Oesting\n\n\n\n\n\n\n\nBenjamin Uekermann\n\n\n\n\n\n\n\nBenedikt Ehinger"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides.html#starting-points",
    "href": "material/1_mon/rse/rse_basics_slides.html#starting-points",
    "title": "Introduction to the Research Software Engineering Summerschol",
    "section": "Starting Points",
    "text": "Starting Points\n\nDORA declaration in 2012: reshape how research impact should be assessed underlining importance of software\n\n\nFor the purposes of research assessment, consider the value and impact of all research outputs (including datasets and software) in addition to research publications …\n\n\nUK survey in 2014: 7 out of 10 researchers could not conduct research without software.\nDFG funding calls on research software sustainability in 2016 & 2019 & 2023\nNationale Forschungsdaten Infrastruktur, NFDI since 2020\nBUT Lack of careers for software developers in academia\nBUT Lack of reproducibility of research that uses software (“works for me on my machine” vs. “works for everyone everywhere”)"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides.html#rse-movement",
    "href": "material/1_mon/rse/rse_basics_slides.html#rse-movement",
    "title": "Introduction to the Research Software Engineering Summerschol",
    "section": "RSE Movement",
    "text": "RSE Movement\n… academic software developers needed a name: Research Software Engineers\nUK Society of RSE:\n\nA Research Software Engineer (RSE) combines professional software engineering expertise with an intimate understanding of research.\n\n\n“Movement” started in the UK, first UK RSE conference in 2016\nFirst conferences in Germany and the Netherlands in 2019\nde-RSE position paper in 2020\nSecond Thursday of October is the International RSE Day\nWhy be an RSE? Interesting and novel projects, technical freedom, RSEs come from varied backgrounds, development for social good"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides.html#do-i-need-this-in-industry",
    "href": "material/1_mon/rse/rse_basics_slides.html#do-i-need-this-in-industry",
    "title": "Introduction to the Research Software Engineering Summerschol",
    "section": "Do I need this in Industry?",
    "text": "Do I need this in Industry?\n\nYes. Research also happens in industry.\nAll RSE things we learn (Git, packaging, CI/CD, virtualization, documentation, …) is also highly relevant for non-research software.\nCompanies use (more and more) the same workflows and tools.\n\nIt is not just about coding. It is about collaborative work.\n\nOpen-source development excellent door opener for industry.\nSome companies use open-source software and need to make contributions.\nSome companies develop their software as open-source software."
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides.html#why-rsejulia",
    "href": "material/1_mon/rse/rse_basics_slides.html#why-rsejulia",
    "title": "Introduction to the Research Software Engineering Summerschol",
    "section": "Why RSE+Julia?",
    "text": "Why RSE+Julia?\n\nRSE is comparatively easy in Julia\nJulia resolves 2-language problem: “normalish” Scientists can write1 fast tools\nHendrik will dive into details"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides.html#footnotes",
    "href": "material/1_mon/rse/rse_basics_slides.html#footnotes",
    "title": "Introduction to the Research Software Engineering Summerschol",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nand support!↩︎"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides_revealjs.html#most-important-link",
    "href": "material/1_mon/rse/rse_basics_slides_revealjs.html#most-important-link",
    "title": "Research Software Engineering Summer School",
    "section": "Most important link",
    "text": "Most important link\nwww.simtech-summerschool.de\nFind all slides, all materials, and the schedule\n(activate presentation mode)"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides_revealjs.html#last-minute-organization-issues",
    "href": "material/1_mon/rse/rse_basics_slides_revealjs.html#last-minute-organization-issues",
    "title": "Research Software Engineering Summer School",
    "section": "Last minute organization issues",
    "text": "Last minute organization issues\n\nBenedikt has Corona since last week - he hopes to make it. He hopes to give this talk hybrid, but we’ll see!\nSome words on what can be paid: All lunch + Food Mo + We + Bowling Entry+Shoes. No food/drinks on any other days unfortunately."
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides_revealjs.html#structure-of-the-summer-school",
    "href": "material/1_mon/rse/rse_basics_slides_revealjs.html#structure-of-the-summer-school",
    "title": "Research Software Engineering Summer School",
    "section": "Structure of the summer school",
    "text": "Structure of the summer school\n\nCheck out the schedule\nIn the beginning we will focus on the Research Software Engineering part.\nAdvanced Julia, later this week and by custom request. We hope we put enough slack time in!"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides_revealjs.html#your-teaching-staff-i",
    "href": "material/1_mon/rse/rse_basics_slides_revealjs.html#your-teaching-staff-i",
    "title": "Research Software Engineering Summer School",
    "section": "Your teaching staff I",
    "text": "Your teaching staff I\n\n\n\n\n\n\nPrzemysław Szufel\n\n\n\n\n\n\n\nHendrik Ranocha\n\n\n\n\n\n\n\nLisa DeBruine"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides_revealjs.html#your-teaching-staff-ii",
    "href": "material/1_mon/rse/rse_basics_slides_revealjs.html#your-teaching-staff-ii",
    "title": "Research Software Engineering Summer School",
    "section": "Your teaching Staff II",
    "text": "Your teaching Staff II\n\n\n\n\n\n\nMarco Oesting\n\n\n\n\n\n\n\nBenjamin Uekermann\n\n\n\n\n\n\n\nBenedikt Ehinger"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides_revealjs.html#starting-points",
    "href": "material/1_mon/rse/rse_basics_slides_revealjs.html#starting-points",
    "title": "Research Software Engineering Summer School",
    "section": "Starting Points",
    "text": "Starting Points\n\nDORA declaration in 2012: reshape how research impact should be assessed underlining importance of software\n\n\nFor the purposes of research assessment, consider the value and impact of all research outputs (including datasets and software) in addition to research publications …\n\n\nUK survey in 2014: 7 out of 10 researchers could not conduct research without software.\nDFG funding calls on research software sustainability in 2016 & 2019 & 2023\nNationale Forschungsdaten Infrastruktur, NFDI since 2020\nBUT Lack of careers for software developers in academia\nBUT Lack of reproducibility of research that uses software (“works for me on my machine” vs. “works for everyone everywhere”)"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides_revealjs.html#rse-movement",
    "href": "material/1_mon/rse/rse_basics_slides_revealjs.html#rse-movement",
    "title": "Research Software Engineering Summer School",
    "section": "RSE Movement",
    "text": "RSE Movement\n… academic software developers needed a name: Research Software Engineers\nUK Society of RSE:\n\nA Research Software Engineer (RSE) combines professional software engineering expertise with an intimate understanding of research.\n\n\n“Movement” started in the UK, first UK RSE conference in 2016\nFirst conferences in Germany and the Netherlands in 2019\nde-RSE position paper in 2020\nSecond Thursday of October is the International RSE Day\nWhy be an RSE? Interesting and novel projects, technical freedom, RSEs come from varied backgrounds, development for social good"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides_revealjs.html#do-i-need-this-in-industry",
    "href": "material/1_mon/rse/rse_basics_slides_revealjs.html#do-i-need-this-in-industry",
    "title": "Research Software Engineering Summer School",
    "section": "Do I need this in Industry?",
    "text": "Do I need this in Industry?\n\nYes. Research also happens in industry.\nAll RSE things we learn (Git, packaging, CI/CD, virtualization, documentation, …) is also highly relevant for non-research software.\nCompanies use (more and more) the same workflows and tools.\n\nIt is not just about coding. It is about collaborative work.\n\nOpen-source development excellent door opener for industry.\nSome companies use open-source software and need to make contributions.\nSome companies develop their software as open-source software."
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides_revealjs.html#why-rsejulia",
    "href": "material/1_mon/rse/rse_basics_slides_revealjs.html#why-rsejulia",
    "title": "Research Software Engineering Summer School",
    "section": "Why RSE+Julia?",
    "text": "Why RSE+Julia?\n\nRSE is comparatively easy in Julia\nJulia resolves 2-language problem: “normalish” Scientists can write1 fast tools\nHendrik will dive into details\n\n\n\n\n\nand support!"
  },
  {
    "objectID": "material/3_wed/vis/handout.html",
    "href": "material/3_wed/vis/handout.html",
    "title": "Makie.jl",
    "section": "",
    "text": "Four backends:\n\nCairoMakie - SVG\nGLMakie - 2D/3D/fast interactivity\nWGLMakie - Same as GLMakie, but in browser\nRPRMakie - experimental raytracing\n\nI will use GLMakie or CairoMakie. To switch use CairoMakie.activate!()\n\n\n\nf = Figure()\nx = rand(100)\ny = rand(100)\n\nscatter(f[1,1],x,y)\nlines(f[1,2],x,y)\nhist(f[2,1],x)\ndensity!(f[2,1],x) # inplace -&gt; add to current plot\nstem(f[2,2],x)\n\n\n\nMakie has the best layouting tool I have ever used. full tutorial here\nf = Figure()\n\n# we plan to generate two subfigures (with subplots each) - better to generate two \"separate\" layouts\nga = f[1, 1] = GridLayout()\ngb = f[2, 1] = GridLayout()\n\naxtop   = Axis(ga[1,1])\naxmain  = Axis(ga[2, 1], xlabel = \"before\", ylabel = \"after\")\naxright = Axis(ga[2, 2])\n\n\nlabels = [\"treatment\", \"placebo\", \"control\"]\nd = randn(3, 100, 2) .+ [1, 3, 5]\n\nfor (label, col) in zip(labels, eachslice(d, dims = 1))\n    scatter!(axmain, col, label = label)\n    density!(axtop, col[:, 1])\n    density!(axright, col[:, 2], direction = :y)\nend\n\nlinkyaxes!(axmain, axright)\nlinkxaxes!(axmain, axtop)\nhidedecorations!(axtop, grid = false)\nhidedecorations!(axright, grid = false)\n\n#--- add a legend\nleg = Legend(ga[1, 2], axmain)\n\n# absolute size for now :shrug:\nleg.width =100\nleg.height =100\n\nleg.tellwidth = true\nleg.tellheight = true\n\n#----\n# second plot\nax,h = heatmap(gb[1,1],rand(100,10),colorrange = [0,1])\nax2,h2 = heatmap(gb[1,2],rand(100,10),colorrange = [0,1])\ncb = Colorbar(gb[1,3],h)\ncb.alignmode = Mixed(right=0)\n\n#----\n# Labels\nLabel(ga[1, 1, TopLeft()], \"A1\", font = :bold, padding = (0, 0, 5, 0))\nLabel(ga[2, 1, TopLeft()], \"A2\", font = :bold, padding = (0, 0, 5, 0))\nLabel(ga[2, 2, TopLeft()], \"A3\", font = :bold, padding = (0, 0, 5, 0))\n\nLabel(gb[1, 1, TopLeft()], \"B\", font = :bold, padding = (0, 0, 5, 0))\n\n#---\n# top plot needs more space\nrowsize!(f.layout,2,Relative(0.3))\n\n#---\nf"
  },
  {
    "objectID": "material/3_wed/vis/handout.html#backends",
    "href": "material/3_wed/vis/handout.html#backends",
    "title": "Makie.jl",
    "section": "",
    "text": "Four backends:\n\nCairoMakie - SVG\nGLMakie - 2D/3D/fast interactivity\nWGLMakie - Same as GLMakie, but in browser\nRPRMakie - experimental raytracing\n\nI will use GLMakie or CairoMakie. To switch use CairoMakie.activate!()"
  },
  {
    "objectID": "material/3_wed/vis/handout.html#standard-plotting",
    "href": "material/3_wed/vis/handout.html#standard-plotting",
    "title": "Makie.jl",
    "section": "",
    "text": "f = Figure()\nx = rand(100)\ny = rand(100)\n\nscatter(f[1,1],x,y)\nlines(f[1,2],x,y)\nhist(f[2,1],x)\ndensity!(f[2,1],x) # inplace -&gt; add to current plot\nstem(f[2,2],x)"
  },
  {
    "objectID": "material/3_wed/vis/handout.html#layouts-for-scientific-figures",
    "href": "material/3_wed/vis/handout.html#layouts-for-scientific-figures",
    "title": "Makie.jl",
    "section": "",
    "text": "Makie has the best layouting tool I have ever used. full tutorial here\nf = Figure()\n\n# we plan to generate two subfigures (with subplots each) - better to generate two \"separate\" layouts\nga = f[1, 1] = GridLayout()\ngb = f[2, 1] = GridLayout()\n\naxtop   = Axis(ga[1,1])\naxmain  = Axis(ga[2, 1], xlabel = \"before\", ylabel = \"after\")\naxright = Axis(ga[2, 2])\n\n\nlabels = [\"treatment\", \"placebo\", \"control\"]\nd = randn(3, 100, 2) .+ [1, 3, 5]\n\nfor (label, col) in zip(labels, eachslice(d, dims = 1))\n    scatter!(axmain, col, label = label)\n    density!(axtop, col[:, 1])\n    density!(axright, col[:, 2], direction = :y)\nend\n\nlinkyaxes!(axmain, axright)\nlinkxaxes!(axmain, axtop)\nhidedecorations!(axtop, grid = false)\nhidedecorations!(axright, grid = false)\n\n#--- add a legend\nleg = Legend(ga[1, 2], axmain)\n\n# absolute size for now :shrug:\nleg.width =100\nleg.height =100\n\nleg.tellwidth = true\nleg.tellheight = true\n\n#----\n# second plot\nax,h = heatmap(gb[1,1],rand(100,10),colorrange = [0,1])\nax2,h2 = heatmap(gb[1,2],rand(100,10),colorrange = [0,1])\ncb = Colorbar(gb[1,3],h)\ncb.alignmode = Mixed(right=0)\n\n#----\n# Labels\nLabel(ga[1, 1, TopLeft()], \"A1\", font = :bold, padding = (0, 0, 5, 0))\nLabel(ga[2, 1, TopLeft()], \"A2\", font = :bold, padding = (0, 0, 5, 0))\nLabel(ga[2, 2, TopLeft()], \"A3\", font = :bold, padding = (0, 0, 5, 0))\n\nLabel(gb[1, 1, TopLeft()], \"B\", font = :bold, padding = (0, 0, 5, 0))\n\n#---\n# top plot needs more space\nrowsize!(f.layout,2,Relative(0.3))\n\n#---\nf"
  },
  {
    "objectID": "material/3_wed/vis/handout.html#pluto.jl",
    "href": "material/3_wed/vis/handout.html#pluto.jl",
    "title": "Makie.jl",
    "section": "Pluto.jl",
    "text": "Pluto.jl\n\nInstallation / Start\n]add Pluto\nPluto.run()\n\n\n\n\n\n\nTip\n\n\n\nIf you need remote access, run it via Pluto.run(host=\"0.0.0.0\")\n\n\n\n\nSliders\nA slider is defined like this:\n@bind yourVarName PlutoUI.Slider(from:to) # from:step:to is optional, step by def 1\nif you move the slider, yourVarName + all cells that depend on that variable are automatically recalculated. Quick & dirty way to generate an interactive plot"
  },
  {
    "objectID": "material/3_wed/vis/handout.html#bonus-makie-interactivity",
    "href": "material/3_wed/vis/handout.html#bonus-makie-interactivity",
    "title": "Makie.jl",
    "section": "Bonus: Makie Interactivity",
    "text": "Bonus: Makie Interactivity\nThere is another way to get to interactivity. Using Observables.jl\nTo provide a simple example of the logic:\nusing GLMakie\n\nx = rand(10_000)\nobs_ix = Observable(1) # index to plot until\n1scatter(@lift(x[1:obs_ix])) # non-interactive example\n\nf = Figure()\nobs_sl = GLMakie.Slider(f[2,1],range=1:length(x))\ny = @lift(x[1:$(obs_sl.value)])\nax,s = scatter(f[1,1],y)\nxlims!(ax,0,length(x))\n\n1\n\n@lift does the heavy lifting (hrhr) here. It adds a listener to obs_ix, whenever that value is changed, the value of the output of @lift is changed as well ## Task 2: Interactivity Click here for the next task"
  },
  {
    "objectID": "material/3_wed/vis/handout.html#for-ggplot-enthusiasts",
    "href": "material/3_wed/vis/handout.html#for-ggplot-enthusiasts",
    "title": "Makie.jl",
    "section": "For ggplot enthusiasts",
    "text": "For ggplot enthusiasts\nYou could use TidierPlots.jl - a ggplot clone\nCheck out the AoG/GGplot cheatsheet:"
  },
  {
    "objectID": "material/3_wed/vis/handout.html#algebraofgraphics.jl",
    "href": "material/3_wed/vis/handout.html#algebraofgraphics.jl",
    "title": "Makie.jl",
    "section": "AlgebraOfGraphics.jl",
    "text": "AlgebraOfGraphics.jl\n\n\n\n\n\n\nNote\n\n\n\nCheckout this awesome AOG tutorial Really beautifully made!\n\n\n\nLoading data\nusing GLMakie # backend\nusing AlgebraOfGraphics\nusing PalmerPenguins, DataFrames  # example dataset\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()))\nfirst(penguins, 6)\n\n\n\n\n\n\nNote\n\n\n\nA tidy dataframe is a dataframe that follows these three rules:\n\nEvery column is a variable.\nEvery row is an observation.\nEvery cell is a single value.\n\nTidy data make your visualization life much easier as you will see!\n\n\n\n\nAoG basics\ndata * mapping * visual\n  vis_pen = data(penguins) * mapping(:bill_length_mm, :bill_depth_mm) * visual(Scatter) \n  draw(vis_pen)\n\n\nAdding color\nvis_pencolor = data(penguins) * mapping(:bill_length_mm, :bill_depth_mm, color = :species) * visual(Scatter)\ndraw(vis_pencolor)\nBut that is a bit redundant, you can shortcut this, by reusing existing mappings / inputs:\nvis_pencolor2 = vis_pen * mapping(color=:species)\ndraw(vis_pencolor2)\n\n\nWhy AlgebraOfGraphics?\nFollows some algebraic rules of multiplying out sums\ndata * mapping * (visual(Scatter)+visual(Lines))\n\ndata(penguins) * mapping(:bill_length_mm, :bill_depth_mm) * (visual(Scatter)+visual(Lines)) |&gt; draw\n\n\nFaceting\ndata(penguins) * mapping(:bill_length_mm, :bill_depth_mm)  * mapping(color = :species, col = :sex) |&gt; draw\ndata(penguins) * mapping(:bill_length_mm, :bill_depth_mm)  * mapping(color = :species, col = :sex,row=:body_mass_g =&gt; x-&gt; x&gt;3500) |&gt; draw\n\n\nLinear & Non-linear summaries\ndata(penguins) * mapping(:bill_length_mm, :bill_depth_mm, color=:species) * (linear() + visual(Scatter)) |&gt; draw\ndata(penguins) * mapping(:bill_length_mm, :bill_depth_mm, color=:species) * (smooth() + visual(Scatter)) |&gt; draw\n\n\nAdvanced\nh = data(penguins) * mapping(:bill_length_mm, :bill_depth_mm, color=:species) * (smooth() + visual(Scatter)) |&gt; draw\nh.grid\nax = h.grid[1,1].axis\nax + tab -&gt; ax.xticks\nh"
  },
  {
    "objectID": "material/3_wed/vis/handout.html#task-3",
    "href": "material/3_wed/vis/handout.html#task-3",
    "title": "Makie.jl",
    "section": "Task 3",
    "text": "Task 3\nClick here for the next task"
  },
  {
    "objectID": "material/3_wed/vis/handout.html#footnotes",
    "href": "material/3_wed/vis/handout.html#footnotes",
    "title": "Makie.jl",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nit is technically possible to combine Pluto with Observables, but it is a bit buggy↩︎"
  },
  {
    "objectID": "material/3_wed/regression/MultipleRegressionBasics.html",
    "href": "material/3_wed/regression/MultipleRegressionBasics.html",
    "title": "Multiple Regression Basics",
    "section": "",
    "text": "using Statistics\nusing Plots\nusing RDatasets\n\ntrees = dataset(\"datasets\", \"trees\")\n\nscatter(trees.Volume, trees.Girth,\n        legend=false, xlabel=\"Girth\", ylabel=\"Volume\")\nAim: Find relationship between the response variable volume and the explanatory variable/covariate girth? Can we predict the volume of a tree given its girth?\nscatter(trees.Girth, trees.Volume,\n        legend=false, xlabel=\"Girth\", ylabel=\"Volume\")\nplot!(x -&gt; -37 + 5*x)\nFirst Guess: There is a linear relation!\n\n\n\n\nMain assumption: up to some error term, each measurement of the response variable \\(y_i\\) depends linearly on the corresponding value \\(x_i\\) of the covariate\n\\(\\leadsto\\) (Simple) Linear Model: \\[y_i = \\beta_0 + \\beta_1 x_i + \\varepsilon_i,   \\qquad  i=1,...,n,\\] where \\(\\varepsilon_i \\sim \\mathcal{N}(0,\\sigma^2)\\) are independent normally distributed errors with unknown variance \\(\\sigma^2\\).\nAim: Find the straight line that fits best, i.e., find the optimal estimators for \\(\\beta_0\\) and \\(\\beta_1\\).\nTypical choice: Least squares estimator (= maximum likelihood estimator for normal errors)\n\\[ (\\hat \\beta_0, \\hat \\beta_1) = \\mathrm{argmin} \\ \\| \\mathbf{y} - \\mathbf{1} \\beta_0 - \\mathbf{x} \\beta_1\\|^2 \\]\nwhere \\(\\mathbf{y}\\) is the vector of responses, \\(\\mathbf{x}\\) is the vector of covariates and \\(\\mathbf{1}\\) is a vector of ones.\nWritten in matrix style:\n\\[\n(\\hat \\beta_0, \\hat \\beta_1) = \\mathrm{argmin} \\ \\left\\| \\mathbf{y} - (\\mathbf{1},\\mathbf{x}) \\left( \\begin{array}{c} \\beta_0\\\\ \\beta_1\\end{array}\\right) \\right\\|^2\n\\]\nNote: There is a closed-form expression for \\((\\hat \\beta_0, \\hat \\beta_1)\\). We will not make use of it here, but rather use Julia to solve the problem.\nlm(@formula(Volume ~ Girth), trees)\nInterpretation of the Julia output:\n\ncolumn estimate : least square estimates for \\(\\hat \\beta_0\\) and \\(\\hat \\beta_1\\)\ncolumn Std. Error : estimated standard deviation \\(\\hat s_{\\hat \\beta_i}\\) of the estimator \\(\\hat \\beta_i\\)\ncolumn t value : value of the \\(t\\)-statistics\n\\[ t_i = {\\hat \\beta_i \\over \\hat s_{\\hat \\beta_i}}, \\quad i=0,1, \\]\nUnder the hypothesis \\(\\beta_i=0\\), the test statistics \\(t_i\\) would follow a \\(t\\)-distribution.\ncolumn Pr(&gt;|t|): \\(p\\)-values for the hypotheses \\(\\beta_i=0\\) for \\(i=0,1\\)\n\n\n\n\n\n\n\nTip\n\n\n\nThe command rand(n) generates a sample of n “random” (i.e., uniformly distributed) random numbers. If you want to sample from another distribution, use the Distributions package, define an object being the distribution of interest, e.g. d = Normal(0.0, 2.0) for a normal distribution with mean 0.0 and standard deviation 2.0, and sample n times from this distribution by rand(d, n).\n\n\n\n\n\n\n\n\nTask 1\n\n\n\n\n\n\nGenerate \\(n=20\\) covariates \\(\\mathbf{x}\\) randomly.\nGiven these covariates and the true parameters \\(\\beta_0=-3\\), \\(\\beta_1=2\\) and \\(\\sigma=0.5\\), simulate responses from a linear model (with normally distributed errors) and estimate the coefficients \\(\\beta_0\\) and \\(\\beta_1\\).\nPlay with different choices of the parameters above (including the sample size \\(n\\)) to see the effects on the parameter estimates and the \\(p\\)-values.\n\n\n\n\n\n\n\nIdea: Generalize the simple linear regression model to multiple covariates, w.g., predict volume using girth and `height``.\n\\(\\leadsto\\) Linear Model: \\[y_i = \\beta_0 + \\beta_1 x_{i1} + \\ldots + \\beta_p x_{ip} + \\varepsilon_i,   \\qquad  i=1,...,n,\\]where\n\n\\(y_i\\): \\(i\\)-th measurement of the response,\n\\(x_{i1}\\): \\(i\\) th value of first covariate,\n…\n\\(x_{ip}\\): \\(i\\)-th value of \\(p\\)-th covariate,\n\\(\\varepsilon_i \\sim \\mathcal{N}(0,\\sigma^2)\\): independent normally distributed errors with unknown variance \\(\\sigma^2\\).\n\nTask: Find the optimal estimators for \\(\\mathbf{\\beta} = (\\beta_0, \\beta_1, \\ldots, \\beta_p)\\).\nOur choice again: Least squares estimator (= maximum likelihood estimator for normal errors)\n\\[\n\\hat \\beta = \\mathrm{argmin} \\ \\| \\mathbf{y} - \\mathbf{1} \\beta_0 - \\mathbf{x}_1 \\beta_1 - \\ldots - \\mathbf{x}_p \\beta_p\\|^2\n\\]\nwhere \\(\\mathbf{y}\\) is the vector of responses, \\(\\mathbf{x}\\)_j is the vector of the \\(j\\) th covariate and \\(\\mathbf{1}\\) is a vector of ones.\nWritten in matrix style:\n\\[\n\\mathbf{\\hat \\beta} = \\mathrm{argmin} \\ \\left\\| \\mathbf{y} - (\\mathbf{1},\\mathbf{x}_1,\\ldots,\\mathbf{x}_p) \\left( \\begin{array}{c} \\beta_0 \\\\ \\beta_1 \\\\ \\vdots \\\\ \\beta_p\\end{array} \\right) \\right\\|^2\n\\]\nDefining the design matrix\n\\[ \\mathbf{X} = \\left( \\begin{array}{cccc}\n                1 & x_{11} & \\ldots & x_{1p} \\\\\n                \\vdots & \\vdots & \\ddots & \\vdots \\\\\n                1 & x_{n1} & \\ldots & x_{np}\n                \\end{array}\\right) \\qquad\n  (\\text{size } n \\times (p+1)), \\]\nwe get the short form\n\\[\n\\mathbf{\\hat \\beta} = \\mathrm{argmin} \\ \\| \\mathbf{y} - \\mathbf{X} \\mathbf{\\beta}  \\|^2 = (\\mathbf{X}^\\top \\mathbf{X})^{-1} \\mathbf{X}^\\top \\mathbf{y}\n\\]\n[use Julia code (existing package) to perform linear regression for volume ~ girth + height]\nThe interpretation of the Julia output is similar to the simple linear regression model, but we provide explicit formulas now:\n\nparameter estimates:\n\\[\n(\\mathbf{X}^\\top \\mathbf{X})^{-1} \\mathbf{X}^\\top \\mathbf{y}\n\\]\nestimated standard errors:\n\\[\n\\hat s_{\\beta_i} = \\sqrt{([\\mathbf{X}^\\top \\mathbf{X}]^{-1})_{ii} \\frac 1 {n-p-1} \\|\\mathbf{y} - \\mathbf{X} \\beta\\|^2}\n\\]\n\\(t\\)-statistics:\n\\[ t_i = \\frac{\\hat \\beta_i}{\\hat s_{\\hat \\beta_i}}, \\qquad i=0,\\ldots,p. \\]\n\\(p\\)-values:\n\\[\np\\text{-value} = \\mathbb{P}(|T| &gt; t_i), \\quad \\text{where } T \\sim t_{n-p-1}\n\\]\n\n\n\n\n\n\n\nTask 2\n\n\n\n\n\n\nImplement functions that estimate the \\(\\beta\\)-parameters, the corresponding standard errors and the \\(t\\)-statistics.\nTest your functions with the `tree’ data set and try to reproduce the output above.\n\n\n\n\nWhich model is the best? For linear models, one often uses the \\(R^2\\) characteristic. Roughly speaking, it gives the percentage (between 0 and 1) of the variance that can be explained by the linear model.\nr2(linmod1)\nr2(linmod2)\n\nlinmod3 = lm(@formula(Volume ~ Girth + Height + Girth*Height), trees)\n\nr2(linmod3)\n\n\n\n\n\n\nNote\n\n\n\nThe more covariates you add the more variance can be explained by the linear model - \\(R^2\\) increases. In order to balance goodness-of-fit of a model and its complexity, information criteria such as aic are considered.\n\n\n\n\n\nClassical linear model\n\\[\n\\mathbf{y} = \\mathbf{X} \\beta + \\varepsilon\n\\]\nimplies that \\[ \\mathbf{y} \\mid \\mathbf{X} \\sim \\mathcal{N}(\\mathbf{X} \\mathbf{\\beta}, \\sigma^2\\mathbf{I}).\\]\nIn particular, the conditional expectation satisfies \\(\\mathbb{E}(\\mathbf{y} \\mid \\mathbf{X}) = \\mathbf{X} \\beta\\).\nHowever, the assumption of a normal distribution is unrealistic for non-continuous data. Popular alternatives include:\n\nfor counting data: \\[\n   \\mathbf{y} \\mid \\mathbf{X} \\sim \\mathrm{Poisson}(\\exp(\\mathbf{X}\\mathbf{\\beta})) \\qquad \\leadsto  \\mathbb{E}(\\mathbf{y} \\mid \\mathbf{X}) = \\exp(\\mathbf{X} \\beta)\n  \\]\nHere, the components are considered to be independent and the exponential function is applied componentwise.\nfor binary data: \\[\n   \\mathbf{y} \\mid \\mathbf{X} \\sim \\mathrm{Bernoulli}\\left( \\frac{\\exp(\\mathbf{X}\\mathbf{\\beta})}{1 + \\exp(\\mathbf{X}\\mathbf{\\beta})} \\right) \\qquad \\leadsto  \\mathbb{E}(\\mathbf{y} \\mid \\mathbf{X}) = \\frac{\\exp(\\mathbf{X}\\mathbf{\\beta})}{1 + \\exp(\\mathbf{X}\\mathbf{\\beta})}\n  \\]\nAgain, the components are considered to be independent and all the operations are applied componentwise.\n\nAll these models are defined by the choice of a family of distributions and a function \\(g\\) (the so-called link function) such that\n\\[\n\\mathbb{E}(\\mathbf{y} \\mid \\mathbf{X}) = g^{-1}(\\mathbf{X} \\beta).\n\\]\nFor the models above, these are:\n\n\n\n\n\n\n\n\nType of Data\nDistribution Family\nLink Function\n\n\n\n\ncontinuous\nNormal\nidentity:\n\\[\ng(x)=x\n\\]\n\n\ncount\nPoisson\nlog:\n\\[\ng(x) = \\log(x)\n\\]\n\n\nbinary\nBernoulli\nlogit:\n\\[\ng(x) = \\log\\left(\n\\frac{x}{1-x}\n\\right)\n\\]\n\n\n\nIn general, the parameter vector \\(\\beta\\) is estimated via maximizing the likelihood, i.e.,\n\\[\n\\hat \\beta = \\mathrm{argmax} \\prod_{i=1}^n f(y_i \\mid \\mathbf{X}_{\\cdot i}),\n\\]\nwhich is equivalent to the maximization of the log-likelihood, i.e.,\n\\[\n\\hat \\beta = \\mathrm{argmax} \\sum_{i=1}^n \\log f(y_i \\mid \\mathbf{X}_{\\cdot i}),\n\\]\nIn the Gaussian case, the maximum likelihood estimator is identical to the least squares estimator considered above.\nusing CSV\nusing HTTP\n\nhttp_response = HTTP.get(\"https://vincentarelbundock.github.io/Rdatasets/csv/AER/SwissLabor.csv\")\nSwissLabor = DataFrame(CSV.File(http_response.body))\n\nSwissLabor[!,\"participation\"] .= (SwissLabor.participation .== \"yes\")\n\nmodel = glm(@formula(participation ~ age^2), \n            SwissLabor, Binomial(), ProbitLink())\n\n\n\n\n\n\nTask 3:\n\n\n\n\n\n\nReproduce the results of our data analysis of the tree data set using a generalized linear model with normal distribution family.\nGenerate \\(n=20\\) random covariates \\(\\mathbf{x}\\) and Poisson-distributed counting data with parameters \\(\\beta_0 + \\beta_1 x_i\\). Re-estimate the parameters by a generalized linear model.\n\n\n\n\n\n\n\nIn the linear regression models so far, we assumed that the response variable \\(\\mathbf{y}\\) depends on the design matrix of covariates \\(\\mathbf{X}\\) - which are assumed to be given/fixed - multiplied by the so-called fixed effects coefficients \\(\\mathbf{X}\\beta\\) and independent errors \\(\\varepsilon\\). However, in many situations, there are also random effects on several components of the response variable. These can be included in the model by adding another design matrix \\(\\mathbf{Z}\\) multiplied by a random vector \\(u\\), the so-called random effects coefficients, that are assumed to be jointly normally distributed with mean vector \\(0\\) and variance-covariance matrix \\(\\Sigma\\) (typically not a diagonal matrix). In matrix notation, we have the following form:\n\\[\n\\mathbf{y} = \\mathbf{X} \\beta + \\mathbf{Z}u + \\varepsilon\n\\]\nMaximizing the likelihood, we can estimate \\(\\beta\\) and optimally predict the random vector \\(u\\)."
  },
  {
    "objectID": "material/3_wed/regression/MultipleRegressionBasics.html#motivation",
    "href": "material/3_wed/regression/MultipleRegressionBasics.html#motivation",
    "title": "Multiple Regression Basics",
    "section": "",
    "text": "using Statistics\nusing Plots\nusing RDatasets\n\ntrees = dataset(\"datasets\", \"trees\")\n\nscatter(trees.Volume, trees.Girth,\n        legend=false, xlabel=\"Girth\", ylabel=\"Volume\")\nAim: Find relationship between the response variable volume and the explanatory variable/covariate girth? Can we predict the volume of a tree given its girth?\nscatter(trees.Girth, trees.Volume,\n        legend=false, xlabel=\"Girth\", ylabel=\"Volume\")\nplot!(x -&gt; -37 + 5*x)\nFirst Guess: There is a linear relation!"
  },
  {
    "objectID": "material/3_wed/regression/MultipleRegressionBasics.html#simple-linear-regression",
    "href": "material/3_wed/regression/MultipleRegressionBasics.html#simple-linear-regression",
    "title": "Multiple Regression Basics",
    "section": "",
    "text": "Main assumption: up to some error term, each measurement of the response variable \\(y_i\\) depends linearly on the corresponding value \\(x_i\\) of the covariate\n\\(\\leadsto\\) (Simple) Linear Model: \\[y_i = \\beta_0 + \\beta_1 x_i + \\varepsilon_i,   \\qquad  i=1,...,n,\\] where \\(\\varepsilon_i \\sim \\mathcal{N}(0,\\sigma^2)\\) are independent normally distributed errors with unknown variance \\(\\sigma^2\\).\nAim: Find the straight line that fits best, i.e., find the optimal estimators for \\(\\beta_0\\) and \\(\\beta_1\\).\nTypical choice: Least squares estimator (= maximum likelihood estimator for normal errors)\n\\[ (\\hat \\beta_0, \\hat \\beta_1) = \\mathrm{argmin} \\ \\| \\mathbf{y} - \\mathbf{1} \\beta_0 - \\mathbf{x} \\beta_1\\|^2 \\]\nwhere \\(\\mathbf{y}\\) is the vector of responses, \\(\\mathbf{x}\\) is the vector of covariates and \\(\\mathbf{1}\\) is a vector of ones.\nWritten in matrix style:\n\\[\n(\\hat \\beta_0, \\hat \\beta_1) = \\mathrm{argmin} \\ \\left\\| \\mathbf{y} - (\\mathbf{1},\\mathbf{x}) \\left( \\begin{array}{c} \\beta_0\\\\ \\beta_1\\end{array}\\right) \\right\\|^2\n\\]\nNote: There is a closed-form expression for \\((\\hat \\beta_0, \\hat \\beta_1)\\). We will not make use of it here, but rather use Julia to solve the problem.\nlm(@formula(Volume ~ Girth), trees)\nInterpretation of the Julia output:\n\ncolumn estimate : least square estimates for \\(\\hat \\beta_0\\) and \\(\\hat \\beta_1\\)\ncolumn Std. Error : estimated standard deviation \\(\\hat s_{\\hat \\beta_i}\\) of the estimator \\(\\hat \\beta_i\\)\ncolumn t value : value of the \\(t\\)-statistics\n\\[ t_i = {\\hat \\beta_i \\over \\hat s_{\\hat \\beta_i}}, \\quad i=0,1, \\]\nUnder the hypothesis \\(\\beta_i=0\\), the test statistics \\(t_i\\) would follow a \\(t\\)-distribution.\ncolumn Pr(&gt;|t|): \\(p\\)-values for the hypotheses \\(\\beta_i=0\\) for \\(i=0,1\\)\n\n\n\n\n\n\n\nTip\n\n\n\nThe command rand(n) generates a sample of n “random” (i.e., uniformly distributed) random numbers. If you want to sample from another distribution, use the Distributions package, define an object being the distribution of interest, e.g. d = Normal(0.0, 2.0) for a normal distribution with mean 0.0 and standard deviation 2.0, and sample n times from this distribution by rand(d, n).\n\n\n\n\n\n\n\n\nTask 1\n\n\n\n\n\n\nGenerate \\(n=20\\) covariates \\(\\mathbf{x}\\) randomly.\nGiven these covariates and the true parameters \\(\\beta_0=-3\\), \\(\\beta_1=2\\) and \\(\\sigma=0.5\\), simulate responses from a linear model (with normally distributed errors) and estimate the coefficients \\(\\beta_0\\) and \\(\\beta_1\\).\nPlay with different choices of the parameters above (including the sample size \\(n\\)) to see the effects on the parameter estimates and the \\(p\\)-values."
  },
  {
    "objectID": "material/3_wed/regression/MultipleRegressionBasics.html#multiple-regression-model",
    "href": "material/3_wed/regression/MultipleRegressionBasics.html#multiple-regression-model",
    "title": "Multiple Regression Basics",
    "section": "",
    "text": "Idea: Generalize the simple linear regression model to multiple covariates, w.g., predict volume using girth and `height``.\n\\(\\leadsto\\) Linear Model: \\[y_i = \\beta_0 + \\beta_1 x_{i1} + \\ldots + \\beta_p x_{ip} + \\varepsilon_i,   \\qquad  i=1,...,n,\\]where\n\n\\(y_i\\): \\(i\\)-th measurement of the response,\n\\(x_{i1}\\): \\(i\\) th value of first covariate,\n…\n\\(x_{ip}\\): \\(i\\)-th value of \\(p\\)-th covariate,\n\\(\\varepsilon_i \\sim \\mathcal{N}(0,\\sigma^2)\\): independent normally distributed errors with unknown variance \\(\\sigma^2\\).\n\nTask: Find the optimal estimators for \\(\\mathbf{\\beta} = (\\beta_0, \\beta_1, \\ldots, \\beta_p)\\).\nOur choice again: Least squares estimator (= maximum likelihood estimator for normal errors)\n\\[\n\\hat \\beta = \\mathrm{argmin} \\ \\| \\mathbf{y} - \\mathbf{1} \\beta_0 - \\mathbf{x}_1 \\beta_1 - \\ldots - \\mathbf{x}_p \\beta_p\\|^2\n\\]\nwhere \\(\\mathbf{y}\\) is the vector of responses, \\(\\mathbf{x}\\)_j is the vector of the \\(j\\) th covariate and \\(\\mathbf{1}\\) is a vector of ones.\nWritten in matrix style:\n\\[\n\\mathbf{\\hat \\beta} = \\mathrm{argmin} \\ \\left\\| \\mathbf{y} - (\\mathbf{1},\\mathbf{x}_1,\\ldots,\\mathbf{x}_p) \\left( \\begin{array}{c} \\beta_0 \\\\ \\beta_1 \\\\ \\vdots \\\\ \\beta_p\\end{array} \\right) \\right\\|^2\n\\]\nDefining the design matrix\n\\[ \\mathbf{X} = \\left( \\begin{array}{cccc}\n                1 & x_{11} & \\ldots & x_{1p} \\\\\n                \\vdots & \\vdots & \\ddots & \\vdots \\\\\n                1 & x_{n1} & \\ldots & x_{np}\n                \\end{array}\\right) \\qquad\n  (\\text{size } n \\times (p+1)), \\]\nwe get the short form\n\\[\n\\mathbf{\\hat \\beta} = \\mathrm{argmin} \\ \\| \\mathbf{y} - \\mathbf{X} \\mathbf{\\beta}  \\|^2 = (\\mathbf{X}^\\top \\mathbf{X})^{-1} \\mathbf{X}^\\top \\mathbf{y}\n\\]\n[use Julia code (existing package) to perform linear regression for volume ~ girth + height]\nThe interpretation of the Julia output is similar to the simple linear regression model, but we provide explicit formulas now:\n\nparameter estimates:\n\\[\n(\\mathbf{X}^\\top \\mathbf{X})^{-1} \\mathbf{X}^\\top \\mathbf{y}\n\\]\nestimated standard errors:\n\\[\n\\hat s_{\\beta_i} = \\sqrt{([\\mathbf{X}^\\top \\mathbf{X}]^{-1})_{ii} \\frac 1 {n-p-1} \\|\\mathbf{y} - \\mathbf{X} \\beta\\|^2}\n\\]\n\\(t\\)-statistics:\n\\[ t_i = \\frac{\\hat \\beta_i}{\\hat s_{\\hat \\beta_i}}, \\qquad i=0,\\ldots,p. \\]\n\\(p\\)-values:\n\\[\np\\text{-value} = \\mathbb{P}(|T| &gt; t_i), \\quad \\text{where } T \\sim t_{n-p-1}\n\\]\n\n\n\n\n\n\n\nTask 2\n\n\n\n\n\n\nImplement functions that estimate the \\(\\beta\\)-parameters, the corresponding standard errors and the \\(t\\)-statistics.\nTest your functions with the `tree’ data set and try to reproduce the output above.\n\n\n\n\nWhich model is the best? For linear models, one often uses the \\(R^2\\) characteristic. Roughly speaking, it gives the percentage (between 0 and 1) of the variance that can be explained by the linear model.\nr2(linmod1)\nr2(linmod2)\n\nlinmod3 = lm(@formula(Volume ~ Girth + Height + Girth*Height), trees)\n\nr2(linmod3)\n\n\n\n\n\n\nNote\n\n\n\nThe more covariates you add the more variance can be explained by the linear model - \\(R^2\\) increases. In order to balance goodness-of-fit of a model and its complexity, information criteria such as aic are considered."
  },
  {
    "objectID": "material/3_wed/regression/MultipleRegressionBasics.html#generalized-linear-models",
    "href": "material/3_wed/regression/MultipleRegressionBasics.html#generalized-linear-models",
    "title": "Multiple Regression Basics",
    "section": "",
    "text": "Classical linear model\n\\[\n\\mathbf{y} = \\mathbf{X} \\beta + \\varepsilon\n\\]\nimplies that \\[ \\mathbf{y} \\mid \\mathbf{X} \\sim \\mathcal{N}(\\mathbf{X} \\mathbf{\\beta}, \\sigma^2\\mathbf{I}).\\]\nIn particular, the conditional expectation satisfies \\(\\mathbb{E}(\\mathbf{y} \\mid \\mathbf{X}) = \\mathbf{X} \\beta\\).\nHowever, the assumption of a normal distribution is unrealistic for non-continuous data. Popular alternatives include:\n\nfor counting data: \\[\n   \\mathbf{y} \\mid \\mathbf{X} \\sim \\mathrm{Poisson}(\\exp(\\mathbf{X}\\mathbf{\\beta})) \\qquad \\leadsto  \\mathbb{E}(\\mathbf{y} \\mid \\mathbf{X}) = \\exp(\\mathbf{X} \\beta)\n  \\]\nHere, the components are considered to be independent and the exponential function is applied componentwise.\nfor binary data: \\[\n   \\mathbf{y} \\mid \\mathbf{X} \\sim \\mathrm{Bernoulli}\\left( \\frac{\\exp(\\mathbf{X}\\mathbf{\\beta})}{1 + \\exp(\\mathbf{X}\\mathbf{\\beta})} \\right) \\qquad \\leadsto  \\mathbb{E}(\\mathbf{y} \\mid \\mathbf{X}) = \\frac{\\exp(\\mathbf{X}\\mathbf{\\beta})}{1 + \\exp(\\mathbf{X}\\mathbf{\\beta})}\n  \\]\nAgain, the components are considered to be independent and all the operations are applied componentwise.\n\nAll these models are defined by the choice of a family of distributions and a function \\(g\\) (the so-called link function) such that\n\\[\n\\mathbb{E}(\\mathbf{y} \\mid \\mathbf{X}) = g^{-1}(\\mathbf{X} \\beta).\n\\]\nFor the models above, these are:\n\n\n\n\n\n\n\n\nType of Data\nDistribution Family\nLink Function\n\n\n\n\ncontinuous\nNormal\nidentity:\n\\[\ng(x)=x\n\\]\n\n\ncount\nPoisson\nlog:\n\\[\ng(x) = \\log(x)\n\\]\n\n\nbinary\nBernoulli\nlogit:\n\\[\ng(x) = \\log\\left(\n\\frac{x}{1-x}\n\\right)\n\\]\n\n\n\nIn general, the parameter vector \\(\\beta\\) is estimated via maximizing the likelihood, i.e.,\n\\[\n\\hat \\beta = \\mathrm{argmax} \\prod_{i=1}^n f(y_i \\mid \\mathbf{X}_{\\cdot i}),\n\\]\nwhich is equivalent to the maximization of the log-likelihood, i.e.,\n\\[\n\\hat \\beta = \\mathrm{argmax} \\sum_{i=1}^n \\log f(y_i \\mid \\mathbf{X}_{\\cdot i}),\n\\]\nIn the Gaussian case, the maximum likelihood estimator is identical to the least squares estimator considered above.\nusing CSV\nusing HTTP\n\nhttp_response = HTTP.get(\"https://vincentarelbundock.github.io/Rdatasets/csv/AER/SwissLabor.csv\")\nSwissLabor = DataFrame(CSV.File(http_response.body))\n\nSwissLabor[!,\"participation\"] .= (SwissLabor.participation .== \"yes\")\n\nmodel = glm(@formula(participation ~ age^2), \n            SwissLabor, Binomial(), ProbitLink())\n\n\n\n\n\n\nTask 3:\n\n\n\n\n\n\nReproduce the results of our data analysis of the tree data set using a generalized linear model with normal distribution family.\nGenerate \\(n=20\\) random covariates \\(\\mathbf{x}\\) and Poisson-distributed counting data with parameters \\(\\beta_0 + \\beta_1 x_i\\). Re-estimate the parameters by a generalized linear model."
  },
  {
    "objectID": "material/3_wed/regression/MultipleRegressionBasics.html#outlook-linear-mixed-models",
    "href": "material/3_wed/regression/MultipleRegressionBasics.html#outlook-linear-mixed-models",
    "title": "Multiple Regression Basics",
    "section": "",
    "text": "In the linear regression models so far, we assumed that the response variable \\(\\mathbf{y}\\) depends on the design matrix of covariates \\(\\mathbf{X}\\) - which are assumed to be given/fixed - multiplied by the so-called fixed effects coefficients \\(\\mathbf{X}\\beta\\) and independent errors \\(\\varepsilon\\). However, in many situations, there are also random effects on several components of the response variable. These can be included in the model by adding another design matrix \\(\\mathbf{Z}\\) multiplied by a random vector \\(u\\), the so-called random effects coefficients, that are assumed to be jointly normally distributed with mean vector \\(0\\) and variance-covariance matrix \\(\\Sigma\\) (typically not a diagonal matrix). In matrix notation, we have the following form:\n\\[\n\\mathbf{y} = \\mathbf{X} \\beta + \\mathbf{Z}u + \\varepsilon\n\\]\nMaximizing the likelihood, we can estimate \\(\\beta\\) and optimally predict the random vector \\(u\\)."
  },
  {
    "objectID": "material/3_wed/linalg/slides.html",
    "href": "material/3_wed/linalg/slides.html",
    "title": "Slides",
    "section": "",
    "text": "The slides are available in pptx format here. Note that there are a few extra slides in case you are motivated to learn more!"
  },
  {
    "objectID": "material/3_wed/linalg/slides.html#exercise",
    "href": "material/3_wed/linalg/slides.html#exercise",
    "title": "Slides",
    "section": "Exercise",
    "text": "Exercise\nThe exercise is rendered as html here but can also be downloaded  Download as ipynb \nBefore starting the exercise, please download the files Manifest.toml and Project.toml, put the files in the same folder that *.ipynb file is located.\nStart Julia in that directory and run the following commands:\n\nusing Pkg; Pkg.activate(\".\"); Pkg.instantiate()\n\nNow, you are ready to open the notebook in VSCode or alternatively in the same Julia console that you used for installation. You can run the following commands:\n\nusing IJulia; notebook(dir=\".\")"
  },
  {
    "objectID": "material/3_wed/docs/tasks.html",
    "href": "material/3_wed/docs/tasks.html",
    "title": "Task 1: Docstrings",
    "section": "",
    "text": "Task 1: Docstrings\n\nAdd Docstrings to some of your functions.\nLoad the package, and check you can see the docstrings using e.g. ?rse_mean\n\n\n\n\nTask 2: Documenter.jl\n\nFolderstructure\n\ncreate folders/files:\n\ndocs/\n├── src/\n├── src/index.md\n└── make.jl\n\n\nadd some docs\n\nwith mydocs containing\n\n\nShow docstring of a single function `func`\n```@docs \nfunc\n```\n\nProvide documentation for all doc_string-equiped functions\n```@autodocs \nModules = [MyDocsPackage]\n```\n\nExecute a code-block, but hide it's output\n```@example MyScope\nx = [1,2,3]\nnothing #hide\n```\n\nand\nmake.jl containing\nusing Documenter, Example\n\nmakedocs(sitename=\"My Documentation\")\n\n\n3. Generate\nGenerate the docs using include(\"make.jl\") after activating the ./docs/Project.toml\n\n\n\n\n\n\nBonus-Task\n\n\n\nUse LiveServer.jl to automatically update a local preview of your documentation (follow this tutorial )\n\n\n\n\n4. Add a tutorial\nNow add a tutorial ./docs/src/tutorial.md which should contain a brief example simulating some data (using rand) and calculating mean, tstat and std on them.\nUse the makedocs(...page=) keywordargument.\n\n\n\n\nTask 3: PkgTemplate.jl\nGenerate a package MySecondStatsPackage using PkgTemplate.\n\nAdd github-actions for:\n\ncoverage\nunittests\ndocs\n\nMIT license\nREADME.md\n\n\nDon’t forget to activate the github-page in the github settings!"
  },
  {
    "objectID": "cheatsheets/git.html",
    "href": "cheatsheets/git.html",
    "title": "Research Software Engineering Summer School",
    "section": "",
    "text": "There are many good ones out there. One we can recommend is the one from GitHub."
  },
  {
    "objectID": "cheatsheets/ggplotAOG.html",
    "href": "cheatsheets/ggplotAOG.html",
    "title": "AlgebraOfGraphics.jl vs. GGPlot.jl",
    "section": "",
    "text": "AlgebraOfGraphics.jl vs. GGPlot.jl\nCC-by-SA Pumas.ai |—|—|—| ||ggplot2 |AoG.jl |Input data |ggplot(df) | data(df) |Map aesthetics |aes(…) |mapping(…) |Add geometries |geom_(…) |visual(…) |Combine layers | + | |Facetting |facet_wrap|grid |mapping(…; [row|col|layout]=:column) |Customize scales |scale_manual() | renamer(…) |Themes theme(…) |set_theme!(theme_*()); |draw(plt) |Customize axes labels |[x|y]lab(“…”) |draw(plt, axis=(; [x|y]label=“…”)) |Customize color |scale_[fill|color]_*(…) |draw(plt, palettes=(; color=…)) or visual(…, colormap=…“) |Save plot |ggsave(”file.[png|svg]“) |save(”file.[png|svg]“, draw(plt)) |Frequency |geom_bar() or stat_count() |frequency() |Histogram |geom_histogram or stat_bin() |histogram() |Density |geom_density or stat_density() |density() |Expectation/Mean| stat_summary(fun =”mean”) |expectation() |Smooth trend |stat_smooth or geom_smooth() |(visual(…) + smooth()) |Linear trend |stat_smooth(method = “lm”) or geom_smooth(method = “lm”)| (visual(…) + linear()) |Log scale |scale_[x|y]_log10() |draw(plt; axis=(; [x|y]scale=log10))"
  },
  {
    "objectID": "social.html",
    "href": "social.html",
    "title": "Social Program",
    "section": "",
    "text": "What\nWhen\nWhere\n\n\n\n\nGet-together\nSunday (8th October) 7 pm\nAt a restaurant called Metzgerei\n\n\nMeet & Greet\nMonday (9th October)\n\n\n\nHike to Bärenschlössle + dinner\nTuesday (10th October) 6:10pm\nWe start at the entrance of the SimTech building\n\n\nGet-together/Games night\nTuesday (10th October) ~9:15 pm\nAt a student pub called Unithekle\n\n\nConference dinner\nat Sophies Brauhaus\nWednesday (11th October) 7:00pm\nEither at the entrance of the SimTech building (6:20pm) or directly at Sophies Brauhaus (7:00pm)\n\n\nBowling night\nThursday (12th October) 7:45 pm\nAt the bowling centre in Möhringen"
  },
  {
    "objectID": "social.html#overview",
    "href": "social.html#overview",
    "title": "Social Program",
    "section": "",
    "text": "What\nWhen\nWhere\n\n\n\n\nGet-together\nSunday (8th October) 7 pm\nAt a restaurant called Metzgerei\n\n\nMeet & Greet\nMonday (9th October)\n\n\n\nHike to Bärenschlössle + dinner\nTuesday (10th October) 6:10pm\nWe start at the entrance of the SimTech building\n\n\nGet-together/Games night\nTuesday (10th October) ~9:15 pm\nAt a student pub called Unithekle\n\n\nConference dinner\nat Sophies Brauhaus\nWednesday (11th October) 7:00pm\nEither at the entrance of the SimTech building (6:20pm) or directly at Sophies Brauhaus (7:00pm)\n\n\nBowling night\nThursday (12th October) 7:45 pm\nAt the bowling centre in Möhringen"
  },
  {
    "objectID": "social.html#sunday",
    "href": "social.html#sunday",
    "title": "Social Program",
    "section": "Sunday",
    "text": "Sunday\nGet-together at 7pm at a restaurant called Metzgerei (vegetarian and vegan options available)\n\nClosest U-Bahn station(s): Schwab-/Bebelstraße (U2, U29)\nClosest S-Bahn station(s): Schwabstraße (S1, S2, S3, S4, S5, S6, S60)"
  },
  {
    "objectID": "social.html#monday",
    "href": "social.html#monday",
    "title": "Social Program",
    "section": "Monday",
    "text": "Monday\nBBQ on campus, close to the SimTech building."
  },
  {
    "objectID": "social.html#tuesday",
    "href": "social.html#tuesday",
    "title": "Social Program",
    "section": "Tuesday",
    "text": "Tuesday\nOn Tuesday we leave at 6:15 from the SimTech building building for an easy hike (around 30-45 min.; no elevation) through the forest towards Bärenschlössle. Here, we will have time for dinner and drinks together (individually payed), after which we will head back towards campus.\nBärenschlössle 🗺️\nArriving on campus you can decide to either head off for the night, or you join our group to go to Unithekle, a student pub on campus with cheap drinks and good boardgames!\nUnithekle 🗺️"
  },
  {
    "objectID": "social.html#wednesday",
    "href": "social.html#wednesday",
    "title": "Social Program",
    "section": "Wednesday",
    "text": "Wednesday\nConference dinner (and Bene’s birthday!)"
  },
  {
    "objectID": "social.html#thursday",
    "href": "social.html#thursday",
    "title": "Social Program",
    "section": "Thursday",
    "text": "Thursday\nOn Thursday we will meet slightly before 20:00 at bowling alley Möhringen for a friendly tournament between groups.\nBowling centre in Möhringen 🗺️ (8pm-10pm)\n\nWe want to start bowling at 8pm. Please be there about 10 minutes earlier to rent bowling shoes.\nClosest U-Bahn station(s): SSB-Zentrum (U3, U8, U12), Vaihinger Straße (U3, U5, U6, U8, U12)\nClosest bus stop(s): Wallgraben (N1)\nClosest S-Bahn station(s): Vaihingen (S1, S2, S3)\n\n25 min walk\nWe recommend taking the S-Bahn from University to Vaihingen and then change to U-Bahn\n\n\nBeforehand you’ll have time to get some food; we prepared a map with some recommendations on the way to the bowling alley, if you head there straight from campus."
  },
  {
    "objectID": "missing.html",
    "href": "missing.html",
    "title": "Research Software Engineering Summer School",
    "section": "",
    "text": "This content is not yet included in the website - check at another time!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Research Software Engineering with Julia: Basics, Visualization, and Statistics",
    "section": "",
    "text": "This websites links all materials (slides + exercises) for the 2023 RSE+Julia Summerschool at SimTech, Stuttgart University\nGeneral information about the summer school can be found here."
  },
  {
    "objectID": "index.html#we-probably-have-some-time-to-discuss-advanced-topics-towards-the-end-of-the-summers-school.-you-are-welcome-to-send-an-email-to-benedikt-andor-put-it-into-the-git-issue",
    "href": "index.html#we-probably-have-some-time-to-discuss-advanced-topics-towards-the-end-of-the-summers-school.-you-are-welcome-to-send-an-email-to-benedikt-andor-put-it-into-the-git-issue",
    "title": "Research Software Engineering with Julia: Basics, Visualization, and Statistics",
    "section": "We probably have some time to discuss advanced topics towards the end of the summers school. You are welcome to send an email to benedikt and/or put it into the git issue",
    "text": "We probably have some time to discuss advanced topics towards the end of the summers school. You are welcome to send an email to benedikt and/or put it into the git issue\nWe wish you all a interesting, safe and fun summerschool. If there are any interpersonal issues (especially regarding code-of-conduct), please directly contact Benedikt Ehinger1. For organizational issues, please contact Sina Schorndorfer\nBest, Benedikt, Benjamin, Marco"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Research Software Engineering with Julia: Basics, Visualization, and Statistics",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIf there are problem with him, please contact Marco Oesting↩︎"
  },
  {
    "objectID": "installation/julia.html",
    "href": "installation/julia.html",
    "title": "Installing Julia",
    "section": "",
    "text": "Installing Julia\nThe recommended way to install julia is juliaup. It allows you to, e.g., easily update Julia at a later point, but also test out alpha/beta versions etc.\nTLDR; If you dont want to read the explicit instructions, just copy the following command\n\nWindows\nAppStore -&gt; JuliaUp, or winget install julia -s msstore in CMD\n\n\nMac & Linux\ncurl -fsSL https://install.julialang.org | sh in any shell\n\n\n\nRevise.jl\nThere is a julia-package Revise.jl that everyone should install. To do so open a julia REPL (=command line) and execute the following lines:\nusing Pkg\nPkg.add(\"Revise\")\nand that’s it. Revise automatically screens the active packages and updates the function if it detects code changes. Similar to autoreload 2 in ipython.\n\n\nVSCode\nTo install VSCode (the recommended IDE), go to this link and download + install the correct package.\nNext, install the Julia extension\n (thanks to https://juliateachingctu.github.io for providing us with the nice graphics)\nFinally press Ctrl + Shift + P to get VSCodes command palette, and type in Julia: Start REPL \n\n\nOptional: OhMyREPL\nOptionally you cann install a package to give you nicer syntax highlighting in the REPL.\n\nInstall the package: ]activate (without a path after activate, you activate the “global” environment) ]add OhMyREPL\nAdd it to your startup.jl Open .julia/config/startup.jl or c:/users/USERNAME/.julia/config/startup.jl on windows and add\n\natreplinit() do repl\n    try\n        @eval using OhMyREPL\n    catch e\n        @warn \"error while importing OhMyREPL\" e\n    end\nend\n🎉"
  }
]